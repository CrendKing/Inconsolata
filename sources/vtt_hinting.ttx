<?xml version="1.0" encoding="UTF-8"?>
<ttFont sfntVersion="\x00\x01\x00\x00" ttLibVersion="4.6">

  <TSI1>

    <glyphProgram name=".notdef">
/* TT glyph 0, char 0xffff */
/* VTT 6.35 compiler Sun Apr 27 04:23:12 2025 */


    </glyphProgram>

    <glyphProgram name="A">
/* TT glyph 1, char 0x41 (A) */
/* VTT 6.35 compiler Sun Apr 27 04:23:12 2025 */
SVTCA[Y]
CALL[], 6, 8, 114
CALL[], 7, 3, 114
SRP1[], 6
IP[], 1
MDAP[R], 1
CALL[], 1, 2, 106
SRP1[], 6
SHP[1], 10
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="AE">
/* TT glyph 26, char 0xc6 */
/* VTT 6.35 compiler Sun Apr 27 04:23:12 2025 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 1, 2, 114
CALL[], 1, 4, 106
SRP2[], 0
IP[], 8
MDAP[R], 8
CALL[], 8, 5, 106
SRP1[], 1
SRP2[], 0
IP[], 14
MDAP[R], 14
CALL[], 14, 16, 106
SRP1[], 0
SHP[1], 12
CALL[], 12, 9, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="AEacute">
/* VTTTalk Unicode 0x1fc */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 26, 0, 0
OFFSET[R], 944, 0, 0
SVTCA[Y]
CALL[], 20, 1, 1, 1, 36, 86
SHC[2], 2
SVTCA[X]
CALL[], 21, 23, 0, 34, 3, 87
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="Aacute">
/* VTTTalk Unicode 0xc1 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 944, -19, 0
SVTCA[Y]
CALL[], 11, 7, 1, 1, 26, 86
SHC[2], 2
SVTCA[X]
CALL[], 12, 14, 6, 32, 9, 87
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="Abreve">
/* VTTTalk Unicode 0x102 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 899, -8, 133
SVTCA[Y]
CALL[], 16, 7, 1, 1, 37, 86
SHC[2], 2
SVTCA[X]
CALL[], 19, 12, 6, 32, 9, 87
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="Acircumflex">
/* VTTTalk Unicode 0xc2 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 935, 0, 0
SVTCA[Y]
CALL[], 11, 7, 1, 1, 21, 86
SHC[2], 2
SVTCA[X]
CALL[], 12, 15, 6, 32, 9, 87
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="Adieresis">
/* VTTTalk Unicode 0xc4 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 941, -1, 0
SVTCA[Y]
CALL[], 11, 7, 1, 1, 54, 86
SHC[2], 2
SHC[2], 3
SVTCA[X]
CALL[], 14, 32, 6, 32, 9, 87
SHC[2], 2
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="Agrave">
/* VTTTalk Unicode 0xc0 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 943, -64, 0
SVTCA[Y]
CALL[], 11, 7, 1, 1, 26, 86
SHC[2], 2
SVTCA[X]
CALL[], 12, 14, 6, 28, 9, 87
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="Amacron">
/* VTTTalk Unicode 0x100 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 927, 0, 166
SVTCA[Y]
CALL[], 11, 7, 1, 1, 97, 86
SHC[2], 2
SVTCA[X]
CALL[], 11, 14, 6, 32, 9, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="Aogonek">
/* VTTTalk Unicode 0x104 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 912, 165, 0
SVTCA[Y]
CALL[], 21, 10, 0, 0, 17, 86
SHC[2], 2
SVTCA[X]
CALL[], 16, 22, 6, 51, 9, 87
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="Aring">
/* VTTTalk Unicode 0xc5 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 948, -1, 0
SVTCA[Y]
CALL[], 11, 7, 0, 0, -15, 86
SHC[2], 2
SHC[2], 3
SVTCA[X]
CALL[], 15, 23, 6, 32, 9, 87
SHC[2], 2
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="Aringacute">
/* VTTTalk Unicode 0x1fa */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 948, -1, 0
OFFSET[R], 944, -19, 172
SVTCA[Y]
CALL[], 11, 7, 0, 0, -15, 86
SHC[2], 2
SHC[2], 3
CALL[], 41, 19, 1, 1, 37, 86
SHC[2], 4
SVTCA[X]
CALL[], 15, 23, 6, 32, 9, 87
SHC[2], 2
SHC[2], 3
CALL[], 42, 44, 15, 32, 23, 87
SHC[2], 4


    </glyphProgram>

    <glyphProgram name="Atilde">
/* VTTTalk Unicode 0xc3 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 901, -6, 114
SVTCA[Y]
CALL[], 15, 7, 1, 1, 54, 86
SHC[2], 2
SVTCA[X]
CALL[], 24, 12, 6, 33, 9, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="B">
/* TT glyph 28, char 0x42 (B) */
/* VTT 6.35 compiler Sun Apr 27 04:23:12 2025 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 1, 2, 114
CALL[], 1, 45, 106
SRP2[], 0
IP[], 33
MDAP[R], 33
CALL[], 33, 34, 106
CALL[], 0, 22, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="C">
/* TT glyph 29, char 0x43 (C) */
/* VTT 6.35 compiler Sun Apr 27 04:23:12 2025 */
SVTCA[Y]
CALL[], 0, 9, 114
CALL[], 11, 3, 114
CALL[], 11, 18, 106
CALL[], 0, 28, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="CR">
/* TT glyph 593, char 0xd */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */

    </glyphProgram>

    <glyphProgram name="Cacute">
/* VTTTalk Unicode 0x106 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 29, 0, 0
OFFSET[R], 944, 1, 0
SVTCA[Y]
CALL[], 36, 11, 1, 1, 32, 86
SHC[2], 1
SVTCA[X]
CALL[], 37, 39, 5, 34, 14, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="Ccaron">
/* TT glyph 31, char 0x10c */
/* VTT 6.35 compiler Sun Apr 27 04:23:12 2025 */
SVTCA[Y]
CALL[], 0, 9, 114
MDAP[R], 36
CALL[], 11, 3, 114
CALL[], 11, 18, 106
CALL[], 0, 28, 106
SRP1[], 36
SHP[1], 41
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="Ccedilla">
/* VTTTalk Unicode 0xc7 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 29, 0, 0
OFFSET[R], 928, 9, 0
SVTCA[Y]
CALL[], 52, 0, 0, 0, 10, 86
SHC[2], 1
SVTCA[X]
CALL[], 39, 58, 5, 37, 14, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="Ccircumflex">
/* VTTTalk Unicode 0x108 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 29, 0, 0
OFFSET[R], 935, 20, 0
SVTCA[Y]
CALL[], 36, 11, 1, 1, 27, 86
SHC[2], 1
SVTCA[X]
CALL[], 37, 40, 5, 34, 14, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="Cdotaccent">
/* VTTTalk Unicode 0x10a */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 29, 0, 0
OFFSET[R], 918, 14, 140
SVTCA[Y]
CALL[], 36, 11, 1, 1, 65, 86
SHC[2], 1
SVTCA[X]
CALL[], 39, 46, 5, 34, 14, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="D">
/* TT glyph 36, char 0x44 (D) */
/* VTT 6.35 compiler Sun Apr 27 04:23:12 2025 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 1, 2, 114
CALL[], 1, 27, 106
CALL[], 0, 17, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Dcaron">
/* TT glyph 38, char 0x10e */
/* VTT 6.35 compiler Sun Apr 27 04:23:12 2025 */
SVTCA[Y]
CALL[], 0, 8, 114
MDAP[R], 28
CALL[], 1, 2, 114
CALL[], 1, 27, 106
CALL[], 0, 17, 106
SRP1[], 28
SHP[1], 33
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="Dcroat">
/* VTTTalk Unicode 0x110 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 37, 0, 0


    </glyphProgram>

    <glyphProgram name="E">
/* TT glyph 42, char 0x45 (E) */
/* VTT 6.35 compiler Sun Apr 27 04:23:12 2025 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 1, 2, 114
CALL[], 1, 4, 106
SRP2[], 0
IP[], 8
MDAP[R], 8
CALL[], 8, 5, 106
CALL[], 0, 9, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="Eacute">
/* VTTTalk Unicode 0xc9 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 42, 0, 0
OFFSET[R], 944, -10, 0
SVTCA[Y]
CALL[], 12, 1, 1, 1, 36, 86
SHC[2], 1
SVTCA[X]
CALL[], 13, 15, 0, 34, 3, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="Ebreve">
/* VTTTalk Unicode 0x114 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 42, 0, 0
OFFSET[R], 899, 1, 133
SVTCA[Y]
CALL[], 17, 1, 1, 1, 47, 86
SHC[2], 1
SVTCA[X]
CALL[], 20, 13, 0, 34, 3, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="Ecaron">
/* TT glyph 45, char 0x11a */
/* VTT 6.35 compiler Sun Apr 27 04:23:12 2025 */
SVTCA[Y]
CALL[], 0, 8, 114
MDAP[R], 12
CALL[], 1, 2, 114
CALL[], 1, 4, 106
SRP1[], 12
SRP2[], 0
IP[], 8
MDAP[R], 8
CALL[], 8, 5, 106
CALL[], 0, 9, 106
SRP1[], 12
SHP[1], 17
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="Ecircumflex">
/* VTTTalk Unicode 0xca */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 42, 0, 0
OFFSET[R], 935, 9, 0
SVTCA[Y]
CALL[], 12, 1, 1, 1, 31, 86
SHC[2], 1
SVTCA[X]
CALL[], 13, 16, 0, 34, 3, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="Edieresis">
/* VTTTalk Unicode 0xcb */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 42, 0, 0
OFFSET[R], 941, 8, 0
SVTCA[Y]
CALL[], 12, 1, 1, 1, 64, 86
SHC[2], 1
SHC[2], 2
SVTCA[X]
CALL[], 15, 33, 0, 33, 3, 87
SHC[2], 1
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="Edotaccent">
/* VTTTalk Unicode 0x116 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 42, 0, 0
OFFSET[R], 918, 3, 140
SVTCA[Y]
CALL[], 12, 1, 1, 1, 69, 86
SHC[2], 1
SVTCA[X]
CALL[], 15, 22, 0, 33, 3, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="Egrave">
/* VTTTalk Unicode 0xc8 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 42, 0, 0
OFFSET[R], 943, -55, 0
SVTCA[Y]
CALL[], 12, 1, 1, 1, 36, 86
SHC[2], 1
SVTCA[X]
CALL[], 13, 15, 0, 28, 3, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="Emacron">
/* VTTTalk Unicode 0x112 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 42, 0, 0
OFFSET[R], 927, 9, 166
SVTCA[Y]
CALL[], 12, 1, 1, 1, 107, 86
SHC[2], 1
SVTCA[X]
CALL[], 12, 15, 0, 34, 3, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="Eng">
/* TT glyph 117, char 0x14a */
/* VTT 6.35 compiler Sun Apr 27 04:23:12 2025 */
SVTCA[Y]
MDAP[R], 9
CALL[], 27, 2, 114
CALL[], 25, 8, 114
CALL[], 9, 18, 106
SRP1[], 27
SHP[1], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="Eogonek">
/* VTTTalk Unicode 0x118 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 42, 0, 0
OFFSET[R], 929, 0, 0
SVTCA[Y]
CALL[], 22, 0, 0, 0, 17, 86
SHC[2], 1
SVTCA[X]
CALL[], 17, 23, 0, 45, 3, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="Eth">
/* TT glyph 37, char 0xd0 */
/* VTT 6.35 compiler Sun Apr 27 04:23:12 2025 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 5, 2, 114
CALL[], 5, 31, 106
SRP2[], 0
IP[], 35
MDAP[R], 35
CALL[], 35, 32, 106
SHP[1], 2
SHP[2], 3
CALL[], 0, 21, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="Euro">
/* TT glyph 600, char 0x20ac */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 13, 114
CALL[], 19, 5, 114
CALL[], 19, 29, 106
SRP2[], 0
IP[], 34
MDAP[R], 34
CALL[], 34, 37, 106
SHP[2], 12
SHP[1], 13
SRP1[], 19
SRP2[], 0
IP[], 5
MDAP[R], 5
CALL[], 5, 6, 106
SHP[1], 44
SHP[2], 41
CALL[], 0, 48, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="F">
/* TT glyph 66, char 0x46 (F) */
/* VTT 6.35 compiler Sun Apr 27 04:23:12 2025 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 1, 2, 114
CALL[], 1, 4, 106
SRP2[], 0
IP[], 8
MDAP[R], 8
CALL[], 8, 5, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="G">
/* TT glyph 67, char 0x47 (G) */
/* VTT 6.35 compiler Sun Apr 27 04:23:12 2025 */
SVTCA[Y]
CALL[], 0, 9, 114
CALL[], 11, 3, 114
CALL[], 11, 21, 106
SRP2[], 0
IP[], 39
MDAP[R], 39
CALL[], 39, 40, 106
CALL[], 0, 32, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="Gbreve">
/* VTTTalk Unicode 0x11e */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 67, 0, 0
OFFSET[R], 899, 16, 133
SVTCA[Y]
CALL[], 50, 11, 1, 1, 41, 86
SHC[2], 1
SVTCA[X]
CALL[], 53, 46, 4, 36, 42, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="Gcaron">
/* TT glyph 69, char 0x1e6 */
/* VTT 6.35 compiler Sun Apr 27 04:23:12 2025 */
SVTCA[Y]
CALL[], 0, 9, 114
MDAP[R], 45
CALL[], 11, 3, 114
CALL[], 11, 21, 106
SRP1[], 45
SRP2[], 0
IP[], 39
MDAP[R], 39
CALL[], 39, 40, 106
CALL[], 0, 32, 106
SRP1[], 45
SHP[1], 50
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="Gcircumflex">
/* VTTTalk Unicode 0x11c */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 67, 0, 0
OFFSET[R], 935, 24, 0
SVTCA[Y]
CALL[], 45, 11, 1, 1, 25, 86
SHC[2], 1
SVTCA[X]
CALL[], 46, 49, 4, 36, 42, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="Gdotaccent">
/* VTTTalk Unicode 0x120 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 67, 0, 0
OFFSET[R], 918, 18, 140
SVTCA[Y]
CALL[], 45, 11, 1, 1, 63, 86
SHC[2], 1
SVTCA[X]
CALL[], 48, 55, 4, 36, 42, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="H">
/* TT glyph 74, char 0x48 (H) */
/* VTT 6.35 compiler Sun Apr 27 04:23:12 2025 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 1, 2, 114
SRP1[], 0
IP[], 10
MDAP[R], 10
CALL[], 10, 3, 106
SRP1[], 1
SHP[1], 6
SRP1[], 0
SHP[1], 8
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Hbar">
/* TT glyph 75, char 0x126 */
/* VTT 6.35 compiler Sun Apr 27 04:23:12 2025 */
SVTCA[Y]
CALL[], 4, 8, 114
CALL[], 5, 2, 114
SRP1[], 4
IP[], 1
MDAP[R], 1
CALL[], 1, 0, 106
SRP1[], 5
SRP2[], 4
IP[], 14
MDAP[R], 14
CALL[], 14, 7, 106
SRP1[], 5
SHP[1], 10
SRP1[], 4
SHP[1], 12
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Hcircumflex">
/* VTTTalk Unicode 0x124 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 74, 0, 0
OFFSET[R], 935, 0, 0
SVTCA[Y]
CALL[], 12, 1, 1, 1, 32, 86
SHC[2], 1
SVTCA[X]
CALL[], 13, 16, 0, 33, 7, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="I">
/* TT glyph 79, char 0x49 (I) */
/* VTT 6.35 compiler Sun Apr 27 04:23:12 2025 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 5, 2, 114
CALL[], 5, 4, 106
SHP[2], 8
CALL[], 0, 9, 106
SHP[2], 1
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Iacute">
/* VTTTalk Unicode 0xcd */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 79, 0, 0
OFFSET[R], 944, -30, 0
SVTCA[Y]
CALL[], 12, 5, 1, 1, 37, 86
SHC[2], 1
SVTCA[X]
CALL[], 13, 15, 0, 31, 11, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="Ibreve">
/* VTTTalk Unicode 0x12c */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 79, 0, 0
OFFSET[R], 899, -19, 133
SVTCA[Y]
CALL[], 17, 5, 1, 1, 48, 86
SHC[2], 1
SVTCA[X]
CALL[], 20, 13, 0, 31, 11, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="Icircumflex">
/* VTTTalk Unicode 0xce */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 79, 0, 0
OFFSET[R], 935, -11, 0
SVTCA[Y]
CALL[], 12, 5, 1, 1, 32, 86
SHC[2], 1
SVTCA[X]
CALL[], 13, 16, 0, 31, 11, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="Idieresis">
/* VTTTalk Unicode 0xcf */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 79, 0, 0
OFFSET[R], 941, -12, 0
SVTCA[Y]
CALL[], 12, 5, 1, 1, 65, 86
SHC[2], 1
SHC[2], 2
SVTCA[X]
CALL[], 15, 33, 0, 31, 11, 87
SHC[2], 1
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="Idotaccent">
/* VTTTalk Unicode 0x130 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 79, 0, 0
OFFSET[R], 918, -17, 140
SVTCA[Y]
CALL[], 12, 5, 1, 1, 70, 86
SHC[2], 1
SVTCA[X]
CALL[], 15, 22, 0, 31, 11, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="Igrave">
/* VTTTalk Unicode 0xcc */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 79, 0, 0
OFFSET[R], 943, -75, 0
SVTCA[Y]
CALL[], 12, 5, 1, 1, 37, 86
SHC[2], 1
SVTCA[X]
CALL[], 13, 15, 0, 25, 11, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="Imacron">
/* VTTTalk Unicode 0x12a */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 79, 0, 0
OFFSET[R], 927, -11, 166
SVTCA[Y]
CALL[], 12, 5, 1, 1, 108, 86
SHC[2], 1
SVTCA[X]
CALL[], 12, 15, 0, 31, 11, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="Iogonek">
/* VTTTalk Unicode 0x12e */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 79, 0, 0
OFFSET[R], 912, 104, 0
SVTCA[Y]
CALL[], 22, 0, 0, 0, 17, 86
SHC[2], 1
SVTCA[X]
CALL[], 17, 23, 0, 49, 11, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="Itilde">
/* VTTTalk Unicode 0x128 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 79, 0, 0
OFFSET[R], 901, -21, 166
SVTCA[Y]
CALL[], 16, 5, 1, 1, 117, 86
SHC[2], 1
SVTCA[X]
CALL[], 25, 13, 0, 33, 11, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="J">
/* TT glyph 94, char 0x4a (J) */
/* VTT 6.35 compiler Sun Apr 27 04:23:12 2025 */
SVTCA[Y]
CALL[], 0, 9, 114
CALL[], 14, 2, 114
CALL[], 14, 13, 106
SHP[2], 17
CALL[], 0, 7, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Jcircumflex">
/* VTTTalk Unicode 0x134 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 94, 0, 0
OFFSET[R], 935, 80, 0
SVTCA[Y]
CALL[], 23, 14, 1, 1, 32, 86
SHC[2], 1
SVTCA[X]
CALL[], 24, 27, 3, 44, 16, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="K">
/* TT glyph 96, char 0x4b (K) */
/* VTT 6.35 compiler Sun Apr 27 04:23:12 2025 */
SVTCA[Y]
CALL[], 4, 8, 114
CALL[], 5, 2, 114
SHP[2], 8
SHP[2], 14
SRP1[], 4
SHP[1], 16
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="L">
/* TT glyph 99, char 0x4c (L) */
/* VTT 6.35 compiler Sun Apr 27 04:23:12 2025 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 1, 2, 114
CALL[], 0, 3, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Lacute">
/* VTTTalk Unicode 0x139 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 99, 0, 0
OFFSET[R], 944, -69, 0
SVTCA[Y]
CALL[], 6, 1, 1, 1, 37, 86
SHC[2], 1
SVTCA[X]
CALL[], 7, 9, 0, 23, 5, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="Lcaron">
/* TT glyph 102, char 0x13d */
/* VTT 6.35 compiler Sun Apr 27 04:23:12 2025 */
SVTCA[Y]
CALL[], 18, 8, 114
CALL[], 11, 3, 114
CALL[], 19, 2, 114
CALL[], 18, 21, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="Ldot">
/* VTTTalk Unicode 0x13f */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 99, 0, 0
OFFSET[R], 547, 60, 0
SVTCA[Y]
CALL[], 14, 1, 2, 0, -235, 86
SHC[2], 1
SVTCA[X]
CALL[], 10, 18, 0, 40, 5, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="Lslash">
/* TT glyph 108, char 0x141 */
/* VTT 6.35 compiler Sun Apr 27 04:23:12 2025 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 5, 2, 114
CALL[], 0, 20, 106
SRP1[], 5
SHP[1], 9
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="M">
/* TT glyph 109, char 0x4d (M) */
/* VTT 6.35 compiler Sun Apr 27 04:23:12 2025 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 2, 2, 114
SHP[2], 5
SRP1[], 0
SHP[1], 7
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="N">
/* TT glyph 111, char 0x4e (N) */
/* VTT 6.35 compiler Sun Apr 27 04:23:12 2025 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 2, 2, 114
SHP[2], 5
SRP1[], 0
SHP[1], 7
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="NULL">
/* TT glyph 963, char 0x0 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */

    </glyphProgram>

    <glyphProgram name="Nacute">
/* VTTTalk Unicode 0x143 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 111, 0, 0
OFFSET[R], 944, -19, 0
SVTCA[Y]
CALL[], 10, 1, 1, 1, 37, 86
SHC[2], 1
SVTCA[X]
CALL[], 11, 13, 0, 32, 6, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="Ncaron">
/* TT glyph 113, char 0x147 */
/* VTT 6.35 compiler Sun Apr 27 04:23:12 2025 */
SVTCA[Y]
CALL[], 0, 8, 114
MDAP[R], 10
CALL[], 2, 2, 114
SRP1[], 0
SHP[1], 7
SRP1[], 10
SHP[1], 15
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Ntilde">
/* VTTTalk Unicode 0xd1 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 111, 0, 0
OFFSET[R], 901, -6, 114
SVTCA[Y]
CALL[], 14, 4, 1, 1, 65, 86
SHC[2], 1
SVTCA[X]
CALL[], 23, 11, 0, 34, 6, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="O">
/* TT glyph 120, char 0x4f (O) */
/* VTT 6.35 compiler Sun Apr 27 04:23:12 2025 */
SVTCA[Y]
CALL[], 0, 9, 114
CALL[], 10, 3, 114
CALL[], 10, 29, 106
CALL[], 0, 20, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="OE">
/* TT glyph 154, char 0x152 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 9, 114
CALL[], 10, 3, 114
CALL[], 14, 2, 114
CALL[], 25, 8, 114
CALL[], 14, 17, 106
SHP[2], 36
SRP1[], 10
SRP2[], 0
IP[], 21
MDAP[R], 21
CALL[], 21, 18, 106
CALL[], 25, 22, 106
SHP[2], 29
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="Oacute">
/* VTTTalk Unicode 0xd3 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 120, 0, 0
OFFSET[R], 944, -19, 0
SVTCA[Y]
CALL[], 38, 10, 1, 1, 33, 86
SHC[2], 2
SVTCA[X]
CALL[], 39, 41, 5, 32, 15, 87
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="Obreve">
/* VTTTalk Unicode 0x14e */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 120, 0, 0
OFFSET[R], 899, -8, 133
SVTCA[Y]
CALL[], 43, 10, 1, 1, 44, 86
SHC[2], 2
SVTCA[X]
CALL[], 46, 39, 5, 32, 15, 87
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="Ocircumflex">
/* VTTTalk Unicode 0xd4 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 120, 0, 0
OFFSET[R], 935, 0, 0
SVTCA[Y]
CALL[], 38, 10, 1, 1, 28, 86
SHC[2], 2
SVTCA[X]
CALL[], 39, 42, 5, 32, 15, 87
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="Odieresis">
/* VTTTalk Unicode 0xd6 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 120, 0, 0
OFFSET[R], 941, -1, 0
SVTCA[Y]
CALL[], 38, 10, 1, 1, 61, 86
SHC[2], 2
SHC[2], 3
SVTCA[X]
CALL[], 41, 59, 5, 32, 15, 87
SHC[2], 2
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="Ograve">
/* VTTTalk Unicode 0xd2 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 120, 0, 0
OFFSET[R], 943, -64, 0
SVTCA[Y]
CALL[], 38, 10, 1, 1, 33, 86
SHC[2], 2
SVTCA[X]
CALL[], 39, 41, 5, 28, 15, 87
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="Ohorn">
/* VTTTalk Unicode 0x1a0 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 120, 0, 0
OFFSET[R], 940, -29, -39
SVTCA[Y]
CALL[], 43, 10, 0, 0, 51, 86
SHC[2], 2
SVTCA[X]
CALL[], 43, 44, 5, 59, 15, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="Ohungarumlaut">
/* VTTTalk Unicode 0x150 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 120, 0, 0
OFFSET[R], 945, -40, 0
SVTCA[Y]
CALL[], 38, 10, 1, 1, 18, 86
SHC[2], 2
SHC[2], 3
SVTCA[X]
CALL[], 43, 41, 5, 32, 15, 87
SHC[2], 2
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="Omacron">
/* VTTTalk Unicode 0x14c */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 120, 0, 0
OFFSET[R], 927, 0, 166
SVTCA[Y]
CALL[], 38, 10, 1, 1, 104, 86
SHC[2], 2
SVTCA[X]
CALL[], 38, 41, 5, 32, 15, 87
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="Oslash">
/* TT glyph 148, char 0xd8 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 4, 9, 114
MDAP[R], 2
CALL[], 14, 3, 114
CALL[], 14, 33, 106
CALL[], 4, 24, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Oslashacute">
/* VTTTalk Unicode 0x1fe */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 148, 0, 0
OFFSET[R], 944, -19, 0
SVTCA[Y]
CALL[], 42, 14, 1, 1, 33, 86
SHC[2], 3
SVTCA[X]
CALL[], 43, 45, 9, 32, 19, 87
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="Otilde">
/* VTTTalk Unicode 0xd5 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 120, 0, 0
OFFSET[R], 901, -6, 114
SVTCA[Y]
CALL[], 42, 10, 1, 1, 61, 86
SHC[2], 2
SVTCA[X]
CALL[], 51, 39, 5, 33, 15, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="P">
/* TT glyph 155, char 0x50 (P) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 1, 2, 114
CALL[], 1, 25, 106
SRP2[], 0
IP[], 12
MDAP[R], 12
CALL[], 12, 14, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="Q">
/* TT glyph 157, char 0x51 (Q) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
CALL[], 15, 3, 114
CALL[], 15, 42, 106
CALL[], 0, 29, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="R">
/* TT glyph 158, char 0x52 (R) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 1, 2, 114
CALL[], 1, 26, 106
SRP2[], 0
IP[], 14
MDAP[R], 14
CALL[], 14, 16, 106
SRP1[], 0
SHP[1], 12
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Racute">
/* VTTTalk Unicode 0x154 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 158, 0, 0
OFFSET[R], 944, -19, 0
SVTCA[Y]
CALL[], 27, 1, 1, 1, 37, 86
SHC[2], 2
SVTCA[X]
CALL[], 28, 30, 0, 32, 6, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="Rcaron">
/* TT glyph 160, char 0x158 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 8, 114
MDAP[R], 27
CALL[], 1, 2, 114
CALL[], 1, 26, 106
SRP1[], 27
SRP2[], 0
IP[], 14
MDAP[R], 14
CALL[], 14, 16, 106
SRP1[], 0
SHP[1], 12
SRP1[], 27
SHP[1], 32
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="S">
/* TT glyph 166, char 0x53 (S) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 9, 114
CALL[], 27, 3, 114
CALL[], 27, 35, 106
CALL[], 0, 7, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Sacute">
/* VTTTalk Unicode 0x15a */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 166, 0, 0
OFFSET[R], 944, -8, 0
SVTCA[Y]
CALL[], 55, 27, 1, 1, 29, 86
SHC[2], 1
SVTCA[X]
CALL[], 56, 58, 23, 32, 51, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="Scaron">
/* TT glyph 169, char 0x160 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 9, 114
MDAP[R], 55
CALL[], 27, 3, 114
CALL[], 27, 35, 106
CALL[], 0, 7, 106
SRP1[], 55
SHP[1], 60
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="Scedilla">
/* VTTTalk Unicode 0x15e */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 166, 0, 0
OFFSET[R], 928, -24, 0
SVTCA[Y]
CALL[], 71, 0, 0, 0, 10, 86
SHC[2], 1
SVTCA[X]
CALL[], 58, 77, 23, 30, 51, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="Scircumflex">
/* VTTTalk Unicode 0x15c */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 166, 0, 0
OFFSET[R], 935, 11, 0
SVTCA[Y]
CALL[], 55, 27, 1, 1, 24, 86
SHC[2], 1
SVTCA[X]
CALL[], 56, 59, 23, 32, 51, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="T">
/* TT glyph 179, char 0x54 (T) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 3, 2, 114
CALL[], 3, 2, 106
SHP[2], 6
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="Tbar">
/* TT glyph 180, char 0x166 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 3, 2, 114
CALL[], 3, 2, 106
SHP[2], 6
SRP2[], 0
IP[], 8
MDAP[R], 8
CALL[], 8, 9, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="Tcaron">
/* TT glyph 181, char 0x164 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 8, 114
MDAP[R], 8
CALL[], 3, 2, 114
CALL[], 3, 2, 106
SHP[2], 6
SRP1[], 8
SHP[1], 13
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Thorn">
/* TT glyph 156, char 0xde */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 1, 2, 114
SRP1[], 0
IP[], 9
MDAP[R], 9
CALL[], 9, 31, 106
SRP1[], 1
SRP2[], 0
IP[], 19
MDAP[R], 19
CALL[], 19, 21, 106
SRP1[], 1
SHP[1], 5
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="U">
/* TT glyph 186, char 0x55 (U) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 9, 114
CALL[], 5, 2, 114
CALL[], 0, 10, 106
SRP1[], 5
SHP[1], 16
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="U.i">
/* TT glyph 231, char 0xffff */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 5
CALL[], 0, 10, 106
SRP1[], 5
SHP[1], 16
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="Uacute">
/* VTTTalk Unicode 0xda */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 186, 0, 0
OFFSET[R], 944, -19, 0
SVTCA[Y]
CALL[], 21, 5, 1, 1, 37, 86
SHC[2], 1
SVTCA[X]
CALL[], 22, 24, 4, 32, 17, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="Ubreve">
/* VTTTalk Unicode 0x16c */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 186, 0, 0
OFFSET[R], 899, -8, 133
SVTCA[Y]
CALL[], 26, 15, 1, 1, 48, 86
SHC[2], 1
SVTCA[X]
CALL[], 29, 22, 4, 32, 17, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="Ucircumflex">
/* VTTTalk Unicode 0xdb */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 186, 0, 0
OFFSET[R], 935, 0, 0
SVTCA[Y]
CALL[], 21, 5, 1, 1, 32, 86
SHC[2], 1
SVTCA[X]
CALL[], 22, 25, 4, 32, 17, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="Udieresis">
/* VTTTalk Unicode 0xdc */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 186, 0, 0
OFFSET[R], 941, -1, 0
SVTCA[Y]
CALL[], 21, 5, 1, 1, 65, 86
SHC[2], 1
SHC[2], 2
SVTCA[X]
CALL[], 24, 42, 4, 32, 17, 87
SHC[2], 1
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="Ugrave">
/* VTTTalk Unicode 0xd9 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 186, 0, 0
OFFSET[R], 943, -64, 0
SVTCA[Y]
CALL[], 21, 15, 1, 1, 37, 86
SHC[2], 1
SVTCA[X]
CALL[], 22, 24, 4, 27, 17, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="Uhorn">
/* TT glyph 195, char 0x1af */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 9, 114
MDAP[R], 26
CALL[], 5, 2, 114
SHP[2], 15
CALL[], 15, 21, 106
CALL[], 0, 10, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Uhungarumlaut">
/* VTTTalk Unicode 0x170 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 186, 0, 0
OFFSET[R], 945, -40, 0
SVTCA[Y]
CALL[], 21, 15, 1, 1, 22, 86
SHC[2], 1
SHC[2], 2
SVTCA[X]
CALL[], 26, 24, 4, 32, 17, 87
SHC[2], 1
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="Umacron">
/* VTTTalk Unicode 0x16a */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 186, 0, 0
OFFSET[R], 927, 0, 166
SVTCA[Y]
CALL[], 21, 5, 1, 1, 108, 86
SHC[2], 1
SVTCA[X]
CALL[], 21, 24, 4, 32, 17, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="Uogonek">
/* VTTTalk Unicode 0x172 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 186, 0, 0
OFFSET[R], 912, 53, 10
SVTCA[Y]
CALL[], 31, 0, 0, 0, 38, 86
SHC[2], 1
SVTCA[X]
CALL[], 26, 32, 4, 36, 17, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="Uring">
/* VTTTalk Unicode 0x16e */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 186, 0, 0
OFFSET[R], 948, -1, 0
SVTCA[Y]
CALL[], 21, 15, 1, 0, -4, 86
SHC[2], 1
SHC[2], 2
SVTCA[X]
CALL[], 25, 33, 4, 32, 17, 87
SHC[2], 1
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="Utilde">
/* VTTTalk Unicode 0x168 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 186, 0, 0
OFFSET[R], 901, -6, 114
SVTCA[Y]
CALL[], 25, 15, 1, 1, 65, 86
SHC[2], 1
SVTCA[X]
CALL[], 34, 22, 4, 33, 17, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="V">
/* TT glyph 209, char 0x56 (V) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 5, 2, 114
SHP[2], 2
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="W">
/* TT glyph 210, char 0x57 (W) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 1, 2, 114
SHP[2], 8
SRP1[], 0
SHP[1], 10
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Wacute">
/* VTTTalk Unicode 0x1e82 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 210, 0, 0
OFFSET[R], 944, -9, 0
SVTCA[Y]
CALL[], 13, 1, 1, 1, 37, 86
SHC[2], 1
SVTCA[X]
CALL[], 14, 16, 1, 33, 8, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="Wcircumflex">
/* VTTTalk Unicode 0x174 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 210, 0, 0
OFFSET[R], 935, 10, 0
SVTCA[Y]
CALL[], 13, 1, 1, 1, 32, 86
SHC[2], 1
SVTCA[X]
CALL[], 14, 17, 1, 33, 8, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="Wdieresis">
/* VTTTalk Unicode 0x1e84 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 210, 0, 0
OFFSET[R], 941, 9, 0
SVTCA[Y]
CALL[], 13, 1, 1, 1, 65, 86
SHC[2], 1
SHC[2], 2
SVTCA[X]
CALL[], 16, 34, 1, 33, 8, 87
SHC[2], 1
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="Wgrave">
/* VTTTalk Unicode 0x1e80 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 210, 0, 0
OFFSET[R], 943, -54, 0
SVTCA[Y]
CALL[], 13, 7, 1, 1, 37, 86
SHC[2], 1
SVTCA[X]
CALL[], 14, 16, 1, 29, 8, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="X">
/* TT glyph 215, char 0x58 (X) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 2, 2, 114
SHP[2], 6
SRP1[], 0
SHP[1], 9
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="Y">
/* TT glyph 216, char 0x59 (Y) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 8, 8, 114
CALL[], 2, 2, 114
SHP[2], 6
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="Yacute">
/* VTTTalk Unicode 0xdd */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 216, 0, 0
OFFSET[R], 944, -19, 0
SVTCA[Y]
CALL[], 9, 2, 1, 1, 37, 86
SHC[2], 1
SVTCA[X]
CALL[], 10, 12, 2, 32, 6, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="Ycircumflex">
/* VTTTalk Unicode 0x176 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 216, 0, 0
OFFSET[R], 935, 0, 0
SVTCA[Y]
CALL[], 9, 2, 1, 1, 32, 86
SHC[2], 1
SVTCA[X]
CALL[], 10, 13, 2, 32, 6, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="Ydieresis">
/* VTTTalk Unicode 0x178 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 216, 0, 0
OFFSET[R], 941, -1, 0
SVTCA[Y]
CALL[], 9, 2, 1, 1, 65, 86
SHC[2], 1
SHC[2], 2
SVTCA[X]
CALL[], 12, 30, 2, 32, 6, 87
SHC[2], 1
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="Ygrave">
/* VTTTalk Unicode 0x1ef2 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 216, 0, 0
OFFSET[R], 943, -64, 0
SVTCA[Y]
CALL[], 9, 5, 1, 1, 37, 86
SHC[2], 1
SVTCA[X]
CALL[], 10, 12, 2, 28, 6, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="Z">
/* TT glyph 226, char 0x5a (Z) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 4, 2, 114
CALL[], 4, 3, 106
CALL[], 0, 7, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="Zacute">
/* VTTTalk Unicode 0x179 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 226, 0, 0
OFFSET[R], 944, -9, 0
SVTCA[Y]
CALL[], 10, 4, 1, 1, 37, 86
SHC[2], 1
SVTCA[X]
CALL[], 11, 13, 0, 33, 9, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="Zcaron">
/* TT glyph 228, char 0x17d */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 8, 114
MDAP[R], 10
CALL[], 4, 2, 114
CALL[], 4, 3, 106
CALL[], 0, 7, 106
SRP1[], 10
SHP[1], 15
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Zdotaccent">
/* VTTTalk Unicode 0x17b */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 226, 0, 0
OFFSET[R], 918, 4, 140
SVTCA[Y]
CALL[], 10, 4, 1, 1, 70, 86
SHC[2], 1
SVTCA[X]
CALL[], 13, 20, 0, 32, 9, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="a">
/* TT glyph 232, char 0x61 (a) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 11, 114
CALL[], 47, 7, 114
CALL[], 53, 10, 114
CALL[], 47, 39, 106
SRP2[], 0
IP[], 18
MDAP[R], 18
CALL[], 18, 8, 106
CALL[], 0, 28, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="aacute">
/* VTTTalk Unicode 0xe1 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 232, 0, 0
OFFSET[R], 920, -11, -15
SVTCA[Y]
CALL[], 60, 47, 1, 1, 40, 86
SHC[2], 1
SVTCA[X]
CALL[], 61, 63, 4, 36, 53, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="abreve">
/* VTTTalk Unicode 0x103 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 232, 0, 0
OFFSET[R], 899, -8, 0
SVTCA[Y]
CALL[], 65, 47, 1, 1, 71, 86
SHC[2], 1
SVTCA[X]
CALL[], 68, 61, 4, 32, 53, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="acircumflex">
/* VTTTalk Unicode 0xe2 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 232, 0, 0
OFFSET[R], 897, 0, 0
SVTCA[Y]
CALL[], 60, 47, 1, 1, 44, 86
SHC[2], 1
SVTCA[X]
CALL[], 61, 64, 4, 32, 53, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="acute">
/* TT glyph 920, char 0xb4 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 2
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="acute.case">
/* TT glyph 944, char 0xffff */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 2
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="acutecomb">
/* VTTTalk Unicode 0x301 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

OFFSET[R], 920, 0, -15


    </glyphProgram>

    <glyphProgram name="acutecomb.case">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

OFFSET[R], 944, 0, 0

    </glyphProgram>

    <glyphProgram name="adieresis">
/* VTTTalk Unicode 0xe4 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 232, 0, 0
OFFSET[R], 917, -1, 0
SVTCA[Y]
CALL[], 60, 47, 1, 1, 97, 86
SHC[2], 1
SHC[2], 2
SVTCA[X]
CALL[], 63, 81, 4, 33, 53, 87
SHC[2], 1
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="ae">
/* TT glyph 257, char 0xe6 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 11, 114
CALL[], 21, 7, 114
CALL[], 21, 14, 106
SHP[1], 29
CALL[], 29, 74, 106
SRP1[], 21
SRP2[], 0
IP[], 35
MDAP[R], 35
CALL[], 35, 69, 106
SHP[1], 61
SRP1[], 0
SHP[1], 49
CALL[], 49, 41, 106
CALL[], 0, 57, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="aeacute">
/* VTTTalk Unicode 0x1fd */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 257, 0, 0
OFFSET[R], 920, 0, -15
SVTCA[Y]
CALL[], 79, 21, 1, 1, 40, 86
SHC[2], 3
SVTCA[X]
CALL[], 80, 82, 4, 37, 34, 87
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="agrave">
/* VTTTalk Unicode 0xe0 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 232, 0, 0
OFFSET[R], 919, -11, 0
SVTCA[Y]
CALL[], 60, 47, 1, 1, 40, 86
SHC[2], 1
SVTCA[X]
CALL[], 61, 63, 4, 26, 53, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="amacron">
/* VTTTalk Unicode 0x101 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 232, 0, 0
OFFSET[R], 927, 0, 0
SVTCA[Y]
CALL[], 60, 47, 1, 1, 98, 86
SHC[2], 1
SVTCA[X]
CALL[], 60, 63, 4, 32, 53, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="ampersand">
/* TT glyph 847, char 0x26 (&amp;) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 5, 19, 114
CALL[], 22, 16, 114
CALL[], 22, 70, 106
CALL[], 5, 47, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="aogonek">
/* VTTTalk Unicode 0x105 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 232, 0, 0
OFFSET[R], 929, 0, 0
SVTCA[Y]
CALL[], 70, 54, 0, 0, 17, 86
SHC[2], 1
SVTCA[X]
CALL[], 65, 71, 4, 45, 53, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="approxequal">
/* VTTTalk Unicode 0x2248 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 633, 0, 90
USEMYMETRICS[]
OFFSET[R], 633, 0, -80

    </glyphProgram>

    <glyphProgram name="aring">
/* VTTTalk Unicode 0xe5 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 232, 0, 0
OFFSET[R], 925, -7, 0
SVTCA[Y]
CALL[], 60, 47, 1, 1, 50, 86
SHC[2], 1
SHC[2], 2
SVTCA[X]
CALL[], 64, 72, 4, 32, 53, 87
SHC[2], 1
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="aringacute">
/* VTTTalk Unicode 0x1fb */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 232, 0, 0
OFFSET[R], 925, -7, 0
OFFSET[R], 920, -11, 221
SVTCA[Y]
CALL[], 60, 47, 1, 1, 50, 86
SHC[2], 1
SHC[2], 2
CALL[], 90, 68, 1, 1, 50, 86
SHC[2], 3
SVTCA[X]
CALL[], 64, 72, 4, 32, 53, 87
SHC[2], 1
SHC[2], 2
CALL[], 91, 93, 64, 41, 72, 87
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="arrowboth">
/* TT glyph 659, char 0x2194 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 3
MDAP[R], 0
SRP1[], 3
IP[], 6
MDAP[R], 6
CALL[], 6, 13, 106
SRP1[], 0
SHP[1], 11
SRP1[], 3
SHP[1], 8
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="arrowdown">
/* TT glyph 655, char 0x2193 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 5
MDAP[R], 0
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="arrowleft">
/* TT glyph 657, char 0x2190 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 4
MDAP[R], 7
SRP2[], 4
IP[], 2
MDAP[R], 2
CALL[], 2, 9, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="arrowright">
/* TT glyph 653, char 0x2192 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 6
MDAP[R], 3
SRP2[], 6
IP[], 9
MDAP[R], 9
CALL[], 9, 0, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="arrowup">
/* TT glyph 651, char 0x2191 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 9, 18, 114
MDAP[R], 4
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="arrowupdn">
/* TT glyph 660, char 0x2195 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 1
MDAP[R], 9
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="asciicircum">
/* TT glyph 635, char 0x5e (^) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
CALL[], 2, 16, 114
SRP1[], 0
SHP[1], 5
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="asciicircum.ss01">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

OFFSET[R], 635, 2, 30


    </glyphProgram>

    <glyphProgram name="asciitilde">
/* TT glyph 633, char 0x7e (~) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 13
IP[], 5
MDAP[R], 5
CALL[], 0, 19, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="asciitilde.ss01">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 633, 0, 200


    </glyphProgram>

    <glyphProgram name="asterisk">
/* TT glyph 549, char 0x2a (*) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 6
SHP[2], 13
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="asterisk.ss01">
/* TT glyph 555, char 0xffff */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 6
SHP[2], 13
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="asteriskmath">
/* TT glyph 616, char 0x2217 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 6
SHP[2], 13
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="at">
/* TT glyph 846, char 0x40 (@) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 19, 114
CALL[], 11, 17, 114
CALL[], 11, 36, 106
SRP2[], 0
IP[], 22
MDAP[R], 22
CALL[], 22, 54, 106
CALL[], 0, 47, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="atilde">
/* VTTTalk Unicode 0xe3 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 232, 0, 0
OFFSET[R], 901, -10, 0
SVTCA[Y]
CALL[], 64, 47, 1, 1, 107, 86
SHC[2], 1
SVTCA[X]
CALL[], 73, 61, 4, 33, 53, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="b">
/* TT glyph 259, char 0x62 (b) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 11, 114
CALL[], 7, 0, 114
CALL[], 6, 10, 114
CALL[], 14, 7, 114
CALL[], 14, 34, 106
CALL[], 0, 24, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="backslash">
/* TT glyph 553, char 0x5c (\) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 3, 19, 114
CALL[], 1, 17, 114
SHP[2], 2
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="bar">
/* TT glyph 856, char 0x7c (|) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="block">
/* TT glyph 676, char 0x2588 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="braceleft">
/* TT glyph 558, char 0x7b ({) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 22
CALL[], 22, 25, 106
SRP2[], 0
IP[], 10
MDAP[R], 10
CALL[], 10, 11, 106
CALL[], 0, 43, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="braceright">
/* TT glyph 559, char 0x7d (}) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 1
MDAP[R], 23
CALL[], 23, 22, 106
SRP2[], 1
IP[], 37
MDAP[R], 37
CALL[], 37, 34, 106
CALL[], 1, 2, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="bracketleft">
/* TT glyph 560, char 0x5b ([) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
CALL[], 1, 4, 106
CALL[], 0, 5, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="bracketright">
/* TT glyph 561, char 0x5d (]) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 1
MDAP[R], 6
CALL[], 6, 5, 106
CALL[], 1, 2, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="breve">
/* TT glyph 924, char 0x2d8 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 4
CALL[], 0, 7, 106
SRP1[], 4
SHP[1], 10
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="breve.case">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

OFFSET[R], 899, -4, 123


    </glyphProgram>

    <glyphProgram name="brokenbar">
/* TT glyph 857, char 0xa6 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 4
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="bullet">
/* TT glyph 548, char 0x2022 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 8
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="c">
/* TT glyph 261, char 0x63 (c) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 11, 114
CALL[], 10, 7, 114
CALL[], 10, 18, 106
CALL[], 0, 28, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="cacute">
/* VTTTalk Unicode 0x107 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 261, 0, 0
OFFSET[R], 920, 25, -15
SVTCA[Y]
CALL[], 36, 10, 1, 1, 41, 86
SHC[2], 1
SVTCA[X]
CALL[], 37, 39, 5, 41, 13, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="caron">
/* TT glyph 923, char 0x2c7 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 2
SHP[1], 4
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="caron.case">
/* TT glyph 946, char 0xffff */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 2
MDAP[R], 0
SHP[2], 5
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="ccaron">
/* VTTTalk Unicode 0x10d */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 261, 0, 0
OFFSET[R], 898, 30, 0
SVTCA[Y]
CALL[], 41, 10, 1, 1, 48, 86
SHC[2], 1
SVTCA[X]
CALL[], 42, 39, 5, 37, 13, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="ccedilla">
/* VTTTalk Unicode 0xe7 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 261, 0, 0
OFFSET[R], 928, 15, 0
SVTCA[Y]
CALL[], 52, 0, 0, 0, 11, 86
SHC[2], 1
SVTCA[X]
CALL[], 39, 58, 5, 38, 13, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="ccircumflex">
/* VTTTalk Unicode 0x109 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 261, 0, 0
OFFSET[R], 897, 36, 0
SVTCA[Y]
CALL[], 36, 10, 1, 1, 45, 86
SHC[2], 1
SVTCA[X]
CALL[], 37, 40, 5, 37, 13, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="cdotaccent">
/* VTTTalk Unicode 0x10b */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 261, 0, 0
OFFSET[R], 918, 31, 0
SVTCA[Y]
CALL[], 36, 10, 1, 1, 87, 86
SHC[2], 1
SVTCA[X]
CALL[], 39, 46, 5, 37, 13, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="cedilla">
/* TT glyph 928, char 0xb8 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 16
CALL[], 16, 15, 106
CALL[], 0, 7, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="cent">
/* TT glyph 595, char 0xa2 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
CALL[], 3, 4, 114
SRP1[], 0
IP[], 4
MDAP[R], 4
CALL[], 4, 32, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="circle">
/* TT glyph 702, char 0x25cb */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 10
CALL[], 10, 30, 106
CALL[], 0, 20, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="circleplus">
/* TT glyph 648, char 0x2295 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 10
CALL[], 10, 30, 106
SRP2[], 0
IP[], 42
MDAP[R], 42
CALL[], 42, 43, 106
SHP[1], 50
SHP[2], 47
CALL[], 0, 20, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="circumflex">
/* TT glyph 922, char 0x2c6 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 2
MDAP[R], 4
SRP1[], 2
SHP[1], 0
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="club">
/* TT glyph 838, char 0x2663 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 1
MDAP[R], 36
SHP[1], 43
SRP1[], 1
SHP[1], 48
SHP[1], 3
SHP[1], 47
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="colon">
/* TT glyph 540, char 0x3a (:) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 16, 19, 114
MDAP[R], 8
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="colonmonetary">
/* TT glyph 596, char 0x20a1 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
CALL[], 8, 13, 114
CALL[], 19, 5, 114
CALL[], 8, 36, 106
SRP1[], 1
SHP[1], 5
SRP1[], 0
SHP[1], 4
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="comma">
/* TT glyph 539, char 0x2c (,) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 13
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="copyright">
/* TT glyph 850, char 0xa9 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 40
MDAP[R], 50
CALL[], 50, 71, 106
SRP2[], 40
IP[], 10
MDAP[R], 10
CALL[], 10, 22, 106
SRP1[], 50
SRP2[], 40
IP[], 0
MDAP[R], 0
CALL[], 0, 32, 106
CALL[], 40, 61, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="currency">
/* TT glyph 597, char 0xa4 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 10
IP[], 14
MDAP[R], 14
CALL[], 14, 44, 106
SRP1[], 10
SRP2[], 0
IP[], 32
MDAP[R], 32
CALL[], 32, 36, 106
SRP1[], 10
SHP[1], 18
SRP1[], 0
SHP[1], 28
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="d">
/* TT glyph 268, char 0x64 (d) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 11, 114
CALL[], 17, 0, 114
CALL[], 11, 7, 114
CALL[], 22, 10, 114
CALL[], 11, 41, 106
CALL[], 0, 31, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="dagger">
/* TT glyph 858, char 0x2020 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 5
IP[], 3
MDAP[R], 3
CALL[], 3, 2, 106
SHP[2], 10
SHP[1], 7
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="daggerdbl">
/* TT glyph 860, char 0x2021 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 9
IP[], 7
MDAP[R], 7
CALL[], 7, 6, 106
SHP[2], 14
SHP[1], 11
SRP1[], 9
SRP2[], 0
IP[], 2
MDAP[R], 2
CALL[], 2, 3, 106
SHP[1], 18
SHP[2], 15
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="dcaron">
/* TT glyph 270, char 0x10f */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 11, 114
CALL[], 16, 0, 114
CALL[], 21, 10, 114
CALL[], 54, 7, 114
SRP1[], 16
SRP2[], 0
IP[], 10
MDAP[R], 10
CALL[], 10, 37, 106
CALL[], 0, 29, 106
SRP1[], 16
SHP[1], 47
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="dcroat">
/* VTTTalk Unicode 0x111 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 268, 0, 0
OFFSET[R], 915, 109, 234
SVTCA[Y]
CALL[], 51, 11, 1, 1, 51, 86
SHC[2], 2
SVTCA[X]
CALL[], 51, 54, 5, 52, 17, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="degree">
/* TT glyph 853, char 0xb0 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
CALL[], 9, 17, 114
CALL[], 9, 27, 106
CALL[], 0, 19, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="diamond">
/* TT glyph 840, char 0x2666 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 4
MDAP[R], 0
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="dieresis">
/* TT glyph 917, char 0xa8 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 6
SHP[1], 18
SHP[2], 12
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="dieresis.case">
/* TT glyph 941, char 0xffff */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 6
SHP[1], 18
SHP[2], 12
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="divide">
/* TT glyph 624, char 0xf7 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 16
MDAP[R], 10
SRP2[], 16
IP[], 0
MDAP[R], 0
CALL[], 0, 1, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="dkshade">
/* TT glyph 700, char 0x2593 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 27
IP[], 33
MDAP[R], 33
CALL[], 33, 166, 106
SHP[2], 162
SHP[2], 38
SHP[1], 25
SHP[1], 29
SRP1[], 27
SRP2[], 0
IP[], 167
MDAP[R], 167
CALL[], 167, 158, 106
SHP[2], 24
SHP[2], 154
SHP[1], 163
SHP[1], 39
SRP1[], 27
SRP2[], 0
IP[], 159
MDAP[R], 159
CALL[], 159, 150, 106
SHP[2], 146
SHP[2], 42
SHP[1], 21
SHP[1], 155
SRP1[], 27
SRP2[], 0
IP[], 151
MDAP[R], 151
CALL[], 151, 142, 106
SHP[2], 20
SHP[2], 138
SHP[1], 147
SHP[1], 43
SRP1[], 27
SRP2[], 0
IP[], 143
MDAP[R], 143
CALL[], 143, 134, 106
SHP[2], 130
SHP[2], 46
SHP[1], 17
SHP[1], 139
SRP1[], 27
SRP2[], 0
IP[], 135
MDAP[R], 135
CALL[], 135, 126, 106
SHP[2], 16
SHP[2], 122
SHP[1], 131
SHP[1], 47
SRP1[], 27
SRP2[], 0
IP[], 118
MDAP[R], 118
CALL[], 118, 127, 106
SHP[1], 114
SHP[1], 50
SHP[2], 13
SHP[2], 123
SRP1[], 27
SRP2[], 0
IP[], 110
MDAP[R], 110
CALL[], 110, 119, 106
SHP[1], 12
SHP[1], 106
SHP[2], 115
SHP[2], 51
SRP1[], 27
SRP2[], 0
IP[], 102
MDAP[R], 102
CALL[], 102, 111, 106
SHP[1], 98
SHP[1], 54
SHP[2], 9
SHP[2], 107
SRP1[], 27
SRP2[], 0
IP[], 94
MDAP[R], 94
CALL[], 94, 103, 106
SHP[1], 8
SHP[1], 90
SHP[2], 99
SHP[2], 55
SRP1[], 27
SRP2[], 0
IP[], 86
MDAP[R], 86
CALL[], 86, 95, 106
SHP[1], 82
SHP[1], 58
SHP[2], 5
SHP[2], 91
SRP1[], 27
SRP2[], 0
IP[], 78
MDAP[R], 78
CALL[], 78, 87, 106
SHP[1], 4
SHP[1], 74
SHP[2], 83
SHP[2], 59
SRP1[], 27
SRP2[], 0
IP[], 66
MDAP[R], 66
CALL[], 66, 79, 106
SHP[1], 70
SHP[1], 62
SHP[2], 1
SHP[2], 75
SRP1[], 27
SHP[1], 36
SHP[1], 32
SRP1[], 0
SHP[1], 68
SHP[1], 64
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="dnblock">
/* TT glyph 672, char 0x2584 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="dollar">
/* TT glyph 598, char 0x24 ($) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 24
SHP[1], 64
SHP[2], 56
SHP[1], 66
SHP[2], 65
SHP[1], 28
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="dong">
/* TT glyph 599, char 0x20ab */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 12, 114
MDAP[R], 19
IP[], 52
MDAP[R], 52
CALL[], 52, 51, 106
SRP1[], 19
SRP2[], 0
IP[], 14
MDAP[R], 14
CALL[], 14, 42, 106
SRP1[], 19
SRP2[], 0
IP[], 4
MDAP[R], 4
CALL[], 4, 33, 106
CALL[], 0, 1, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="dotaccent">
/* TT glyph 918, char 0x2d9 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 6
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="dotaccent.case">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

OFFSET[R], 918, 10, 140


    </glyphProgram>

    <glyphProgram name="dotbelowcomb">
/* VTTTalk Unicode 0x323 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

OFFSET[R], 918, -16, -700

    </glyphProgram>

    <glyphProgram name="dotlessi">
/* TT glyph 314, char 0x131 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 5, 6, 114
CALL[], 5, 4, 106
CALL[], 0, 1, 106
SHP[2], 7
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="e">
/* TT glyph 274, char 0x65 (e) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 11, 114
CALL[], 10, 7, 114
CALL[], 10, 40, 106
SRP2[], 0
IP[], 19
MDAP[R], 19
CALL[], 19, 34, 106
CALL[], 0, 24, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="eacute">
/* VTTTalk Unicode 0xe9 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 274, 0, 0
OFFSET[R], 920, -1, -15
SVTCA[Y]
CALL[], 45, 10, 1, 1, 39, 86
SHC[2], 2
SVTCA[X]
CALL[], 46, 48, 5, 38, 15, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="ebreve">
/* VTTTalk Unicode 0x115 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 274, 0, 0
OFFSET[R], 899, 2, 0
SVTCA[Y]
CALL[], 50, 10, 1, 1, 70, 86
SHC[2], 2
SVTCA[X]
CALL[], 53, 46, 5, 34, 15, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="ecaron">
/* VTTTalk Unicode 0x11b */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 274, 0, 0
OFFSET[R], 898, 4, 0
SVTCA[Y]
CALL[], 50, 10, 1, 1, 46, 86
SHC[2], 2
SVTCA[X]
CALL[], 51, 48, 5, 34, 15, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="ecircumflex">
/* VTTTalk Unicode 0xea */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 274, 0, 0
OFFSET[R], 897, 10, 0
SVTCA[Y]
CALL[], 45, 10, 1, 1, 43, 86
SHC[2], 2
SVTCA[X]
CALL[], 46, 49, 5, 34, 15, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="edieresis">
/* VTTTalk Unicode 0xeb */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 274, 0, 0
OFFSET[R], 917, 9, 0
SVTCA[Y]
CALL[], 45, 10, 1, 1, 96, 86
SHC[2], 2
SHC[2], 3
SVTCA[X]
CALL[], 48, 66, 5, 34, 15, 87
SHC[2], 2
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="edotaccent">
/* VTTTalk Unicode 0x117 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 274, 0, 0
OFFSET[R], 918, 5, 0
SVTCA[Y]
CALL[], 45, 10, 1, 1, 85, 86
SHC[2], 2
SVTCA[X]
CALL[], 48, 55, 5, 34, 15, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="egrave">
/* VTTTalk Unicode 0xe8 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 274, 0, 0
OFFSET[R], 919, -1, 0
SVTCA[Y]
CALL[], 45, 10, 1, 1, 39, 86
SHC[2], 2
SVTCA[X]
CALL[], 46, 48, 5, 28, 15, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="eight">
/* TT glyph 482, char 0x38 (8) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 13, 114
CALL[], 18, 5, 114
CALL[], 18, 64, 106
CALL[], 0, 36, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="eight.dnom">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 524, 0, -252

    </glyphProgram>

    <glyphProgram name="eight.numr">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 524, 0, 0


    </glyphProgram>

    <glyphProgram name="element">
/* TT glyph 619, char 0x2208 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 8
CALL[], 8, 11, 106
SRP2[], 0
IP[], 22
MDAP[R], 22
CALL[], 22, 23, 106
CALL[], 0, 19, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="ellipsis">
/* TT glyph 542, char 0x2026 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 19, 114
MDAP[R], 8
SHP[1], 24
SHP[2], 16
SHP[1], 40
SHP[2], 32
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="emacron">
/* VTTTalk Unicode 0x113 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 274, 0, 0
OFFSET[R], 927, 10, 0
SVTCA[Y]
CALL[], 45, 10, 1, 1, 97, 86
SHC[2], 2
SVTCA[X]
CALL[], 45, 48, 5, 34, 15, 87
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="emdash">
/* TT glyph 565, char 0x2014 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="emptyset">
/* TT glyph 637, char 0x2205 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 2
IP[], 14
MDAP[R], 14
CALL[], 14, 34, 106
SRP1[], 2
SRP2[], 0
IP[], 4
MDAP[R], 4
CALL[], 4, 24, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="endash">
/* TT glyph 564, char 0x2013 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="eng">
/* TT glyph 352, char 0x14b */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 15, 114
CALL[], 36, 7, 114
CALL[], 28, 10, 114
CALL[], 29, 6, 114
CALL[], 36, 20, 106
CALL[], 0, 10, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="eogonek">
/* VTTTalk Unicode 0x119 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 274, 0, 0
OFFSET[R], 929, -21, 15
SVTCA[Y]
CALL[], 55, 0, 0, 0, 42, 86
SHC[2], 2
SVTCA[X]
CALL[], 50, 56, 5, 41, 15, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="equal">
/* TT glyph 625, char 0x3d (=) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 4
MDAP[R], 1
CALL[], 1, 0, 106
CALL[], 4, 5, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="equal_equal_equal.dlig">
/* TT glyph 874, char 0xffff */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 8
MDAP[R], 1
CALL[], 1, 0, 106
SRP2[], 8
IP[], 4
MDAP[R], 4
CALL[], 4, 5, 106
CALL[], 8, 9, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="equal_greater.dlig">
/* TT glyph 875, char 0xffff */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 3
MDAP[R], 0
SRP1[], 3
IP[], 21
MDAP[R], 21
CALL[], 21, 20, 106
SRP1[], 0
SRP2[], 3
IP[], 16
MDAP[R], 16
CALL[], 16, 17, 106
SRP1[], 21
SHP[1], 7
SRP1[], 3
SHP[1], 10
SRP1[], 0
SHP[1], 11
SRP1[], 16
SHP[1], 13
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="estimated">
/* TT glyph 862, char 0x212e */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 19, 114
MDAP[R], 9
CALL[], 9, 30, 106
SRP2[], 0
IP[], 14
MDAP[R], 14
CALL[], 14, 34, 106
CALL[], 0, 18, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="eth">
/* TT glyph 269, char 0xf0 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 11, 114
CALL[], 26, 1, 114
CALL[], 10, 7, 114
CALL[], 10, 54, 106
CALL[], 0, 43, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="exclam">
/* TT glyph 543, char 0x21 (!) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 11, 19, 114
MDAP[R], 5
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="exclam_equal_equal.dlig">
/* TT glyph 585, char 0xffff */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 2
IP[], 5
MDAP[R], 5
CALL[], 5, 4, 106
SRP1[], 2
SRP2[], 0
IP[], 8
MDAP[R], 8
CALL[], 8, 9, 106
SRP1[], 2
SRP2[], 0
IP[], 12
MDAP[R], 12
CALL[], 12, 13, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="exclamdown">
/* TT glyph 544, char 0xa1 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 6
MDAP[R], 11
CALL[], 2, 18, 114
CALL[], 10, 19, 114
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="f">
/* TT glyph 300, char 0x66 (f) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 9, 1, 114
CALL[], 22, 6, 114
CALL[], 9, 17, 106
CALL[], 22, 25, 106
SHP[2], 2
SHP[1], 3
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="figuredash">
/* VTTTalk Unicode 0x2012 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 564, 0, 0


    </glyphProgram>

    <glyphProgram name="five">
/* TT glyph 479, char 0x35 (5) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 13, 114
CALL[], 25, 4, 114
CALL[], 25, 28, 106
SRP2[], 0
IP[], 33
MDAP[R], 33
CALL[], 33, 18, 106
CALL[], 0, 8, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="five.dnom">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 521, 0, -252

    </glyphProgram>

    <glyphProgram name="five.numr">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 521, 0, 0


    </glyphProgram>

    <glyphProgram name="florin">
/* TT glyph 601, char 0x192 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 15, 114
CALL[], 23, 1, 114
CALL[], 23, 35, 106
SRP2[], 0
IP[], 17
MDAP[R], 17
CALL[], 17, 16, 106
SHP[2], 43
SHP[1], 40
CALL[], 0, 9, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="four">
/* TT glyph 478, char 0x34 (4) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 10, 12, 114
CALL[], 4, 4, 114
SRP1[], 10
IP[], 9
MDAP[R], 9
CALL[], 9, 6, 106
SHP[1], 2
SHP[2], 11
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="four.dnom">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 520, 0, -252

    </glyphProgram>

    <glyphProgram name="four.numr">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 520, 0, 0


    </glyphProgram>

    <glyphProgram name="fraction">
/* TT glyph 526, char 0x2044 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 1, 19, 114
CALL[], 3, 17, 114
SHP[2], 2
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="franc">
/* VTTTalk Unicode 0x20a3 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 66, 0, 0
OFFSET[R], 915, -100, -140
SVTCA[Y]
CALL[], 10, 0, 2, 0, 146, 86
SHC[2], 1
SVTCA[X]
CALL[], 10, 13, 0, 14, 3, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="g">
/* TT glyph 301, char 0x67 (g) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 15, 114
CALL[], 92, 7, 114
SRP1[], 0
IP[], 64
MDAP[R], 64
CALL[], 64, 80, 106
CALL[], 92, 93, 106
SRP2[], 0
IP[], 72
MDAP[R], 72
CALL[], 72, 56, 106
CALL[], 0, 19, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="gbreve">
/* VTTTalk Unicode 0x11f */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 301, 0, 0
OFFSET[R], 924, 9, 0
SVTCA[Y]
CALL[], 96, 64, 1, 1, 50, 86
SHC[2], 4
SVTCA[X]
CALL[], 99, 107, 5, 35, 51, 87
SHC[2], 4


    </glyphProgram>

    <glyphProgram name="gcaron">
/* VTTTalk Unicode 0x1e7 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 301, 0, 0
OFFSET[R], 898, -30, 0
SVTCA[Y]
CALL[], 101, 64, 1, 1, 40, 86
SHC[2], 4
SVTCA[X]
CALL[], 102, 99, 5, 29, 51, 87
SHC[2], 4

    </glyphProgram>

    <glyphProgram name="gcircumflex">
/* VTTTalk Unicode 0x11d */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 301, 0, 0
OFFSET[R], 897, -24, 0
SVTCA[Y]
CALL[], 96, 64, 1, 1, 37, 86
SHC[2], 4
SVTCA[X]
CALL[], 97, 100, 5, 30, 51, 87
SHC[2], 4


    </glyphProgram>

    <glyphProgram name="gdotaccent">
/* VTTTalk Unicode 0x121 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 301, 0, 0
OFFSET[R], 918, -29, 0
SVTCA[Y]
CALL[], 96, 64, 1, 1, 79, 86
SHC[2], 4
SVTCA[X]
CALL[], 99, 106, 5, 29, 51, 87
SHC[2], 4


    </glyphProgram>

    <glyphProgram name="germandbls">
/* TT glyph 414, char 0xdf */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 11, 114
CALL[], 42, 1, 114
CALL[], 37, 10, 114
CALL[], 42, 31, 106
SRP2[], 0
IP[], 18
MDAP[R], 18
CALL[], 18, 19, 106
CALL[], 0, 7, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="grave">
/* TT glyph 919, char 0x60 (`) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 2
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="grave.case">
/* TT glyph 943, char 0xffff */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 2
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="gravecomb">
/* VTTTalk Unicode 0x300 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

OFFSET[R], 919, 0, 0


    </glyphProgram>

    <glyphProgram name="gravecomb.case">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

OFFSET[R], 943, -50, 0

    </glyphProgram>

    <glyphProgram name="greater">
/* TT glyph 627, char 0x3e (&gt;) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 4
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="greater_equal.dlig">
/* TT glyph 876, char 0xffff */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 7
MDAP[R], 4
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="greaterequal">
/* TT glyph 629, char 0x2265 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 8
MDAP[R], 4
CALL[], 8, 9, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="guillemotleft">
/* TT glyph 576, char 0xab */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 3
SHP[1], 10
SHP[2], 7
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="guillemotright">
/* TT glyph 577, char 0xbb */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 4
SHP[1], 11
SHP[2], 7
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="guilsinglleft">
/* TT glyph 578, char 0x2039 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 3
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="guilsinglright">
/* TT glyph 579, char 0x203a */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 4
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="h">
/* TT glyph 308, char 0x68 (h) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 1, 0, 114
CALL[], 7, 7, 114
CALL[], 7, 18, 106
SRP1[], 0
SHP[1], 13
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="hbar">
/* VTTTalk Unicode 0x127 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 308, 0, 0
OFFSET[R], 915, -121, 234
SVTCA[Y]
CALL[], 26, 7, 1, 0, 52, 86
SHC[2], 1
SVTCA[X]
CALL[], 26, 29, 0, 11, 12, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="hcircumflex">
/* VTTTalk Unicode 0x125 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 308, 0, 0
OFFSET[R], 935, -132, 42
SVTCA[Y]
CALL[], 26, 1, 1, 1, 32, 86
SHC[2], 1
SVTCA[X]
CALL[], 27, 30, 0, 8, 12, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="heart">
/* TT glyph 839, char 0x2665 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 13, 18, 114
MDAP[R], 0
SHP[1], 25
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="hookabovecomb">
/* TT glyph 903, char 0x309 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 7
MDAP[R], 24
CALL[], 24, 17, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="house">
/* TT glyph 865, char 0x2302 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 2
MDAP[R], 4
CALL[], 2, 6, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="hungarumlaut">
/* TT glyph 921, char 0x2dd */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 2
SHP[1], 6
SHP[2], 4
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="hungarumlaut.case">
/* TT glyph 945, char 0xffff */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 2
SHP[1], 6
SHP[2], 4
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="hyphen">
/* TT glyph 562, char 0x2d (-) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="hyphen_greater.dlig">
/* TT glyph 584, char 0xffff */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 4
IP[], 7
MDAP[R], 7
CALL[], 7, 8, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="i">
/* VTTTalk Unicode 0x69 (i) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 314, 0, 0
OFFSET[R], 918, -5, 0
SVTCA[Y]
CALL[], 10, 5, 1, 1, 96, 86
SHC[2], 1
SVTCA[X]
CALL[], 13, 20, 0, 32, 9, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="i.loclTRK">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 314, 0, 0
OFFSET[R], 918, -5, 0
SVTCA[Y]
CALL[], 10, 5, 1, 1, 96, 86
SHC[2], 1
SVTCA[X]
CALL[], 13, 20, 0, 32, 9, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="iacute">
/* VTTTalk Unicode 0xed */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 314, 0, 0
OFFSET[R], 920, -8, 0
SVTCA[Y]
CALL[], 10, 5, 1, 1, 65, 86
SHC[2], 1
SVTCA[X]
CALL[], 11, 13, 0, 38, 9, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="ibreve">
/* VTTTalk Unicode 0x12d */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 314, 0, 0
OFFSET[R], 899, -8, 0
SVTCA[Y]
CALL[], 15, 5, 1, 1, 81, 86
SHC[2], 1
SVTCA[X]
CALL[], 18, 11, 0, 32, 9, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="icircumflex">
/* VTTTalk Unicode 0xee */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 314, 0, 0
OFFSET[R], 897, 0, 0
SVTCA[Y]
CALL[], 10, 5, 1, 1, 54, 86
SHC[2], 1
SVTCA[X]
CALL[], 11, 14, 0, 32, 9, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="idieresis">
/* VTTTalk Unicode 0xef */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 314, 0, 0
OFFSET[R], 917, -8, 0
SVTCA[Y]
CALL[], 10, 5, 1, 1, 107, 86
SHC[2], 1
SHC[2], 2
SVTCA[X]
CALL[], 13, 31, 0, 31, 9, 87
SHC[2], 1
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="igrave">
/* VTTTalk Unicode 0xec */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 314, 0, 0
OFFSET[R], 919, -11, 0
SVTCA[Y]
CALL[], 10, 5, 1, 1, 50, 86
SHC[2], 1
SVTCA[X]
CALL[], 11, 13, 0, 24, 9, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="imacron">
/* VTTTalk Unicode 0x12b */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 314, 0, 0
OFFSET[R], 927, 0, 0
SVTCA[Y]
CALL[], 10, 5, 1, 1, 108, 86
SHC[2], 1
SVTCA[X]
CALL[], 10, 13, 0, 32, 9, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="infinity">
/* TT glyph 636, char 0x221e */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 4
MDAP[R], 18
CALL[], 18, 32, 106
SRP2[], 4
IP[], 24
MDAP[R], 24
CALL[], 24, 48, 106
SRP1[], 18
SRP2[], 4
IP[], 10
MDAP[R], 10
CALL[], 10, 40, 106
CALL[], 4, 56, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="integral">
/* TT glyph 638, char 0x222b */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 16
CALL[], 16, 23, 106
CALL[], 0, 7, 106
SRP1[], 16
SHP[1], 19
SRP1[], 0
SHP[1], 3
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="invsmileface">
/* TT glyph 836, char 0x263b */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 10
CALL[], 10, 42, 106
CALL[], 0, 20, 106
SRP1[], 10
SHP[1], 54
SRP1[], 0
SHP[1], 48
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="iogonek">
/* VTTTalk Unicode 0x12f */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 314, 0, 0
OFFSET[R], 918, -5, 0
OFFSET[R], 912, 97, 0
SVTCA[Y]
CALL[], 10, 5, 1, 1, 96, 86
SHC[2], 1
CALL[], 33, 0, 0, 0, 17, 86
SHC[2], 2
SVTCA[X]
CALL[], 13, 20, 0, 32, 9, 87
SHC[2], 1
CALL[], 28, 34, 0, 48, 9, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="itilde">
/* VTTTalk Unicode 0x129 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 314, 0, 0
OFFSET[R], 950, -10, 0
SVTCA[Y]
CALL[], 14, 5, 1, 1, 117, 86
SHC[2], 1
SVTCA[X]
CALL[], 23, 11, 0, 32, 9, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="j">
/* VTTTalk Unicode 0x6a (j) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 330, 0, 0
OFFSET[R], 918, 73, 0
SVTCA[Y]
CALL[], 23, 17, 1, 1, 96, 86
SHC[2], 1
SVTCA[X]
CALL[], 26, 33, 4, 56, 19, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="jcircumflex">
/* VTTTalk Unicode 0x135 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 330, 0, 0
OFFSET[R], 897, 78, 0
SVTCA[Y]
CALL[], 23, 17, 1, 1, 54, 86
SHC[2], 1
SVTCA[X]
CALL[], 24, 27, 4, 56, 19, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="k">
/* TT glyph 332, char 0x6b (k) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 4, 10, 114
CALL[], 5, 0, 114
CALL[], 14, 6, 114
SRP1[], 4
SHP[1], 16
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="kgreenlandic">
/* TT glyph 334, char 0x138 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 4, 10, 114
CALL[], 5, 6, 114
SHP[2], 8
SHP[2], 14
SRP1[], 4
SHP[1], 16
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="l">
/* TT glyph 335, char 0x6c (l) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 5, 0, 114
CALL[], 5, 4, 106
CALL[], 0, 1, 106
SHP[2], 7
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="lacute">
/* VTTTalk Unicode 0x13a */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 335, 0, 0
OFFSET[R], 944, -19, 42
SVTCA[Y]
CALL[], 10, 5, 1, 1, 37, 86
SHC[2], 1
SVTCA[X]
CALL[], 11, 13, 0, 32, 9, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="lcaron">
/* VTTTalk Unicode 0x13e */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 335, 0, 0
OFFSET[R], 880, 164, 0
SVTCA[Y]
CALL[], 23, 5, 0, 0, 6, 86
SHC[2], 1
SVTCA[X]
CALL[], 20, 26, 0, 61, 9, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="ldot">
/* TT glyph 339, char 0x140 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 5, 0, 114
CALL[], 5, 4, 106
CALL[], 0, 1, 106
SHP[2], 7
SRP1[], 5
SHP[1], 18
SRP1[], 0
SHP[1], 10
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="less">
/* TT glyph 628, char 0x3c (&lt;) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 3
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="less_equal.dlig">
/* TT glyph 878, char 0xffff */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 7
MDAP[R], 3
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="less_hyphen.dlig">
/* TT glyph 877, char 0xffff */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 3
IP[], 8
MDAP[R], 8
CALL[], 8, 9, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="lessequal">
/* TT glyph 630, char 0x2264 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 7
MDAP[R], 3
CALL[], 7, 8, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="lfblock">
/* TT glyph 682, char 0x258c */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="lira">
/* VTTTalk Unicode 0x20a4 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 613, 0, 0


    </glyphProgram>

    <glyphProgram name="logicalnot">
/* TT glyph 634, char 0xac */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 3
CALL[], 3, 2, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="lozenge">
/* TT glyph 705, char 0x25ca */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 18, 114
CALL[], 2, 17, 114
SHP[2], 8
SRP1[], 0
SHP[1], 6
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="lslash">
/* TT glyph 343, char 0x142 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 9, 0, 114
CALL[], 9, 8, 106
CALL[], 0, 1, 106
SHP[2], 15
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="ltshade">
/* TT glyph 698, char 0x2591 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 157
IP[], 165
MDAP[R], 165
CALL[], 165, 164, 106
SRP1[], 157
SRP2[], 0
IP[], 161
MDAP[R], 161
CALL[], 161, 160, 106
CALL[], 157, 156, 106
SRP2[], 0
IP[], 153
MDAP[R], 153
CALL[], 153, 152, 106
SRP1[], 157
SRP2[], 0
IP[], 149
MDAP[R], 149
CALL[], 149, 148, 106
SRP1[], 157
SRP2[], 0
IP[], 145
MDAP[R], 145
CALL[], 145, 144, 106
SRP1[], 157
SRP2[], 0
IP[], 141
MDAP[R], 141
CALL[], 141, 140, 106
SRP1[], 157
SRP2[], 0
IP[], 137
MDAP[R], 137
CALL[], 137, 136, 106
SRP1[], 157
SRP2[], 0
IP[], 133
MDAP[R], 133
CALL[], 133, 132, 106
SRP1[], 157
SRP2[], 0
IP[], 129
MDAP[R], 129
CALL[], 129, 128, 106
SRP1[], 157
SRP2[], 0
IP[], 125
MDAP[R], 125
CALL[], 125, 124, 106
SRP1[], 157
SRP2[], 0
IP[], 121
MDAP[R], 121
CALL[], 121, 120, 106
SRP1[], 157
SRP2[], 0
IP[], 117
MDAP[R], 117
CALL[], 117, 116, 106
SRP1[], 157
SRP2[], 0
IP[], 113
MDAP[R], 113
CALL[], 113, 112, 106
SRP1[], 157
SRP2[], 0
IP[], 109
MDAP[R], 109
CALL[], 109, 108, 106
SRP1[], 157
SRP2[], 0
IP[], 105
MDAP[R], 105
CALL[], 105, 104, 106
SRP1[], 157
SRP2[], 0
IP[], 101
MDAP[R], 101
CALL[], 101, 100, 106
SRP1[], 157
SRP2[], 0
IP[], 97
MDAP[R], 97
CALL[], 97, 96, 106
SRP1[], 157
SRP2[], 0
IP[], 93
MDAP[R], 93
CALL[], 93, 92, 106
SRP1[], 157
SRP2[], 0
IP[], 89
MDAP[R], 89
CALL[], 89, 88, 106
SRP1[], 157
SRP2[], 0
IP[], 85
MDAP[R], 85
CALL[], 85, 84, 106
SRP1[], 157
SRP2[], 0
IP[], 80
MDAP[R], 80
CALL[], 80, 81, 106
SRP1[], 157
SRP2[], 0
IP[], 76
MDAP[R], 76
CALL[], 76, 77, 106
SRP1[], 157
SRP2[], 0
IP[], 72
MDAP[R], 72
CALL[], 72, 73, 106
SRP1[], 157
SRP2[], 0
IP[], 68
MDAP[R], 68
CALL[], 68, 69, 106
SRP1[], 157
SRP2[], 0
IP[], 64
MDAP[R], 64
CALL[], 64, 65, 106
SRP1[], 157
SRP2[], 0
IP[], 60
MDAP[R], 60
CALL[], 60, 61, 106
SRP1[], 157
SRP2[], 0
IP[], 56
MDAP[R], 56
CALL[], 56, 57, 106
SRP1[], 157
SRP2[], 0
IP[], 52
MDAP[R], 52
CALL[], 52, 53, 106
SRP1[], 157
SRP2[], 0
IP[], 48
MDAP[R], 48
CALL[], 48, 49, 106
SRP1[], 157
SRP2[], 0
IP[], 44
MDAP[R], 44
CALL[], 44, 45, 106
SRP1[], 157
SRP2[], 0
IP[], 40
MDAP[R], 40
CALL[], 40, 41, 106
SRP1[], 157
SRP2[], 0
IP[], 36
MDAP[R], 36
CALL[], 36, 37, 106
SRP1[], 157
SRP2[], 0
IP[], 32
MDAP[R], 32
CALL[], 32, 33, 106
SRP1[], 157
SRP2[], 0
IP[], 28
MDAP[R], 28
CALL[], 28, 29, 106
SRP1[], 157
SRP2[], 0
IP[], 24
MDAP[R], 24
CALL[], 24, 25, 106
SRP1[], 157
SRP2[], 0
IP[], 20
MDAP[R], 20
CALL[], 20, 21, 106
SRP1[], 157
SRP2[], 0
IP[], 16
MDAP[R], 16
CALL[], 16, 17, 106
SRP1[], 157
SRP2[], 0
IP[], 12
MDAP[R], 12
CALL[], 12, 13, 106
SRP1[], 157
SRP2[], 0
IP[], 8
MDAP[R], 8
CALL[], 8, 9, 106
SRP1[], 157
SRP2[], 0
IP[], 4
MDAP[R], 4
CALL[], 4, 5, 106
CALL[], 0, 1, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="m">
/* TT glyph 344, char 0x6d (m) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 7, 7, 114
CALL[], 1, 6, 114
SRP1[], 7
SHP[1], 15
CALL[], 15, 28, 106
CALL[], 7, 39, 106
SRP1[], 0
SHP[1], 34
SHP[1], 23
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="macron">
/* TT glyph 927, char 0xaf */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
CALL[], 1, 16, 114
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="minus">
/* TT glyph 622, char 0x2212 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="minute">
/* TT glyph 854, char 0x2032 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 2
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="multiply">
/* TT glyph 623, char 0xd7 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 6
SHP[1], 8
SHP[2], 2
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="n">
/* TT glyph 346, char 0x6e (n) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 7, 7, 114
CALL[], 1, 6, 114
CALL[], 7, 18, 106
SRP1[], 0
SHP[1], 13
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="nacute">
/* VTTTalk Unicode 0x144 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 346, 0, 0
OFFSET[R], 920, 4, -15
SVTCA[Y]
CALL[], 25, 7, 1, 1, 39, 86
SHC[2], 1
SVTCA[X]
CALL[], 26, 28, 0, 39, 12, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="ncaron">
/* VTTTalk Unicode 0x148 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 346, 0, 0
OFFSET[R], 898, 9, 0
SVTCA[Y]
CALL[], 30, 7, 1, 1, 46, 86
SHC[2], 1
SVTCA[X]
CALL[], 31, 28, 0, 34, 12, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="nine">
/* TT glyph 483, char 0x39 (9) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 13, 114
CALL[], 47, 5, 114
CALL[], 47, 18, 106
SRP2[], 0
IP[], 37
MDAP[R], 37
CALL[], 37, 28, 106
CALL[], 0, 8, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="nine.dnom">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 525, 0, -252

    </glyphProgram>

    <glyphProgram name="nine.numr">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 525, 0, 0


    </glyphProgram>

    <glyphProgram name="notequal">
/* TT glyph 626, char 0x2260 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 2
MDAP[R], 0
SRP1[], 2
IP[], 5
MDAP[R], 5
CALL[], 5, 4, 106
SRP1[], 0
SRP2[], 2
IP[], 8
MDAP[R], 8
CALL[], 8, 9, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="ntilde">
/* VTTTalk Unicode 0xf1 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 346, 0, 0
OFFSET[R], 901, 5, 0
SVTCA[Y]
CALL[], 29, 7, 1, 1, 106, 86
SHC[2], 1
SVTCA[X]
CALL[], 38, 26, 0, 35, 12, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="numbersign">
/* TT glyph 551, char 0x23 (#) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
CALL[], 13, 16, 114
SRP1[], 0
IP[], 11
MDAP[R], 11
CALL[], 11, 31, 106
SHP[2], 10
SHP[2], 22
SHP[1], 15
SHP[1], 19
SRP1[], 13
SRP2[], 0
IP[], 26
MDAP[R], 26
CALL[], 26, 23, 106
SHP[1], 6
SHP[1], 2
SHP[2], 7
SHP[2], 28
SRP1[], 13
SHP[1], 18
SRP1[], 0
SHP[1], 3
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="o">
/* TT glyph 355, char 0x6f (o) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 11, 114
CALL[], 10, 7, 114
CALL[], 10, 29, 106
CALL[], 0, 20, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="oacute">
/* VTTTalk Unicode 0xf3 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 355, 0, 0
OFFSET[R], 920, -11, -15
SVTCA[Y]
CALL[], 39, 10, 1, 1, 40, 86
SHC[2], 2
SVTCA[X]
CALL[], 40, 42, 5, 36, 15, 87
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="obreve">
/* VTTTalk Unicode 0x14f */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 355, 0, 0
OFFSET[R], 899, -8, 0
SVTCA[Y]
CALL[], 44, 10, 1, 1, 71, 86
SHC[2], 2
SVTCA[X]
CALL[], 47, 40, 5, 32, 15, 87
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="ocircumflex">
/* VTTTalk Unicode 0xf4 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 355, 0, 0
OFFSET[R], 897, 0, 0
SVTCA[Y]
CALL[], 39, 10, 1, 1, 44, 86
SHC[2], 2
SVTCA[X]
CALL[], 40, 43, 5, 32, 15, 87
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="odieresis">
/* VTTTalk Unicode 0xf6 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 355, 0, 0
OFFSET[R], 917, -1, 0
SVTCA[Y]
CALL[], 39, 10, 1, 1, 97, 86
SHC[2], 2
SHC[2], 3
SVTCA[X]
CALL[], 42, 60, 5, 32, 15, 87
SHC[2], 2
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="oe">
/* TT glyph 389, char 0x153 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 6, 11, 114
CALL[], 16, 7, 114
SHP[2], 23
CALL[], 23, 76, 106
CALL[], 16, 61, 106
SRP2[], 6
IP[], 29
MDAP[R], 29
CALL[], 29, 71, 106
SRP1[], 16
SRP2[], 6
IP[], 0
MDAP[R], 0
CALL[], 0, 33, 106
SHP[2], 40
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="ogonek">
/* TT glyph 929, char 0x2db */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 1
MDAP[R], 10
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="ograve">
/* VTTTalk Unicode 0xf2 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 355, 0, 0
OFFSET[R], 919, -11, 0
SVTCA[Y]
CALL[], 39, 10, 1, 1, 40, 86
SHC[2], 2
SVTCA[X]
CALL[], 40, 42, 5, 26, 15, 87
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="ohorn">
/* VTTTalk Unicode 0x1a1 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 355, 0, 0
OFFSET[R], 907, -37, -21
SVTCA[Y]
CALL[], 48, 10, 0, 0, 53, 86
SHC[2], 2
SVTCA[X]
CALL[], 43, 39, 5, 56, 15, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="ohungarumlaut">
/* VTTTalk Unicode 0x151 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 355, 0, 0
OFFSET[R], 921, 11, 0
SVTCA[Y]
CALL[], 39, 10, 1, 1, 55, 86
SHC[2], 2
SHC[2], 3
SVTCA[X]
CALL[], 44, 42, 5, 38, 15, 87
SHC[2], 2
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="omacron">
/* VTTTalk Unicode 0x14d */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 355, 0, 0
OFFSET[R], 927, 0, 0
SVTCA[Y]
CALL[], 39, 10, 1, 1, 98, 86
SHC[2], 2
SVTCA[X]
CALL[], 39, 42, 5, 32, 15, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="one">
/* TT glyph 475, char 0x31 (1) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 6, 12, 114
CALL[], 4, 4, 114
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="one.dnom">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 517, 0, -263

    </glyphProgram>

    <glyphProgram name="one.numr">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 517, 0, 0


    </glyphProgram>

    <glyphProgram name="onehalf">
/* TT glyph 527, char 0xbd */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 7
MDAP[R], 4
CALL[], 38, 19, 114
CALL[], 40, 17, 114
SRP1[], 4
SRP2[], 7
IP[], 17
MDAP[R], 17
CALL[], 17, 25, 106
CALL[], 7, 34, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="onequarter">
/* TT glyph 528, char 0xbc */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 7
MDAP[R], 4
CALL[], 9, 18, 114
CALL[], 22, 19, 114
CALL[], 24, 17, 114
CALL[], 9, 18, 106
SHP[1], 16
SHP[2], 13
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="ordfeminine">
/* TT glyph 470, char 0xaa */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 56
CALL[], 40, 16, 114
CALL[], 40, 33, 106
SRP2[], 56
IP[], 7
MDAP[R], 7
CALL[], 7, 16, 106
SRP1[], 40
SRP2[], 56
IP[], 0
MDAP[R], 0
CALL[], 0, 24, 106
CALL[], 56, 53, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="ordmasculine">
/* TT glyph 471, char 0xba */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 35
CALL[], 8, 16, 114
CALL[], 8, 24, 106
SRP2[], 35
IP[], 0
MDAP[R], 0
CALL[], 0, 16, 106
CALL[], 35, 32, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="oslash">
/* TT glyph 383, char 0xf8 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 2
CALL[], 4, 11, 114
CALL[], 14, 7, 114
CALL[], 14, 33, 106
CALL[], 4, 24, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="oslashacute">
/* VTTTalk Unicode 0x1ff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 383, 0, 0
OFFSET[R], 920, -11, -15
SVTCA[Y]
CALL[], 43, 14, 1, 1, 40, 86
SHC[2], 3
SVTCA[X]
CALL[], 44, 46, 9, 36, 19, 87
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="otilde">
/* VTTTalk Unicode 0xf5 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 355, 0, 0
OFFSET[R], 901, -10, 0
SVTCA[Y]
CALL[], 43, 10, 1, 1, 107, 86
SHC[2], 2
SVTCA[X]
CALL[], 52, 40, 5, 33, 15, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="p">
/* TT glyph 390, char 0x70 (p) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 14, 114
CALL[], 7, 7, 114
CALL[], 1, 6, 114
CALL[], 17, 11, 114
CALL[], 7, 34, 106
CALL[], 17, 23, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="paragraph">
/* TT glyph 848, char 0xb6 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 11
CALL[], 11, 16, 106
SRP1[], 0
SHP[1], 14
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="parenleft">
/* TT glyph 556, char 0x28 (() */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 8
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="parenright">
/* TT glyph 557, char 0x29 ()) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 12
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="partialdiff">
/* TT glyph 645, char 0x2202 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 19, 114
MDAP[R], 28
CALL[], 28, 21, 106
SRP2[], 0
IP[], 9
MDAP[R], 9
CALL[], 9, 49, 106
CALL[], 0, 38, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="percent">
/* TT glyph 646, char 0x25 (%) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 4, 19, 114
CALL[], 45, 17, 114
CALL[], 0, 18, 114
CALL[], 2, 16, 114
CALL[], 45, 63, 106
SRP2[], 4
IP[], 53
MDAP[R], 53
CALL[], 53, 37, 106
SRP1[], 45
SRP2[], 4
IP[], 28
MDAP[R], 28
CALL[], 28, 12, 106
CALL[], 4, 20, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="period">
/* TT glyph 538, char 0x2e (.) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 19, 114
MDAP[R], 8
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="periodcentered">
/* TT glyph 547, char 0xb7 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 8
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="periodcentered.loclCAT">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 547, 0, 0


    </glyphProgram>

    <glyphProgram name="perthousand">
/* TT glyph 647, char 0x2030 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 4, 19, 114
CALL[], 78, 17, 114
CALL[], 78, 95, 106
SRP2[], 4
IP[], 86
MDAP[R], 86
CALL[], 86, 70, 106
SRP1[], 78
SRP2[], 4
IP[], 62
MDAP[R], 62
CALL[], 62, 45, 106
SRP1[], 78
SRP2[], 4
IP[], 29
MDAP[R], 29
CALL[], 29, 12, 106
SRP1[], 4
SHP[1], 37
CALL[], 37, 53, 106
CALL[], 4, 20, 106
SRP1[], 78
SHP[1], 2
SRP1[], 29
SHP[1], 0
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="peseta">
/* TT glyph 609, char 0x20a7 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 13, 13, 114
CALL[], 1, 4, 114
CALL[], 0, 12, 114
CALL[], 1, 93, 106
SRP2[], 13
IP[], 83
MDAP[R], 83
CALL[], 83, 11, 106
SRP1[], 1
SRP2[], 13
IP[], 70
MDAP[R], 70
CALL[], 70, 63, 106
SRP1[], 1
SRP2[], 13
IP[], 35
MDAP[R], 35
CALL[], 35, 36, 106
CALL[], 13, 28, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="plus">
/* TT glyph 621, char 0x2b (+) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 5
IP[], 2
MDAP[R], 2
CALL[], 2, 3, 106
SHP[1], 10
SHP[2], 7
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="plusminus">
/* TT glyph 631, char 0xb1 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 12
MDAP[R], 5
SRP2[], 12
IP[], 3
MDAP[R], 3
CALL[], 3, 2, 106
SHP[2], 10
SHP[1], 7
CALL[], 12, 13, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="product">
/* TT glyph 641, char 0x220f */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
CALL[], 1, 16, 114
CALL[], 1, 10, 106
SRP1[], 0
SHP[1], 8
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="q">
/* TT glyph 392, char 0x71 (q) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 24, 14, 114
CALL[], 16, 7, 114
CALL[], 6, 11, 114
CALL[], 23, 6, 114
CALL[], 16, 35, 106
CALL[], 6, 25, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="question">
/* TT glyph 545, char 0x3f (?) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 36, 19, 114
MDAP[R], 22
CALL[], 22, 13, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="questiondown">
/* TT glyph 546, char 0xbf */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 22
MDAP[R], 36
CALL[], 22, 13, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="quotedbl">
/* VTTTalk Unicode 0x22 (") */
/* ACT generated Sun Apr 27 04:23:05 2025 */

OFFSET[R], 581, -75, 0
OFFSET[R], 581, 75, 0

    </glyphProgram>

    <glyphProgram name="quotedbl.ss03">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

OFFSET[R], 583, -93, 0
OFFSET[R], 583, 68, 0

    </glyphProgram>

    <glyphProgram name="quotedblbase">
/* TT glyph 571, char 0x201e */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 13
SHP[1], 34
SHP[2], 21
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="quotedblleft">
/* TT glyph 572, char 0x201c */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 13
CALL[], 0, 17, 114
SHP[2], 21
SRP1[], 13
SHP[1], 34
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="quotedblright">
/* TT glyph 573, char 0x201d */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
CALL[], 34, 17, 114
SHP[2], 13
SRP1[], 0
SHP[1], 21
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="quoteleft">
/* TT glyph 574, char 0x2018 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 13
CALL[], 0, 17, 114
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="quoteright">
/* TT glyph 575, char 0x2019 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
CALL[], 13, 17, 114
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="quotesinglbase">
/* VTTTalk Unicode 0x201a */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 575, 0, -532

    </glyphProgram>

    <glyphProgram name="quotesingle">
/* TT glyph 581, char 0x27 (') */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 6
MDAP[R], 0
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="quotesingle.ss03">
/* TT glyph 583, char 0xffff */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 9
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="r">
/* TT glyph 393, char 0x72 (r) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 9, 7, 114
CALL[], 1, 6, 114
CALL[], 9, 16, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="r.serif">
/* TT glyph 469, char 0xffff */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 11
CALL[], 11, 21, 106
SRP2[], 0
IP[], 5
MDAP[R], 5
CALL[], 5, 4, 106
CALL[], 0, 1, 106
SHP[2], 27
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="racute">
/* VTTTalk Unicode 0x155 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 393, 0, 0
OFFSET[R], 920, 29, -15
SVTCA[Y]
CALL[], 24, 9, 1, 1, 39, 86
SHC[2], 1
SVTCA[X]
CALL[], 25, 27, 0, 37, 12, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="radical">
/* TT glyph 643, char 0x221a */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 19, 114
MDAP[R], 6
IP[], 2
MDAP[R], 2
CALL[], 2, 3, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="rcaron">
/* VTTTalk Unicode 0x159 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 393, 0, 0
OFFSET[R], 898, 34, 0
SVTCA[Y]
CALL[], 29, 9, 1, 1, 46, 86
SHC[2], 1
SVTCA[X]
CALL[], 30, 27, 0, 32, 12, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="registered">
/* TT glyph 851, char 0xae */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 24
MDAP[R], 34
CALL[], 34, 55, 106
SRP2[], 24
IP[], 5
MDAP[R], 5
CALL[], 5, 23, 106
SRP1[], 34
SRP2[], 24
IP[], 2
MDAP[R], 2
CALL[], 2, 15, 106
CALL[], 24, 45, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="ring">
/* TT glyph 925, char 0x2da */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 8
CALL[], 8, 22, 106
CALL[], 0, 16, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="ring.case">
/* TT glyph 948, char 0xffff */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 8
CALL[], 8, 22, 106
CALL[], 0, 16, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="rtblock">
/* TT glyph 686, char 0x2590 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="s">
/* TT glyph 403, char 0x73 (s) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 11, 114
CALL[], 26, 7, 114
CALL[], 26, 36, 106
CALL[], 0, 9, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="sacute">
/* VTTTalk Unicode 0x15b */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 403, 0, 0
OFFSET[R], 920, 0, -15
SVTCA[Y]
CALL[], 51, 26, 1, 1, 39, 86
SHC[2], 1
SVTCA[X]
CALL[], 52, 54, 22, 36, 47, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="scaron">
/* VTTTalk Unicode 0x161 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 403, 0, 0
OFFSET[R], 898, 0, 0
SVTCA[Y]
CALL[], 56, 26, 1, 1, 46, 86
SHC[2], 1
SVTCA[X]
CALL[], 57, 54, 22, 31, 47, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="scedilla">
/* VTTTalk Unicode 0x15f */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 403, 0, 0
OFFSET[R], 928, 0, 0
SVTCA[Y]
CALL[], 67, 0, 0, 0, 10, 86
SHC[2], 1
SVTCA[X]
CALL[], 54, 73, 22, 35, 47, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="scircumflex">
/* VTTTalk Unicode 0x15d */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 403, 0, 0
OFFSET[R], 897, 0, 0
SVTCA[Y]
CALL[], 51, 26, 1, 1, 43, 86
SHC[2], 1
SVTCA[X]
CALL[], 52, 55, 22, 30, 47, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="second">
/* VTTTalk Unicode 0x2033 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

OFFSET[R], 854, 70, 0
OFFSET[R], 854, -60, 0

    </glyphProgram>

    <glyphProgram name="section">
/* TT glyph 849, char 0xa7 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 42
CALL[], 42, 55, 106
CALL[], 0, 15, 106
SRP1[], 42
SHP[1], 93
SRP1[], 0
SHP[1], 82
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="semicolon">
/* TT glyph 541, char 0x3b (;) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 28
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="seven">
/* TT glyph 481, char 0x37 (7) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 12, 114
CALL[], 6, 4, 114
CALL[], 6, 5, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="seven.dnom">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 523, 0, -252

    </glyphProgram>

    <glyphProgram name="seven.numr">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 523, 0, 0


    </glyphProgram>

    <glyphProgram name="shade">
/* TT glyph 699, char 0x2592 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 157
IP[], 165
MDAP[R], 165
CALL[], 165, 164, 106
SRP1[], 157
SRP2[], 0
IP[], 161
MDAP[R], 161
CALL[], 161, 160, 106
CALL[], 157, 156, 106
SRP2[], 0
IP[], 153
MDAP[R], 153
CALL[], 153, 152, 106
SRP1[], 157
SRP2[], 0
IP[], 149
MDAP[R], 149
CALL[], 149, 148, 106
SRP1[], 157
SRP2[], 0
IP[], 145
MDAP[R], 145
CALL[], 145, 144, 106
SRP1[], 157
SRP2[], 0
IP[], 141
MDAP[R], 141
CALL[], 141, 140, 106
SRP1[], 157
SRP2[], 0
IP[], 137
MDAP[R], 137
CALL[], 137, 136, 106
SRP1[], 157
SRP2[], 0
IP[], 133
MDAP[R], 133
CALL[], 133, 132, 106
SRP1[], 157
SRP2[], 0
IP[], 129
MDAP[R], 129
CALL[], 129, 128, 106
SRP1[], 157
SRP2[], 0
IP[], 125
MDAP[R], 125
CALL[], 125, 124, 106
SRP1[], 157
SRP2[], 0
IP[], 121
MDAP[R], 121
CALL[], 121, 120, 106
SRP1[], 157
SRP2[], 0
IP[], 117
MDAP[R], 117
CALL[], 117, 116, 106
SRP1[], 157
SRP2[], 0
IP[], 113
MDAP[R], 113
CALL[], 113, 112, 106
SRP1[], 157
SRP2[], 0
IP[], 109
MDAP[R], 109
CALL[], 109, 108, 106
SRP1[], 157
SRP2[], 0
IP[], 105
MDAP[R], 105
CALL[], 105, 104, 106
SRP1[], 157
SRP2[], 0
IP[], 101
MDAP[R], 101
CALL[], 101, 100, 106
SRP1[], 157
SRP2[], 0
IP[], 97
MDAP[R], 97
CALL[], 97, 96, 106
SRP1[], 157
SRP2[], 0
IP[], 93
MDAP[R], 93
CALL[], 93, 92, 106
SRP1[], 157
SRP2[], 0
IP[], 89
MDAP[R], 89
CALL[], 89, 88, 106
SRP1[], 157
SRP2[], 0
IP[], 85
MDAP[R], 85
CALL[], 85, 84, 106
SRP1[], 157
SRP2[], 0
IP[], 80
MDAP[R], 80
CALL[], 80, 81, 106
SRP1[], 157
SRP2[], 0
IP[], 76
MDAP[R], 76
CALL[], 76, 77, 106
SRP1[], 157
SRP2[], 0
IP[], 72
MDAP[R], 72
CALL[], 72, 73, 106
SRP1[], 157
SRP2[], 0
IP[], 68
MDAP[R], 68
CALL[], 68, 69, 106
SRP1[], 157
SRP2[], 0
IP[], 64
MDAP[R], 64
CALL[], 64, 65, 106
SRP1[], 157
SRP2[], 0
IP[], 60
MDAP[R], 60
CALL[], 60, 61, 106
SRP1[], 157
SRP2[], 0
IP[], 56
MDAP[R], 56
CALL[], 56, 57, 106
SRP1[], 157
SRP2[], 0
IP[], 52
MDAP[R], 52
CALL[], 52, 53, 106
SRP1[], 157
SRP2[], 0
IP[], 48
MDAP[R], 48
CALL[], 48, 49, 106
SRP1[], 157
SRP2[], 0
IP[], 44
MDAP[R], 44
CALL[], 44, 45, 106
SRP1[], 157
SRP2[], 0
IP[], 40
MDAP[R], 40
CALL[], 40, 41, 106
SRP1[], 157
SRP2[], 0
IP[], 36
MDAP[R], 36
CALL[], 36, 37, 106
SRP1[], 157
SRP2[], 0
IP[], 32
MDAP[R], 32
CALL[], 32, 33, 106
SRP1[], 157
SRP2[], 0
IP[], 28
MDAP[R], 28
CALL[], 28, 29, 106
SRP1[], 157
SRP2[], 0
IP[], 24
MDAP[R], 24
CALL[], 24, 25, 106
SRP1[], 157
SRP2[], 0
IP[], 20
MDAP[R], 20
CALL[], 20, 21, 106
SRP1[], 157
SRP2[], 0
IP[], 16
MDAP[R], 16
CALL[], 16, 17, 106
SRP1[], 157
SRP2[], 0
IP[], 12
MDAP[R], 12
CALL[], 12, 13, 106
SRP1[], 157
SRP2[], 0
IP[], 8
MDAP[R], 8
CALL[], 8, 9, 106
SRP1[], 157
SRP2[], 0
IP[], 4
MDAP[R], 4
CALL[], 4, 5, 106
CALL[], 0, 1, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="six">
/* TT glyph 480, char 0x36 (6) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 13, 114
CALL[], 8, 5, 114
CALL[], 8, 17, 106
SRP2[], 0
IP[], 28
MDAP[R], 28
CALL[], 28, 48, 106
CALL[], 0, 38, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="six.dnom">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 522, 0, -252

    </glyphProgram>

    <glyphProgram name="six.numr">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 522, 0, 0


    </glyphProgram>

    <glyphProgram name="slash">
/* TT glyph 552, char 0x2f (/) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 1, 19, 114
CALL[], 3, 17, 114
SHP[2], 2
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="smileface">
/* TT glyph 835, char 0x263a */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 10
CALL[], 10, 30, 106
SRP2[], 0
IP[], 40
MDAP[R], 40
CALL[], 40, 48, 106
CALL[], 0, 20, 106
SRP1[], 10
SHP[1], 62
SRP1[], 40
SHP[1], 56
SRP1[], 10
SHP[1], 74
SRP1[], 40
SHP[1], 68
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="space">
/* TT glyph 589, char 0x20 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */


    </glyphProgram>

    <glyphProgram name="spade">
/* TT glyph 837, char 0x2660 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 5
MDAP[R], 12
SRP1[], 5
SHP[1], 7
SHP[1], 4
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="sterling">
/* TT glyph 613, char 0xa3 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 56, 13, 114
CALL[], 19, 4, 114
CALL[], 19, 26, 106
SRP2[], 56
IP[], 11
MDAP[R], 11
CALL[], 11, 10, 106
SHP[2], 37
SHP[1], 34
CALL[], 56, 49, 106
SHP[1], 0
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="summation">
/* TT glyph 642, char 0x2211 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 4
CALL[], 4, 7, 106
CALL[], 0, 11, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="t">
/* TT glyph 415, char 0x74 (t) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 11, 114
MDAP[R], 7
CALL[], 22, 6, 114
CALL[], 22, 21, 106
CALL[], 0, 14, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="tbar">
/* TT glyph 416, char 0x167 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 4, 11, 114
MDAP[R], 11
CALL[], 26, 6, 114
CALL[], 26, 25, 106
SRP1[], 11
SRP2[], 4
IP[], 0
MDAP[R], 0
CALL[], 0, 1, 106
CALL[], 4, 18, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="tcaron">
/* VTTTalk Unicode 0x165 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 415, 0, 0
OFFSET[R], 880, 174, 35
SVTCA[Y]
CALL[], 25, 7, 1, 1, -94, 86
SHC[2], 2
SVTCA[X]
CALL[], 35, 41, 21, 67, 24, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="thorn">
/* TT glyph 391, char 0xfe */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 14, 114
CALL[], 1, 0, 114
CALL[], 7, 7, 114
CALL[], 17, 11, 114
CALL[], 7, 34, 106
CALL[], 17, 23, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="three">
/* TT glyph 477, char 0x33 (3) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 13, 114
CALL[], 37, 5, 114
CALL[], 37, 28, 106
CALL[], 0, 8, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="three.dnom">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 519, 0, -280

    </glyphProgram>

    <glyphProgram name="three.numr">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 519, 0, 0


    </glyphProgram>

    <glyphProgram name="threequarters">
/* TT glyph 529, char 0xbe */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 45
MDAP[R], 32
CALL[], 47, 18, 114
CALL[], 60, 19, 114
CALL[], 62, 17, 114
CALL[], 32, 25, 106
SRP2[], 45
IP[], 8
MDAP[R], 8
CALL[], 8, 0, 106
CALL[], 47, 56, 106
SHP[1], 54
SHP[2], 51
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="tilde">
/* VTTTalk Unicode 0x2dc */
/* ACT generated Sun Apr 27 04:23:05 2025 */

OFFSET[R], 901, 0, 0


    </glyphProgram>

    <glyphProgram name="tilde.case">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

OFFSET[R], 901, 0, 130

    </glyphProgram>

    <glyphProgram name="tildecomb">
/* TT glyph 901, char 0x303 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 4
MDAP[R], 16
SRP2[], 4
IP[], 9
MDAP[R], 9
CALL[], 4, 21, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="tildecomb.case">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

OFFSET[R], 901, -5, 114


    </glyphProgram>

    <glyphProgram name="tildecomb.i">
/* TT glyph 950, char 0xffff */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 4
MDAP[R], 16
SRP2[], 4
IP[], 9
MDAP[R], 9
CALL[], 4, 21, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="trademark">
/* TT glyph 852, char 0x2122 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
CALL[], 3, 17, 114
CALL[], 3, 2, 106
SHP[2], 6
SHP[1], 9
SRP1[], 0
SHP[1], 8
SRP1[], 3
SHP[1], 13
SRP1[], 0
SHP[1], 15
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="two">
/* TT glyph 476, char 0x32 (2) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 12, 114
CALL[], 22, 5, 114
CALL[], 22, 12, 106
CALL[], 0, 33, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="two.dnom">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 518, 0, -253

    </glyphProgram>

    <glyphProgram name="two.numr">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 518, 0, 0


    </glyphProgram>

    <glyphProgram name="u">
/* TT glyph 423, char 0x75 (u) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 11, 114
CALL[], 7, 6, 114
CALL[], 27, 10, 114
CALL[], 0, 14, 106
SRP1[], 7
SHP[1], 22
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="u.i">
/* TT glyph 468, char 0xffff */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 7
CALL[], 0, 14, 106
SRP1[], 7
SHP[1], 22
SRP1[], 0
SHP[1], 27
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uacute">
/* VTTTalk Unicode 0xfa */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 423, 0, 0
OFFSET[R], 920, -11, -15
SVTCA[Y]
CALL[], 36, 21, 1, 1, 50, 86
SHC[2], 1
SVTCA[X]
CALL[], 37, 39, 6, 37, 23, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="ubreve">
/* VTTTalk Unicode 0x16d */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 423, 0, 0
OFFSET[R], 899, -8, 0
SVTCA[Y]
CALL[], 41, 21, 1, 1, 81, 86
SHC[2], 1
SVTCA[X]
CALL[], 44, 37, 6, 32, 23, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="ucircumflex">
/* VTTTalk Unicode 0xfb */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 423, 0, 0
OFFSET[R], 897, 0, 0
SVTCA[Y]
CALL[], 36, 7, 1, 1, 54, 86
SHC[2], 1
SVTCA[X]
CALL[], 37, 40, 6, 32, 23, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="udieresis">
/* VTTTalk Unicode 0xfc */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 423, 0, 0
OFFSET[R], 917, -1, 0
SVTCA[Y]
CALL[], 36, 7, 1, 1, 107, 86
SHC[2], 1
SHC[2], 2
SVTCA[X]
CALL[], 39, 57, 6, 32, 23, 87
SHC[2], 1
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="ugrave">
/* VTTTalk Unicode 0xf9 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 423, 0, 0
OFFSET[R], 919, -11, 0
SVTCA[Y]
CALL[], 36, 21, 1, 1, 50, 86
SHC[2], 1
SVTCA[X]
CALL[], 37, 39, 6, 26, 23, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="uhorn">
/* TT glyph 432, char 0x1b0 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 11, 114
MDAP[R], 36
CALL[], 7, 6, 114
CALL[], 27, 10, 114
SRP1[], 7
SHP[1], 21
CALL[], 21, 40, 106
CALL[], 0, 14, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uhungarumlaut">
/* VTTTalk Unicode 0x171 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 423, 0, 0
OFFSET[R], 921, 11, 0
SVTCA[Y]
CALL[], 36, 21, 1, 1, 65, 86
SHC[2], 1
SHC[2], 2
SVTCA[X]
CALL[], 41, 39, 6, 39, 23, 87
SHC[2], 1
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="umacron">
/* VTTTalk Unicode 0x16b */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 423, 0, 0
OFFSET[R], 927, 0, 0
SVTCA[Y]
CALL[], 36, 7, 1, 1, 108, 86
SHC[2], 1
SVTCA[X]
CALL[], 36, 39, 6, 32, 23, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="underscore">
/* TT glyph 569, char 0x5f (_) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni00A0">
/* TT glyph 590, char 0xa0 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */


    </glyphProgram>

    <glyphProgram name="uni00AD">
/* VTTTalk Unicode 0xad */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 562, 0, 0


    </glyphProgram>

    <glyphProgram name="uni00B2">
/* TT glyph 518, char 0xb2 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
CALL[], 18, 17, 114
CALL[], 18, 10, 106
CALL[], 0, 28, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni00B3">
/* TT glyph 519, char 0xb3 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
CALL[], 33, 17, 114
CALL[], 33, 26, 106
CALL[], 0, 8, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni00B5">
/* TT glyph 644, char 0xb5 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 8
CALL[], 42, 19, 114
SHP[2], 34
CALL[], 34, 26, 106
CALL[], 42, 15, 106
SRP1[], 8
SHP[1], 21
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni00B9">
/* TT glyph 517, char 0xb9 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
CALL[], 4, 17, 114
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0122">
/* TT glyph 71, char 0x122 */
/* VTT 6.35 compiler Sun Apr 27 04:23:12 2025 */
SVTCA[Y]
MDAP[R], 45
CALL[], 11, 3, 114
CALL[], 0, 9, 114
CALL[], 11, 21, 106
SRP2[], 45
IP[], 40
MDAP[R], 40
CALL[], 40, 39, 106
CALL[], 0, 32, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0123">
/* TT glyph 305, char 0x123 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 15, 114
MDAP[R], 96
CALL[], 92, 7, 114
SRP1[], 96
SRP2[], 0
IP[], 64
MDAP[R], 64
CALL[], 64, 80, 106
CALL[], 92, 93, 106
SRP1[], 96
SRP2[], 0
IP[], 56
MDAP[R], 56
CALL[], 56, 72, 106
CALL[], 0, 19, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0136">
/* TT glyph 97, char 0x136 */
/* VTT 6.35 compiler Sun Apr 27 04:23:12 2025 */
SVTCA[Y]
MDAP[R], 17
CALL[], 5, 2, 114
CALL[], 4, 8, 114
SRP1[], 5
SHP[1], 8
SHP[1], 14
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0137">
/* TT glyph 333, char 0x137 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 17
CALL[], 5, 0, 114
CALL[], 4, 10, 114
CALL[], 14, 6, 114
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni013B">
/* TT glyph 103, char 0x13b */
/* VTT 6.35 compiler Sun Apr 27 04:23:12 2025 */
SVTCA[Y]
MDAP[R], 6
CALL[], 1, 2, 114
CALL[], 0, 8, 114
CALL[], 0, 3, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni013C">
/* TT glyph 338, char 0x13c */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 10
CALL[], 5, 0, 114
CALL[], 0, 10, 114
CALL[], 5, 4, 106
CALL[], 0, 1, 106
SHP[2], 7
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0145">
/* TT glyph 114, char 0x145 */
/* VTT 6.35 compiler Sun Apr 27 04:23:12 2025 */
SVTCA[Y]
MDAP[R], 10
CALL[], 2, 2, 114
CALL[], 0, 8, 114
SRP1[], 2
SHP[1], 5
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0146">
/* TT glyph 349, char 0x146 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 25
CALL[], 7, 7, 114
CALL[], 0, 10, 114
CALL[], 1, 6, 114
CALL[], 7, 18, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0156">
/* TT glyph 161, char 0x156 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 27
CALL[], 1, 2, 114
CALL[], 0, 8, 114
CALL[], 1, 26, 106
SRP2[], 27
IP[], 16
MDAP[R], 16
CALL[], 16, 14, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0157">
/* TT glyph 396, char 0x157 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 24
CALL[], 9, 7, 114
CALL[], 0, 10, 114
CALL[], 1, 6, 114
CALL[], 9, 16, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0162">
/* VTTTalk Unicode 0x162 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 179, 0, 0
OFFSET[R], 928, -21, 0
SVTCA[Y]
CALL[], 24, 0, 1, 0, 0, 86
SHC[2], 1
SVTCA[X]
CALL[], 11, 30, 2, 33, 5, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="uni0163">
/* VTTTalk Unicode 0x163 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 415, 0, 0
OFFSET[R], 928, -21, 0
SVTCA[Y]
CALL[], 41, 0, 1, 0, 7, 86
SHC[2], 2
SVTCA[X]
CALL[], 28, 47, 21, 36, 24, 87
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="uni018F">
/* VTTTalk Unicode 0x18f */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 120, 0, 0

    </glyphProgram>

    <glyphProgram name="uni0198">
/* TT glyph 98, char 0x198 */
/* VTT 6.35 compiler Sun Apr 27 04:23:12 2025 */
SVTCA[Y]
MDAP[R], 24
MDAP[R], 8
CALL[], 8, 16, 106
SHP[1], 11
SHP[1], 2
SRP1[], 24
SHP[1], 23
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni01B8">
/* TT glyph 65, char 0x1b8 */
/* VTT 6.35 compiler Sun Apr 27 04:23:12 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 31
CALL[], 31, 34, 106
SRP2[], 0
IP[], 35
MDAP[R], 35
CALL[], 35, 9, 106
CALL[], 0, 21, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni01B9">
/* VTTTalk Unicode 0x1b9 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

OFFSET[R], 65, 20, -166

    </glyphProgram>

    <glyphProgram name="uni01C7">
/* TT glyph 100, char 0x1c7 */
/* VTT 6.35 compiler Sun Apr 27 04:23:12 2025 */
SVTCA[Y]
MDAP[R], 0
CALL[], 30, 2, 114
CALL[], 29, 8, 114
SRP1[], 30
SHP[1], 20
CALL[], 20, 19, 106
CALL[], 29, 36, 106
CALL[], 0, 12, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni01C8">
/* TT glyph 106, char 0x1c8 */
/* VTT 6.35 compiler Sun Apr 27 04:23:12 2025 */
SVTCA[Y]
MDAP[R], 10
CALL[], 1, 2, 114
CALL[], 0, 8, 114
SRP1[], 1
SRP2[], 10
IP[], 33
MDAP[R], 33
CALL[], 33, 32, 106
CALL[], 0, 7, 106
CALL[], 10, 25, 106
SRP1[], 1
SHP[1], 46
SRP1[], 33
SHP[1], 40
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni01C9">
/* TT glyph 341, char 0x1c9 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 15, 114
CALL[], 32, 0, 114
CALL[], 20, 6, 114
CALL[], 27, 10, 114
CALL[], 32, 31, 106
CALL[], 20, 19, 106
CALL[], 27, 28, 106
SHP[2], 34
CALL[], 0, 13, 106
SRP1[], 32
SHP[1], 43
SRP1[], 20
SHP[1], 37
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni01EA">
/* VTTTalk Unicode 0x1ea */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 120, 0, 0
OFFSET[R], 912, 38, 10
SVTCA[Y]
CALL[], 48, 0, 0, 0, 38, 86
SHC[2], 2
SVTCA[X]
CALL[], 43, 49, 5, 34, 15, 87
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="uni01EB">
/* VTTTalk Unicode 0x1eb */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 355, 0, 0
OFFSET[R], 912, 37, 10
SVTCA[Y]
CALL[], 49, 0, 0, 0, 35, 86
SHC[2], 2
SVTCA[X]
CALL[], 44, 50, 5, 34, 15, 87
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="uni0200">
/* VTTTalk Unicode 0x200 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 919, -80, 166
OFFSET[R], 919, 80, 166
SVTCA[Y]
CALL[], 11, 7, 1, 1, 39, 86
SHC[2], 2
CALL[], 15, 7, 1, 1, 39, 86
SHC[2], 3
SVTCA[X]
CALL[], 12, 14, 6, 17, 9, 87
SHC[2], 2
CALL[], 16, 18, 6, 39, 9, 87
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="uni0201">
/* VTTTalk Unicode 0x201 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 232, 0, 0
OFFSET[R], 919, -80, 0
OFFSET[R], 919, 80, 0
SVTCA[Y]
CALL[], 60, 47, 1, 1, 40, 86
SHC[2], 1
CALL[], 64, 47, 1, 1, 40, 86
SHC[2], 2
SVTCA[X]
CALL[], 61, 63, 4, 15, 53, 87
SHC[2], 1
CALL[], 65, 67, 4, 41, 53, 87
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="uni0202">
/* TT glyph 20, char 0x202 */
/* VTT 6.35 compiler Sun Apr 27 04:23:12 2025 */
SVTCA[Y]
MDAP[R], 5
MDAP[R], 16
CALL[], 16, 23, 106
SRP2[], 5
IP[], 1
MDAP[R], 1
CALL[], 1, 2, 106
SRP1[], 5
SHP[1], 10
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0203">
/* TT glyph 251, char 0x203 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 65
CALL[], 65, 72, 106
SRP2[], 0
IP[], 47
MDAP[R], 47
CALL[], 47, 39, 106
SRP1[], 65
SRP2[], 0
IP[], 18
MDAP[R], 18
CALL[], 18, 8, 106
CALL[], 0, 28, 106
SHP[1], 54
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0204">
/* VTTTalk Unicode 0x204 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 42, 0, 0
OFFSET[R], 919, -71, 166
OFFSET[R], 919, 89, 166
SVTCA[Y]
CALL[], 12, 1, 1, 1, 49, 86
SHC[2], 1
CALL[], 16, 1, 1, 1, 49, 86
SHC[2], 2
SVTCA[X]
CALL[], 13, 15, 0, 16, 3, 87
SHC[2], 1
CALL[], 17, 19, 0, 42, 3, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="uni0205">
/* VTTTalk Unicode 0x205 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 274, 0, 0
OFFSET[R], 919, -70, 0
OFFSET[R], 919, 90, 0
SVTCA[Y]
CALL[], 45, 10, 1, 1, 39, 86
SHC[2], 2
CALL[], 49, 10, 1, 1, 39, 86
SHC[2], 3
SVTCA[X]
CALL[], 46, 48, 5, 17, 15, 87
SHC[2], 2
CALL[], 50, 52, 5, 43, 15, 87
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="uni0206">
/* TT glyph 59, char 0x206 */
/* VTT 6.35 compiler Sun Apr 27 04:23:12 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 17
CALL[], 17, 24, 106
SRP2[], 0
IP[], 1
MDAP[R], 1
CALL[], 1, 4, 106
SRP1[], 17
SRP2[], 0
IP[], 8
MDAP[R], 8
CALL[], 8, 5, 106
CALL[], 0, 9, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0207">
/* TT glyph 291, char 0x207 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 50
CALL[], 50, 57, 106
SRP2[], 0
IP[], 10
MDAP[R], 10
CALL[], 10, 40, 106
SRP1[], 50
SRP2[], 0
IP[], 19
MDAP[R], 19
CALL[], 19, 34, 106
CALL[], 0, 24, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0208">
/* VTTTalk Unicode 0x208 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 79, 0, 0
OFFSET[R], 919, -91, 166
OFFSET[R], 919, 69, 166
SVTCA[Y]
CALL[], 12, 5, 1, 1, 50, 86
SHC[2], 1
CALL[], 16, 5, 1, 1, 50, 86
SHC[2], 2
SVTCA[X]
CALL[], 13, 15, 0, 10, 11, 87
SHC[2], 1
CALL[], 17, 19, 0, 42, 11, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="uni0209">
/* VTTTalk Unicode 0x209 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 314, 0, 0
OFFSET[R], 919, -80, 0
OFFSET[R], 919, 80, 0
SVTCA[Y]
CALL[], 10, 5, 1, 1, 50, 86
SHC[2], 1
CALL[], 14, 5, 1, 1, 50, 86
SHC[2], 2
SVTCA[X]
CALL[], 11, 13, 0, 9, 9, 87
SHC[2], 1
CALL[], 15, 17, 0, 44, 9, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="uni020A">
/* TT glyph 90, char 0x20a */
/* VTT 6.35 compiler Sun Apr 27 04:23:12 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 17
CALL[], 17, 24, 106
SRP2[], 0
IP[], 5
MDAP[R], 5
CALL[], 5, 4, 106
SHP[2], 8
CALL[], 0, 9, 106
SHP[2], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni020B">
/* TT glyph 325, char 0x20b */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 15
CALL[], 15, 22, 106
SRP2[], 0
IP[], 5
MDAP[R], 5
CALL[], 5, 4, 106
CALL[], 0, 1, 106
SHP[2], 7
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni020C">
/* VTTTalk Unicode 0x20c */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 120, 0, 0
OFFSET[R], 919, -80, 166
OFFSET[R], 919, 80, 166
SVTCA[Y]
CALL[], 38, 10, 1, 1, 46, 86
SHC[2], 2
CALL[], 42, 10, 1, 1, 46, 86
SHC[2], 3
SVTCA[X]
CALL[], 39, 41, 5, 17, 15, 87
SHC[2], 2
CALL[], 43, 45, 5, 40, 15, 87
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="uni020D">
/* VTTTalk Unicode 0x20d */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 355, 0, 0
OFFSET[R], 919, -80, 0
OFFSET[R], 919, 80, 0
SVTCA[Y]
CALL[], 39, 10, 1, 1, 40, 86
SHC[2], 2
CALL[], 43, 10, 1, 1, 40, 86
SHC[2], 3
SVTCA[X]
CALL[], 40, 42, 5, 16, 15, 87
SHC[2], 2
CALL[], 44, 46, 5, 40, 15, 87
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="uni020E">
/* TT glyph 143, char 0x20e */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 43
CALL[], 43, 50, 106
SRP2[], 0
IP[], 10
MDAP[R], 10
CALL[], 10, 29, 106
CALL[], 0, 20, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni020F">
/* TT glyph 378, char 0x20f */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 44
CALL[], 44, 51, 106
SRP2[], 0
IP[], 10
MDAP[R], 10
CALL[], 10, 29, 106
CALL[], 0, 20, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0210">
/* VTTTalk Unicode 0x210 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 158, 0, 0
OFFSET[R], 919, -80, 166
OFFSET[R], 919, 80, 166
SVTCA[Y]
CALL[], 27, 1, 1, 1, 50, 86
SHC[2], 2
CALL[], 31, 1, 1, 1, 50, 86
SHC[2], 3
SVTCA[X]
CALL[], 28, 30, 0, 14, 6, 87
SHC[2], 2
CALL[], 32, 34, 0, 41, 6, 87
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="uni0211">
/* VTTTalk Unicode 0x211 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 393, 0, 0
OFFSET[R], 919, -40, 0
OFFSET[R], 919, 120, 0
SVTCA[Y]
CALL[], 24, 1, 1, 1, 50, 86
SHC[2], 1
CALL[], 28, 9, 1, 1, 39, 86
SHC[2], 2
SVTCA[X]
CALL[], 25, 27, 0, 12, 12, 87
SHC[2], 1
CALL[], 29, 31, 0, 42, 12, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="uni0212">
/* TT glyph 164, char 0x212 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 32
CALL[], 32, 39, 106
SRP2[], 0
IP[], 1
MDAP[R], 1
CALL[], 1, 26, 106
SRP1[], 32
SRP2[], 0
IP[], 14
MDAP[R], 14
CALL[], 14, 16, 106
SRP1[], 0
SHP[1], 12
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0213">
/* TT glyph 400, char 0x213 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 29
CALL[], 29, 36, 106
SRP2[], 0
IP[], 9
MDAP[R], 9
CALL[], 9, 16, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0214">
/* VTTTalk Unicode 0x214 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 186, 0, 0
OFFSET[R], 919, -80, 166
OFFSET[R], 919, 80, 166
SVTCA[Y]
CALL[], 21, 5, 1, 1, 50, 86
SHC[2], 1
CALL[], 25, 15, 1, 1, 50, 86
SHC[2], 2
SVTCA[X]
CALL[], 22, 24, 4, 15, 17, 87
SHC[2], 1
CALL[], 26, 28, 4, 40, 17, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="uni0215">
/* VTTTalk Unicode 0x215 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 423, 0, 0
OFFSET[R], 919, -80, 0
OFFSET[R], 919, 80, 0
SVTCA[Y]
CALL[], 36, 7, 1, 1, 50, 86
SHC[2], 1
CALL[], 40, 21, 1, 1, 50, 86
SHC[2], 2
SVTCA[X]
CALL[], 37, 39, 6, 14, 23, 87
SHC[2], 1
CALL[], 41, 43, 6, 42, 23, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="uni0216">
/* TT glyph 202, char 0x216 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 26
CALL[], 26, 33, 106
CALL[], 0, 10, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0217">
/* TT glyph 439, char 0x217 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 41
CALL[], 41, 48, 106
CALL[], 0, 14, 106
SHP[1], 27
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0218">
/* TT glyph 173, char 0x218 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 55
CALL[], 27, 3, 114
CALL[], 0, 9, 114
CALL[], 27, 35, 106
CALL[], 0, 7, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0219">
/* TT glyph 410, char 0x219 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 51
CALL[], 26, 7, 114
CALL[], 0, 11, 114
CALL[], 26, 36, 106
CALL[], 0, 9, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni021A">
/* TT glyph 183, char 0x21a */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 8
CALL[], 3, 2, 114
CALL[], 0, 8, 114
CALL[], 3, 2, 106
SHP[2], 6
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni021B">
/* TT glyph 419, char 0x21b */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 25
MDAP[R], 7
CALL[], 0, 11, 114
CALL[], 22, 6, 114
CALL[], 22, 21, 106
CALL[], 0, 14, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni022A">
/* VTTTalk Unicode 0x22a */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 120, 0, 0
OFFSET[R], 941, -1, 0
OFFSET[R], 927, -2, 308
SVTCA[Y]
CALL[], 38, 10, 1, 1, 61, 86
SHC[2], 2
SHC[2], 3
CALL[], 62, 44, 1, 1, 84, 86
SHC[2], 4
SVTCA[X]
CALL[], 41, 59, 5, 32, 15, 87
SHC[2], 2
SHC[2], 3
CALL[], 62, 65, 41, 32, 59, 87
SHC[2], 4


    </glyphProgram>

    <glyphProgram name="uni022B">
/* VTTTalk Unicode 0x22b */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 355, 0, 0
OFFSET[R], 917, -1, 0
OFFSET[R], 927, 1, 148
SVTCA[Y]
CALL[], 39, 10, 1, 1, 97, 86
SHC[2], 2
SHC[2], 3
CALL[], 63, 45, 1, 1, 48, 86
SHC[2], 4
SVTCA[X]
CALL[], 42, 60, 5, 32, 15, 87
SHC[2], 2
SHC[2], 3
CALL[], 63, 66, 42, 32, 60, 87
SHC[2], 4

    </glyphProgram>

    <glyphProgram name="uni022C">
/* VTTTalk Unicode 0x22c */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 120, 0, 0
OFFSET[R], 950, -10, 166
OFFSET[R], 927, -5, 313
SVTCA[Y]
CALL[], 42, 10, 1, 1, 113, 86
SHC[2], 2
CALL[], 62, 54, 1, 1, 29, 86
SHC[2], 3
SVTCA[X]
CALL[], 51, 39, 5, 32, 15, 87
SHC[2], 2
CALL[], 62, 65, 51, 31, 39, 87
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="uni022D">
/* VTTTalk Unicode 0x22d */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 355, 0, 0
OFFSET[R], 901, -10, 0
OFFSET[R], 927, 0, 179
SVTCA[Y]
CALL[], 43, 10, 1, 1, 107, 86
SHC[2], 2
CALL[], 63, 55, 1, 1, 61, 86
SHC[2], 3
SVTCA[X]
CALL[], 52, 40, 5, 33, 15, 87
SHC[2], 2
CALL[], 63, 66, 52, 31, 40, 87
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="uni0230">
/* VTTTalk Unicode 0x230 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 120, 0, 0
OFFSET[R], 918, -6, 140
OFFSET[R], 927, -2, 278
SVTCA[Y]
CALL[], 38, 10, 1, 1, 66, 86
SHC[2], 2
CALL[], 51, 44, 1, 1, 47, 86
SHC[2], 3
SVTCA[X]
CALL[], 41, 48, 5, 32, 15, 87
SHC[2], 2
CALL[], 51, 54, 41, 32, 48, 87
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="uni0231">
/* VTTTalk Unicode 0x231 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 355, 0, 0
OFFSET[R], 918, -5, 0
OFFSET[R], 927, 0, 148
SVTCA[Y]
CALL[], 39, 10, 1, 1, 86, 86
SHC[2], 2
CALL[], 52, 45, 1, 1, 57, 86
SHC[2], 3
SVTCA[X]
CALL[], 42, 49, 5, 32, 15, 87
SHC[2], 2
CALL[], 52, 55, 42, 32, 49, 87
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="uni0232">
/* VTTTalk Unicode 0x232 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 216, 0, 0
OFFSET[R], 927, 0, 166
SVTCA[Y]
CALL[], 9, 2, 1, 1, 108, 86
SHC[2], 1
SVTCA[X]
CALL[], 9, 12, 2, 32, 6, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="uni0233">
/* VTTTalk Unicode 0x233 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 453, 0, 0
OFFSET[R], 927, 3, 0
SVTCA[Y]
CALL[], 29, 26, 1, 1, 108, 86
SHC[2], 2
SVTCA[X]
CALL[], 29, 32, 4, 35, 18, 87
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="uni0237">
/* TT glyph 330, char 0x237 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 15, 114
CALL[], 17, 6, 114
CALL[], 17, 16, 106
CALL[], 0, 9, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni024D">
/* TT glyph 402, char 0x24d */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 4
MDAP[R], 13
CALL[], 13, 20, 106
SRP2[], 4
IP[], 0
MDAP[R], 0
CALL[], 0, 1, 106
SRP1[], 13
SHP[1], 6
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0259">
/* TT glyph 298, char 0x259 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 10, 11, 114
CALL[], 0, 7, 114
CALL[], 0, 24, 106
SRP2[], 10
IP[], 35
MDAP[R], 35
CALL[], 35, 18, 106
CALL[], 10, 40, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni027B">
/* TT glyph 399, char 0x27b */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 24
IP[], 10
MDAP[R], 10
CALL[], 10, 18, 106
CALL[], 0, 30, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0298">
/* TT glyph 260, char 0x298 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 10
CALL[], 10, 29, 106
CALL[], 0, 20, 106
SRP1[], 10
SHP[1], 44
SRP1[], 0
SHP[1], 38
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni029A">
/* TT glyph 296, char 0x29a */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 16
CALL[], 16, 32, 106
SRP2[], 0
IP[], 49
MDAP[R], 49
CALL[], 49, 41, 106
CALL[], 0, 24, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni02B9">
/* VTTTalk Unicode 0x2b9 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 854, 0, 0

    </glyphProgram>

    <glyphProgram name="uni02BA">
/* VTTTalk Unicode 0x2ba */
/* ACT generated Sun Apr 27 04:23:05 2025 */

OFFSET[R], 854, 70, 0
OFFSET[R], 854, -60, 0


    </glyphProgram>

    <glyphProgram name="uni02BB">
/* TT glyph 881, char 0x2bb */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 12
MDAP[R], 0
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni02BC">
/* TT glyph 880, char 0x2bc */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 13
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni02BE">
/* TT glyph 887, char 0x2be */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 10
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni02BF">
/* TT glyph 886, char 0x2bf */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 8
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni02C8">
/* TT glyph 890, char 0x2c8 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 2
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni02C9">
/* TT glyph 883, char 0x2c9 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
CALL[], 1, 16, 114
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni02CA">
/* TT glyph 888, char 0x2ca */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 1
MDAP[R], 2
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni02CB">
/* TT glyph 884, char 0x2cb */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 2
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni02CC">
/* TT glyph 889, char 0x2cc */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 2
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0302">
/* TT glyph 897, char 0x302 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 2
SHP[2], 5
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0302.case">
/* TT glyph 935, char 0xffff */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 2
SHP[2], 5
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni03020300">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

OFFSET[R], 897, 8, 0
OFFSET[R], 919, 130, 145


    </glyphProgram>

    <glyphProgram name="uni03020300.case">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 935, 0, 0
OFFSET[R], 943, -50, 138

    </glyphProgram>

    <glyphProgram name="uni03020301">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

OFFSET[R], 897, 6, 0
OFFSET[R], 920, 137, 109


    </glyphProgram>

    <glyphProgram name="uni03020301.case">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 935, 0, 0
OFFSET[R], 944, 174, 106

    </glyphProgram>

    <glyphProgram name="uni03020303">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

OFFSET[R], 897, 9, 0
USEMYMETRICS[]
OFFSET[R], 950, 0, 141

    </glyphProgram>

    <glyphProgram name="uni03020303.case">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 935, 0, 0
OFFSET[R], 950, -10, 250

    </glyphProgram>

    <glyphProgram name="uni03020309">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

OFFSET[R], 897, 2, 0
OFFSET[R], 903, 137, 100


    </glyphProgram>

    <glyphProgram name="uni03020309.case">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 935, 0, 0
OFFSET[R], 903, 134, 226

    </glyphProgram>

    <glyphProgram name="uni0304">
/* VTTTalk Unicode 0x304 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

OFFSET[R], 927, 0, 0


    </glyphProgram>

    <glyphProgram name="uni0306">
/* TT glyph 899, char 0x306 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 5
MDAP[R], 0
CALL[], 5, 12, 106
SRP1[], 0
SHP[1], 9
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0306.case">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

OFFSET[R], 899, -8, 133


    </glyphProgram>

    <glyphProgram name="uni03060300">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 899, 0, 0
OFFSET[R], 919, 8, 131

    </glyphProgram>

    <glyphProgram name="uni03060301">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 899, 0, 0
OFFSET[R], 920, 8, 116

    </glyphProgram>

    <glyphProgram name="uni03060303">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 899, 0, 0
OFFSET[R], 950, -1, 119


    </glyphProgram>

    <glyphProgram name="uni03060309">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 899, 0, 0
OFFSET[R], 903, 17, 127


    </glyphProgram>

    <glyphProgram name="uni0307">
/* VTTTalk Unicode 0x307 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

OFFSET[R], 918, 0, 0


    </glyphProgram>

    <glyphProgram name="uni0307.case">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

OFFSET[R], 918, -5, 140


    </glyphProgram>

    <glyphProgram name="uni0308">
/* VTTTalk Unicode 0x308 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

OFFSET[R], 917, 0, 0


    </glyphProgram>

    <glyphProgram name="uni0308.case">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

OFFSET[R], 941, 0, 0

    </glyphProgram>

    <glyphProgram name="uni030A">
/* VTTTalk Unicode 0x30a */
/* ACT generated Sun Apr 27 04:23:05 2025 */

OFFSET[R], 925, 0, 0


    </glyphProgram>

    <glyphProgram name="uni030A.case">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

OFFSET[R], 948, 0, 0

    </glyphProgram>

    <glyphProgram name="uni030B">
/* VTTTalk Unicode 0x30b */
/* ACT generated Sun Apr 27 04:23:05 2025 */

OFFSET[R], 921, 0, 0


    </glyphProgram>

    <glyphProgram name="uni030B.case">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

OFFSET[R], 945, 0, 0

    </glyphProgram>

    <glyphProgram name="uni030C">
/* TT glyph 898, char 0x30c */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 4
MDAP[R], 0
SHP[2], 2
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni030C.alt">
/* TT glyph 896, char 0xffff */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 7
MDAP[R], 0
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni030C.case">
/* TT glyph 936, char 0xffff */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 2
MDAP[R], 0
SHP[2], 5
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni030F">
/* VTTTalk Unicode 0x30f */
/* ACT generated Sun Apr 27 04:23:05 2025 */

OFFSET[R], 919, -59, 0
OFFSET[R], 919, 101, 0

    </glyphProgram>

    <glyphProgram name="uni0311">
/* TT glyph 905, char 0x311 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 5
CALL[], 5, 12, 106
SRP1[], 0
SHP[1], 9
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0312">
/* TT glyph 906, char 0x312 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 13
MDAP[R], 0
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni031B">
/* TT glyph 907, char 0x31b */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 4
MDAP[R], 0
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni031B.case">
/* TT glyph 940, char 0xffff */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 5
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0324">
/* VTTTalk Unicode 0x324 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

OFFSET[R], 917, 0, -730

    </glyphProgram>

    <glyphProgram name="uni0326">
/* TT glyph 910, char 0x326 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 12
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0327">
/* VTTTalk Unicode 0x327 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

OFFSET[R], 928, 0, 0


    </glyphProgram>

    <glyphProgram name="uni0328">
/* TT glyph 912, char 0x328 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 1
MDAP[R], 10
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni032E">
/* VTTTalk Unicode 0x32e */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 899, 0, -713


    </glyphProgram>

    <glyphProgram name="uni0331">
/* VTTTalk Unicode 0x331 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

OFFSET[R], 927, 0, -720

    </glyphProgram>

    <glyphProgram name="uni0335">
/* TT glyph 915, char 0x335 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0336">
/* VTTTalk Unicode 0x336 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

OFFSET[R], 562, 0, 0


    </glyphProgram>

    <glyphProgram name="uni0375">
/* TT glyph 879, char 0x375 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 2
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni1E08">
/* VTTTalk Unicode 0x1e08 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 29, 0, 0
OFFSET[R], 928, 9, 0
OFFSET[R], 944, 1, 0
SVTCA[Y]
CALL[], 52, 0, 0, 0, 10, 86
SHC[2], 1
CALL[], 61, 11, 1, 1, 32, 86
SHC[2], 2
SVTCA[X]
CALL[], 39, 58, 5, 37, 14, 87
SHC[2], 1
CALL[], 62, 64, 5, 34, 14, 87
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="uni1E09">
/* VTTTalk Unicode 0x1e09 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 261, 0, 0
OFFSET[R], 928, 15, 0
OFFSET[R], 920, 25, -15
SVTCA[Y]
CALL[], 52, 0, 0, 0, 11, 86
SHC[2], 1
CALL[], 61, 10, 1, 1, 41, 86
SHC[2], 2
SVTCA[X]
CALL[], 39, 58, 5, 38, 13, 87
SHC[2], 1
CALL[], 62, 64, 5, 41, 13, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="uni1E0C">
/* VTTTalk Unicode 0x1e0c */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 36, 0, 0
OFFSET[R], 918, -5, -700
SVTCA[Y]
CALL[], 34, 0, 1, 1, -43, 86
SHC[2], 2
SVTCA[X]
CALL[], 31, 38, 0, 31, 11, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="uni1E0D">
/* VTTTalk Unicode 0x1e0d */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 268, 0, 0
OFFSET[R], 918, -5, -700
SVTCA[Y]
CALL[], 57, 0, 1, 1, -34, 86
SHC[2], 2
SVTCA[X]
CALL[], 54, 61, 5, 33, 17, 87
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="uni1E0E">
/* VTTTalk Unicode 0x1e0e */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 36, 0, 0
OFFSET[R], 927, 2, -720
SVTCA[Y]
CALL[], 29, 0, 1, 1, -98, 86
SHC[2], 2
SVTCA[X]
CALL[], 28, 31, 0, 31, 11, 87
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="uni1E0F">
/* VTTTalk Unicode 0x1e0f */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 268, 0, 0
OFFSET[R], 927, 2, -720
SVTCA[Y]
CALL[], 52, 0, 1, 1, -89, 86
SHC[2], 2
SVTCA[X]
CALL[], 51, 54, 5, 34, 17, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="uni1E14">
/* VTTTalk Unicode 0x1e14 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 42, 0, 0
OFFSET[R], 927, 9, 166
OFFSET[R], 943, -55, 154
SVTCA[Y]
CALL[], 12, 1, 1, 1, 107, 86
SHC[2], 1
CALL[], 16, 13, 1, 1, 27, 86
SHC[2], 2
SVTCA[X]
CALL[], 12, 15, 0, 34, 3, 87
SHC[2], 1
CALL[], 17, 19, 12, 24, 15, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="uni1E15">
/* VTTTalk Unicode 0x1e15 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 274, 0, 0
OFFSET[R], 927, 10, 0
OFFSET[R], 919, -1, 154
SVTCA[Y]
CALL[], 45, 10, 1, 1, 97, 86
SHC[2], 2
CALL[], 49, 46, 1, 1, 40, 86
SHC[2], 3
SVTCA[X]
CALL[], 45, 48, 5, 34, 15, 87
SHC[2], 2
CALL[], 50, 52, 45, 23, 48, 87
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="uni1E16">
/* VTTTalk Unicode 0x1e16 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 42, 0, 0
OFFSET[R], 927, 9, 166
OFFSET[R], 944, -10, 154
SVTCA[Y]
CALL[], 12, 1, 1, 1, 107, 86
SHC[2], 1
CALL[], 16, 13, 1, 1, 27, 86
SHC[2], 2
SVTCA[X]
CALL[], 12, 15, 0, 34, 3, 87
SHC[2], 1
CALL[], 17, 19, 12, 32, 15, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="uni1E17">
/* VTTTalk Unicode 0x1e17 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 274, 0, 0
OFFSET[R], 927, 10, 0
OFFSET[R], 920, -1, 139
SVTCA[Y]
CALL[], 45, 10, 1, 1, 97, 86
SHC[2], 2
CALL[], 49, 46, 1, 1, 40, 86
SHC[2], 3
SVTCA[X]
CALL[], 45, 48, 5, 34, 15, 87
SHC[2], 2
CALL[], 50, 52, 45, 38, 48, 87
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="uni1E1C">
/* VTTTalk Unicode 0x1e1c */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 42, 0, 0
OFFSET[R], 928, -21, 0
OFFSET[R], 899, 1, 133
SVTCA[Y]
CALL[], 28, 0, 1, 0, 0, 86
SHC[2], 1
CALL[], 42, 1, 1, 1, 47, 86
SHC[2], 2
SVTCA[X]
CALL[], 15, 34, 0, 33, 3, 87
SHC[2], 1
CALL[], 45, 38, 0, 34, 3, 87
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="uni1E1D">
/* VTTTalk Unicode 0x1e1d */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 274, 0, 0
OFFSET[R], 928, 9, 0
OFFSET[R], 899, 2, 0
SVTCA[Y]
CALL[], 61, 0, 0, 0, 10, 86
SHC[2], 2
CALL[], 75, 10, 1, 1, 70, 86
SHC[2], 3
SVTCA[X]
CALL[], 48, 67, 5, 38, 15, 87
SHC[2], 2
CALL[], 78, 71, 5, 34, 15, 87
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="uni1E20">
/* VTTTalk Unicode 0x1e20 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 67, 0, 0
OFFSET[R], 927, 24, 166
SVTCA[Y]
CALL[], 45, 11, 1, 1, 101, 86
SHC[2], 1
SVTCA[X]
CALL[], 45, 48, 4, 36, 42, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni1E21">
/* VTTTalk Unicode 0x1e21 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 301, 0, 0
OFFSET[R], 927, -24, 0
SVTCA[Y]
CALL[], 96, 64, 1, 1, 91, 86
SHC[2], 4
SVTCA[X]
CALL[], 96, 99, 5, 30, 51, 87
SHC[2], 4


    </glyphProgram>

    <glyphProgram name="uni1E24">
/* VTTTalk Unicode 0x1e24 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 74, 0, 0
OFFSET[R], 918, -5, -700
SVTCA[Y]
CALL[], 18, 8, 1, 1, -44, 86
SHC[2], 1
SVTCA[X]
CALL[], 15, 22, 0, 33, 7, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="uni1E25">
/* VTTTalk Unicode 0x1e25 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 308, 0, 0
OFFSET[R], 918, -5, -700
SVTCA[Y]
CALL[], 32, 13, 1, 1, -44, 86
SHC[2], 1
SVTCA[X]
CALL[], 29, 36, 0, 31, 12, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni1E2A">
/* VTTTalk Unicode 0x1e2a */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 74, 0, 0
OFFSET[R], 899, 2, -713
SVTCA[Y]
CALL[], 12, 8, 1, 1, -59, 86
SHC[2], 1
SVTCA[X]
CALL[], 20, 13, 0, 34, 7, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni1E2B">
/* VTTTalk Unicode 0x1e2b */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 308, 0, 0
OFFSET[R], 899, 2, -713
SVTCA[Y]
CALL[], 26, 13, 1, 1, -59, 86
SHC[2], 1
SVTCA[X]
CALL[], 34, 27, 0, 33, 12, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="uni1E2E">
/* VTTTalk Unicode 0x1e2e */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 79, 0, 0
OFFSET[R], 941, -12, 0
OFFSET[R], 944, -32, 142
SVTCA[Y]
CALL[], 12, 5, 1, 1, 65, 86
SHC[2], 1
SHC[2], 2
CALL[], 36, 18, 1, 0, 13, 86
SHC[2], 3
SVTCA[X]
CALL[], 15, 33, 0, 31, 11, 87
SHC[2], 1
SHC[2], 2
CALL[], 37, 39, 15, 32, 33, 87
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="uni1E2F">
/* VTTTalk Unicode 0x1e2f */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 314, 0, 0
OFFSET[R], 917, -1, 0
OFFSET[R], 920, -10, 133
SVTCA[Y]
CALL[], 10, 5, 1, 1, 107, 86
SHC[2], 1
SHC[2], 2
CALL[], 34, 16, 1, 0, -10, 86
SHC[2], 3
SVTCA[X]
CALL[], 13, 31, 0, 33, 9, 87
SHC[2], 1
SHC[2], 2
CALL[], 35, 37, 13, 38, 31, 87
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="uni1E36">
/* VTTTalk Unicode 0x1e36 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 99, 0, 0
OFFSET[R], 918, -5, -700
SVTCA[Y]
CALL[], 12, 0, 1, 1, -44, 86
SHC[2], 1
SVTCA[X]
CALL[], 9, 16, 0, 31, 5, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni1E37">
/* VTTTalk Unicode 0x1e37 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 335, 0, 0
OFFSET[R], 918, -5, -700
SVTCA[Y]
CALL[], 16, 0, 1, 1, -44, 86
SHC[2], 1
SVTCA[X]
CALL[], 13, 20, 0, 32, 9, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni1E3A">
/* VTTTalk Unicode 0x1e3a */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 99, 0, 0
OFFSET[R], 927, 2, -720
SVTCA[Y]
CALL[], 7, 0, 1, 1, -99, 86
SHC[2], 1
SVTCA[X]
CALL[], 6, 9, 0, 32, 5, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="uni1E3B">
/* VTTTalk Unicode 0x1e3b */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 335, 0, 0
OFFSET[R], 927, 2, -720
SVTCA[Y]
CALL[], 11, 0, 1, 1, -99, 86
SHC[2], 1
SVTCA[X]
CALL[], 10, 13, 0, 32, 9, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="uni1E42">
/* VTTTalk Unicode 0x1e42 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 109, 0, 0
OFFSET[R], 918, -5, -700
SVTCA[Y]
CALL[], 19, 7, 1, 1, -44, 86
SHC[2], 1
SVTCA[X]
CALL[], 16, 23, 0, 32, 6, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni1E43">
/* VTTTalk Unicode 0x1e43 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 344, 0, 0
OFFSET[R], 918, -5, -700
SVTCA[Y]
CALL[], 52, 34, 1, 1, -44, 86
SHC[2], 1
SVTCA[X]
CALL[], 49, 56, 0, 31, 22, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni1E44">
/* VTTTalk Unicode 0x1e44 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 111, 0, 0
OFFSET[R], 918, -6, 140
SVTCA[Y]
CALL[], 10, 4, 1, 1, 70, 86
SHC[2], 1
SVTCA[X]
CALL[], 13, 20, 0, 32, 6, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni1E45">
/* VTTTalk Unicode 0x1e45 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 346, 0, 0
OFFSET[R], 918, 10, 0
SVTCA[Y]
CALL[], 25, 7, 1, 1, 85, 86
SHC[2], 1
SVTCA[X]
CALL[], 28, 35, 0, 34, 12, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="uni1E46">
/* VTTTalk Unicode 0x1e46 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 111, 0, 0
OFFSET[R], 918, -5, -700
SVTCA[Y]
CALL[], 16, 7, 1, 1, -44, 86
SHC[2], 1
SVTCA[X]
CALL[], 13, 20, 0, 32, 6, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni1E47">
/* VTTTalk Unicode 0x1e47 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 346, 0, 0
OFFSET[R], 918, 5, -700
SVTCA[Y]
CALL[], 31, 13, 1, 1, -44, 86
SHC[2], 1
SVTCA[X]
CALL[], 28, 35, 0, 33, 12, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="uni1E48">
/* VTTTalk Unicode 0x1e48 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 111, 0, 0
OFFSET[R], 927, 2, -720
SVTCA[Y]
CALL[], 11, 0, 1, 1, -99, 86
SHC[2], 1
SVTCA[X]
CALL[], 10, 13, 0, 33, 6, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="uni1E49">
/* VTTTalk Unicode 0x1e49 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 346, 0, 0
OFFSET[R], 927, 12, -720
SVTCA[Y]
CALL[], 26, 0, 1, 1, -99, 86
SHC[2], 1
SVTCA[X]
CALL[], 25, 28, 0, 34, 12, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="uni1E4C">
/* VTTTalk Unicode 0x1e4c */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 120, 0, 0
OFFSET[R], 901, -6, 114
OFFSET[R], 944, -19, 155
SVTCA[Y]
CALL[], 42, 10, 1, 1, 61, 86
SHC[2], 2
CALL[], 62, 54, 1, 1, 18, 86
SHC[2], 3
SVTCA[X]
CALL[], 51, 39, 5, 33, 15, 87
SHC[2], 2
CALL[], 63, 65, 51, 30, 39, 87
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="uni1E4D">
/* VTTTalk Unicode 0x1e4d */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 355, 0, 0
OFFSET[R], 901, -10, 0
OFFSET[R], 920, -11, 164
SVTCA[Y]
CALL[], 43, 10, 1, 1, 107, 86
SHC[2], 2
CALL[], 63, 55, 1, 0, 3, 86
SHC[2], 3
SVTCA[X]
CALL[], 52, 40, 5, 33, 15, 87
SHC[2], 2
CALL[], 64, 66, 52, 36, 40, 87
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="uni1E4E">
/* VTTTalk Unicode 0x1e4e */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 120, 0, 0
OFFSET[R], 901, -6, 114
OFFSET[R], 941, -1, 155
SVTCA[Y]
CALL[], 42, 10, 1, 1, 61, 86
SHC[2], 2
CALL[], 62, 54, 1, 1, 46, 86
SHC[2], 3
SHC[2], 4
SVTCA[X]
CALL[], 51, 39, 5, 33, 15, 87
SHC[2], 2
CALL[], 65, 83, 51, 30, 39, 87
SHC[2], 3
SHC[2], 4

    </glyphProgram>

    <glyphProgram name="uni1E4F">
/* VTTTalk Unicode 0x1e4f */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 355, 0, 0
OFFSET[R], 901, -10, 0
OFFSET[R], 917, -1, 179
SVTCA[Y]
CALL[], 43, 10, 1, 1, 107, 86
SHC[2], 2
CALL[], 63, 55, 1, 1, 60, 86
SHC[2], 3
SHC[2], 4
SVTCA[X]
CALL[], 52, 40, 5, 33, 15, 87
SHC[2], 2
CALL[], 66, 84, 52, 31, 40, 87
SHC[2], 3
SHC[2], 4

    </glyphProgram>

    <glyphProgram name="uni1E50">
/* VTTTalk Unicode 0x1e50 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 120, 0, 0
OFFSET[R], 927, 0, 166
OFFSET[R], 943, -64, 154
SVTCA[Y]
CALL[], 38, 10, 1, 1, 104, 86
SHC[2], 2
CALL[], 42, 39, 1, 1, 27, 86
SHC[2], 3
SVTCA[X]
CALL[], 38, 41, 5, 32, 15, 87
SHC[2], 2
CALL[], 43, 45, 38, 24, 41, 87
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="uni1E51">
/* VTTTalk Unicode 0x1e51 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 355, 0, 0
OFFSET[R], 927, 0, 0
OFFSET[R], 919, -11, 154
SVTCA[Y]
CALL[], 39, 10, 1, 1, 98, 86
SHC[2], 2
CALL[], 43, 40, 1, 1, 40, 86
SHC[2], 3
SVTCA[X]
CALL[], 39, 42, 5, 32, 15, 87
SHC[2], 2
CALL[], 44, 46, 39, 23, 42, 87
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="uni1E52">
/* VTTTalk Unicode 0x1e52 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 120, 0, 0
OFFSET[R], 927, 0, 166
OFFSET[R], 944, -19, 154
SVTCA[Y]
CALL[], 38, 10, 1, 1, 104, 86
SHC[2], 2
CALL[], 42, 39, 1, 1, 27, 86
SHC[2], 3
SVTCA[X]
CALL[], 38, 41, 5, 32, 15, 87
SHC[2], 2
CALL[], 43, 45, 38, 32, 41, 87
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="uni1E53">
/* VTTTalk Unicode 0x1e53 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 355, 0, 0
OFFSET[R], 927, 0, 0
OFFSET[R], 920, -11, 139
SVTCA[Y]
CALL[], 39, 10, 1, 1, 98, 86
SHC[2], 2
CALL[], 43, 40, 1, 1, 40, 86
SHC[2], 3
SVTCA[X]
CALL[], 39, 42, 5, 32, 15, 87
SHC[2], 2
CALL[], 44, 46, 39, 38, 42, 87
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="uni1E5A">
/* VTTTalk Unicode 0x1e5a */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 158, 0, 0
OFFSET[R], 918, -5, -700
SVTCA[Y]
CALL[], 33, 12, 1, 1, -44, 86
SHC[2], 2
SVTCA[X]
CALL[], 30, 37, 0, 32, 6, 87
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="uni1E5B">
/* VTTTalk Unicode 0x1e5b */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 393, 0, 0
OFFSET[R], 918, 15, -700
SVTCA[Y]
CALL[], 30, 0, 1, 1, -43, 86
SHC[2], 1
SVTCA[X]
CALL[], 27, 34, 0, 28, 12, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="uni1E5E">
/* VTTTalk Unicode 0x1e5e */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 158, 0, 0
OFFSET[R], 927, 2, -720
SVTCA[Y]
CALL[], 28, 0, 1, 1, -99, 86
SHC[2], 2
SVTCA[X]
CALL[], 27, 30, 0, 32, 6, 87
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="uni1E5F">
/* VTTTalk Unicode 0x1e5f */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 393, 0, 0
OFFSET[R], 927, 22, -720
SVTCA[Y]
CALL[], 25, 0, 1, 1, -98, 86
SHC[2], 1
SVTCA[X]
CALL[], 24, 27, 0, 29, 12, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="uni1E60">
/* VTTTalk Unicode 0x1e60 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 166, 0, 0
OFFSET[R], 918, 5, 140
SVTCA[Y]
CALL[], 55, 27, 1, 1, 62, 86
SHC[2], 1
SVTCA[X]
CALL[], 58, 65, 23, 31, 51, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni1E61">
/* VTTTalk Unicode 0x1e61 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 403, 0, 0
OFFSET[R], 918, 0, 0
SVTCA[Y]
CALL[], 51, 26, 1, 1, 85, 86
SHC[2], 1
SVTCA[X]
CALL[], 54, 61, 22, 31, 47, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni1E62">
/* VTTTalk Unicode 0x1e62 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 166, 0, 0
OFFSET[R], 918, -8, -700
SVTCA[Y]
CALL[], 61, 0, 1, 1, -34, 86
SHC[2], 1
SVTCA[X]
CALL[], 58, 65, 23, 29, 51, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni1E63">
/* VTTTalk Unicode 0x1e63 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 403, 0, 0
OFFSET[R], 918, -16, -700
SVTCA[Y]
CALL[], 57, 0, 1, 1, -34, 86
SHC[2], 1
SVTCA[X]
CALL[], 54, 61, 22, 28, 47, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="uni1E64">
/* VTTTalk Unicode 0x1e64 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 166, 0, 0
OFFSET[R], 944, -8, 0
OFFSET[R], 918, 5, 258
SVTCA[Y]
CALL[], 55, 27, 1, 1, 29, 86
SHC[2], 1
CALL[], 59, 57, 1, 1, 20, 86
SHC[2], 2
SVTCA[X]
CALL[], 56, 58, 23, 32, 51, 87
SHC[2], 1
CALL[], 62, 69, 56, 32, 58, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="uni1E65">
/* VTTTalk Unicode 0x1e65 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 403, 0, 0
OFFSET[R], 920, 0, -15
OFFSET[R], 918, 25, 152
SVTCA[Y]
CALL[], 51, 26, 1, 1, 39, 86
SHC[2], 1
CALL[], 55, 53, 1, 1, 23, 86
SHC[2], 2
SVTCA[X]
CALL[], 52, 54, 22, 36, 47, 87
SHC[2], 1
CALL[], 58, 65, 52, 29, 54, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="uni1E66">
/* TT glyph 170, char 0x1e66 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 68
IP[], 27
MDAP[R], 27
CALL[], 27, 35, 106
CALL[], 0, 7, 106
SRP1[], 68
SHP[1], 55
SRP1[], 27
SHP[1], 57
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni1E67">
/* VTTTalk Unicode 0x1e67 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 403, 0, 0
OFFSET[R], 898, 0, 0
OFFSET[R], 918, 1, 147
SVTCA[Y]
CALL[], 56, 26, 1, 1, 46, 86
SHC[2], 1
CALL[], 58, 51, 1, 0, 12, 86
SHC[2], 2
SVTCA[X]
CALL[], 57, 54, 22, 31, 47, 87
SHC[2], 1
CALL[], 61, 68, 57, 32, 54, 87
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="uni1E68">
/* VTTTalk Unicode 0x1e68 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 166, 0, 0
OFFSET[R], 918, -8, -700
OFFSET[R], 918, 5, 140
SVTCA[Y]
CALL[], 61, 0, 1, 1, -34, 86
SHC[2], 1
CALL[], 68, 27, 1, 1, 62, 86
SHC[2], 2
SVTCA[X]
CALL[], 58, 65, 23, 29, 51, 87
SHC[2], 1
CALL[], 71, 78, 23, 31, 51, 87
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="uni1E69">
/* VTTTalk Unicode 0x1e69 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 403, 0, 0
OFFSET[R], 918, -16, -700
OFFSET[R], 918, 0, 0
SVTCA[Y]
CALL[], 57, 0, 1, 1, -34, 86
SHC[2], 1
CALL[], 64, 26, 1, 1, 85, 86
SHC[2], 2
SVTCA[X]
CALL[], 54, 61, 22, 28, 47, 87
SHC[2], 1
CALL[], 67, 74, 22, 31, 47, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="uni1E6C">
/* VTTTalk Unicode 0x1e6c */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 179, 0, 0
OFFSET[R], 918, -5, -700
SVTCA[Y]
CALL[], 14, 0, 1, 1, -44, 86
SHC[2], 1
SVTCA[X]
CALL[], 11, 18, 2, 32, 5, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni1E6D">
/* VTTTalk Unicode 0x1e6d */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 415, 0, 0
OFFSET[R], 918, -5, -700
SVTCA[Y]
CALL[], 31, 0, 1, 1, -37, 86
SHC[2], 2
SVTCA[X]
CALL[], 28, 35, 21, 35, 24, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="uni1E6E">
/* VTTTalk Unicode 0x1e6e */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 179, 0, 0
OFFSET[R], 927, 2, -720
SVTCA[Y]
CALL[], 9, 0, 1, 1, -99, 86
SHC[2], 1
SVTCA[X]
CALL[], 8, 11, 2, 33, 5, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="uni1E6F">
/* VTTTalk Unicode 0x1e6f */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 415, 0, 0
OFFSET[R], 927, 2, -720
SVTCA[Y]
CALL[], 26, 0, 1, 1, -92, 86
SHC[2], 2
SVTCA[X]
CALL[], 25, 28, 21, 35, 24, 87
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="uni1E78">
/* VTTTalk Unicode 0x1e78 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 186, 0, 0
OFFSET[R], 901, -6, 114
OFFSET[R], 944, -19, 155
SVTCA[Y]
CALL[], 25, 15, 1, 1, 65, 86
SHC[2], 1
CALL[], 45, 37, 1, 1, 18, 86
SHC[2], 2
SVTCA[X]
CALL[], 34, 22, 4, 33, 17, 87
SHC[2], 1
CALL[], 46, 48, 34, 30, 22, 87
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="uni1E79">
/* VTTTalk Unicode 0x1e79 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 423, 0, 0
OFFSET[R], 901, -10, 0
OFFSET[R], 920, -11, 164
SVTCA[Y]
CALL[], 40, 21, 1, 1, 117, 86
SHC[2], 1
CALL[], 60, 52, 1, 0, 3, 86
SHC[2], 2
SVTCA[X]
CALL[], 49, 37, 6, 33, 23, 87
SHC[2], 1
CALL[], 61, 63, 49, 36, 37, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="uni1E7A">
/* VTTTalk Unicode 0x1e7a */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 186, 0, 0
OFFSET[R], 927, 0, 166
OFFSET[R], 941, -1, 154
SVTCA[Y]
CALL[], 21, 5, 1, 1, 108, 86
SHC[2], 1
CALL[], 25, 22, 1, 1, 55, 86
SHC[2], 2
SHC[2], 3
SVTCA[X]
CALL[], 21, 24, 4, 32, 17, 87
SHC[2], 1
CALL[], 28, 46, 21, 32, 24, 87
SHC[2], 2
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="uni1E7B">
/* VTTTalk Unicode 0x1e7b */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 423, 0, 0
OFFSET[R], 927, 0, 0
OFFSET[R], 917, -1, 154
SVTCA[Y]
CALL[], 36, 7, 1, 1, 108, 86
SHC[2], 1
CALL[], 40, 37, 1, 1, 97, 86
SHC[2], 2
SHC[2], 3
SVTCA[X]
CALL[], 36, 39, 6, 32, 23, 87
SHC[2], 1
CALL[], 43, 61, 36, 32, 39, 87
SHC[2], 2
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="uni1E8E">
/* VTTTalk Unicode 0x1e8e */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 216, 0, 0
OFFSET[R], 918, -6, 140
SVTCA[Y]
CALL[], 9, 5, 1, 1, 70, 86
SHC[2], 1
SVTCA[X]
CALL[], 12, 19, 2, 32, 6, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="uni1E8F">
/* VTTTalk Unicode 0x1e8f */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 453, 0, 0
OFFSET[R], 918, -2, 0
SVTCA[Y]
CALL[], 29, 17, 1, 1, 96, 86
SHC[2], 2
SVTCA[X]
CALL[], 32, 39, 4, 35, 18, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="uni1E92">
/* VTTTalk Unicode 0x1e92 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 226, 0, 0
OFFSET[R], 918, 15, -700
SVTCA[Y]
CALL[], 16, 0, 1, 1, -44, 86
SHC[2], 1
SVTCA[X]
CALL[], 13, 20, 0, 34, 9, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni1E93">
/* VTTTalk Unicode 0x1e93 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 463, 0, 0
OFFSET[R], 918, -5, -700
SVTCA[Y]
CALL[], 16, 0, 1, 1, -44, 86
SHC[2], 1
SVTCA[X]
CALL[], 13, 20, 0, 32, 9, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni1E97">
/* VTTTalk Unicode 0x1e97 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 415, 0, 0
OFFSET[R], 917, -16, 126
SVTCA[Y]
CALL[], 25, 7, 1, 1, 107, 86
SHC[2], 2
SHC[2], 3
SVTCA[X]
CALL[], 28, 46, 21, 32, 24, 87
SHC[2], 2
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="uni1E9E">
/* TT glyph 177, char 0x1e9e */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 37
CALL[], 37, 24, 106
SRP2[], 0
IP[], 18
MDAP[R], 18
CALL[], 18, 43, 106
CALL[], 0, 8, 106
SHP[1], 31
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni1EA0">
/* VTTTalk Unicode 0x1ea0 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 918, -5, -700
SVTCA[Y]
CALL[], 17, 10, 1, 1, -44, 86
SHC[2], 2
SVTCA[X]
CALL[], 14, 21, 6, 32, 9, 87
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="uni1EA1">
/* VTTTalk Unicode 0x1ea1 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 232, 0, 0
OFFSET[R], 918, -5, -700
SVTCA[Y]
CALL[], 66, 0, 1, 1, -33, 86
SHC[2], 1
SVTCA[X]
CALL[], 63, 70, 4, 32, 53, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="uni1EA2">
/* VTTTalk Unicode 0x1ea2 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 903, 15, 166
SVTCA[Y]
CALL[], 19, 7, 1, 1, 55, 86
SHC[2], 2
SVTCA[X]
CALL[], 32, 11, 6, 32, 9, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="uni1EA3">
/* VTTTalk Unicode 0x1ea3 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 232, 0, 0
OFFSET[R], 903, 15, 0
SVTCA[Y]
CALL[], 68, 47, 1, 1, 56, 86
SHC[2], 1
SVTCA[X]
CALL[], 81, 60, 4, 33, 53, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni1EA4">
/* VTTTalk Unicode 0x1ea4 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 935, -1, 0
OFFSET[R], 944, 173, 106
SVTCA[Y]
CALL[], 11, 7, 1, 1, 21, 86
SHC[2], 2
CALL[], 18, 13, 1, 0, -25, 86
SHC[2], 3
SVTCA[X]
CALL[], 12, 15, 6, 32, 9, 87
SHC[2], 2
CALL[], 19, 15, 1, 1, -61, 86
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="uni1EA5">
/* VTTTalk Unicode 0x1ea5 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 232, 0, 0
OFFSET[R], 897, 0, 0
OFFSET[R], 920, 131, 109
SVTCA[Y]
CALL[], 60, 47, 1, 1, 44, 86
SHC[2], 1
CALL[], 67, 66, 0, 0, 10, 86
SHC[2], 2
SVTCA[X]
CALL[], 61, 64, 4, 32, 53, 87
SHC[2], 1
CALL[], 68, 64, 1, 1, -54, 86
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="uni1EA6">
/* VTTTalk Unicode 0x1ea6 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 935, 0, 0
OFFSET[R], 943, -50, 138
SVTCA[Y]
CALL[], 11, 7, 1, 1, 21, 86
SHC[2], 2
CALL[], 18, 13, 1, 0, 7, 86
SHC[2], 3
SVTCA[X]
CALL[], 12, 15, 6, 32, 9, 87
SHC[2], 2
CALL[], 19, 21, 12, 29, 15, 87
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="uni1EA7">
/* VTTTalk Unicode 0x1ea7 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 232, 0, 0
OFFSET[R], 897, 2, 0
OFFSET[R], 919, 124, 145
SVTCA[Y]
CALL[], 60, 47, 1, 1, 44, 86
SHC[2], 1
CALL[], 67, 66, 0, 0, 31, 86
SHC[2], 2
SVTCA[X]
CALL[], 61, 64, 4, 33, 53, 87
SHC[2], 1
CALL[], 68, 70, 61, 52, 64, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="uni1EA8">
/* VTTTalk Unicode 0x1ea8 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 935, -4, 0
OFFSET[R], 903, 130, 226
SVTCA[Y]
CALL[], 11, 7, 1, 1, 21, 86
SHC[2], 2
CALL[], 26, 17, 0, 0, 23, 86
SHC[2], 3
SVTCA[X]
CALL[], 12, 15, 6, 31, 9, 87
SHC[2], 2
CALL[], 39, 18, 12, 56, 15, 87
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="uni1EA9">
/* VTTTalk Unicode 0x1ea9 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 232, 0, 0
OFFSET[R], 897, 1, 0
OFFSET[R], 903, 136, 100
SVTCA[Y]
CALL[], 60, 47, 1, 1, 44, 86
SHC[2], 1
CALL[], 75, 66, 0, 0, 2, 86
SHC[2], 2
SVTCA[X]
CALL[], 61, 64, 4, 33, 53, 87
SHC[2], 1
CALL[], 88, 67, 61, 58, 64, 87
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="uni1EAA">
/* VTTTalk Unicode 0x1eaa */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 935, 0, 0
OFFSET[R], 950, -10, 250
SVTCA[Y]
CALL[], 11, 7, 1, 1, 21, 86
SHC[2], 2
CALL[], 22, 13, 1, 1, 33, 86
SHC[2], 3
SVTCA[X]
CALL[], 12, 15, 6, 32, 9, 87
SHC[2], 2
CALL[], 31, 19, 12, 32, 15, 87
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="uni1EAB">
/* VTTTalk Unicode 0x1eab */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 232, 0, 0
OFFSET[R], 897, 1, 0
OFFSET[R], 950, -8, 141
SVTCA[Y]
CALL[], 60, 47, 1, 1, 44, 86
SHC[2], 1
CALL[], 71, 62, 1, 1, 30, 86
SHC[2], 2
SVTCA[X]
CALL[], 61, 64, 4, 33, 53, 87
SHC[2], 1
CALL[], 80, 68, 61, 32, 64, 87
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="uni1EAC">
/* VTTTalk Unicode 0x1eac */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 918, -5, -700
OFFSET[R], 935, 0, 0
SVTCA[Y]
CALL[], 17, 10, 1, 1, -44, 86
SHC[2], 2
CALL[], 24, 7, 1, 1, 21, 86
SHC[2], 3
SVTCA[X]
CALL[], 14, 21, 6, 32, 9, 87
SHC[2], 2
CALL[], 25, 28, 6, 32, 9, 87
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="uni1EAD">
/* VTTTalk Unicode 0x1ead */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 232, 0, 0
OFFSET[R], 918, -5, -700
OFFSET[R], 897, 0, 0
SVTCA[Y]
CALL[], 66, 0, 1, 1, -33, 86
SHC[2], 1
CALL[], 73, 47, 1, 1, 44, 86
SHC[2], 2
SVTCA[X]
CALL[], 63, 70, 4, 32, 53, 87
SHC[2], 1
CALL[], 74, 77, 4, 32, 53, 87
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="uni1EAE">
/* VTTTalk Unicode 0x1eae */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 899, -8, 133
OFFSET[R], 944, 11, 111
SVTCA[Y]
CALL[], 16, 7, 1, 1, 37, 86
SHC[2], 2
CALL[], 27, 20, 1, 1, -16, 86
SHC[2], 3
SVTCA[X]
CALL[], 19, 12, 6, 32, 9, 87
SHC[2], 2
CALL[], 28, 30, 19, 39, 12, 87
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="uni1EAF">
/* VTTTalk Unicode 0x1eaf */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 232, 0, 0
OFFSET[R], 899, -8, 0
OFFSET[R], 920, 0, 116
SVTCA[Y]
CALL[], 65, 47, 1, 1, 71, 86
SHC[2], 1
CALL[], 76, 60, 1, 1, -16, 86
SHC[2], 2
SVTCA[X]
CALL[], 68, 61, 4, 32, 53, 87
SHC[2], 1
CALL[], 77, 79, 68, 40, 61, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="uni1EB0">
/* VTTTalk Unicode 0x1eb0 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 899, -8, 133
OFFSET[R], 943, -64, 164
SVTCA[Y]
CALL[], 16, 7, 1, 1, 37, 86
SHC[2], 2
CALL[], 27, 11, 1, 1, 37, 86
SHC[2], 3
SVTCA[X]
CALL[], 19, 12, 6, 32, 9, 87
SHC[2], 2
CALL[], 28, 30, 19, 25, 12, 87
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="uni1EB1">
/* VTTTalk Unicode 0x1eb1 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 232, 0, 0
OFFSET[R], 899, -8, 0
OFFSET[R], 919, 0, 131
SVTCA[Y]
CALL[], 65, 47, 1, 1, 71, 86
SHC[2], 1
CALL[], 76, 60, 1, 1, -16, 86
SHC[2], 2
SVTCA[X]
CALL[], 68, 61, 4, 32, 53, 87
SHC[2], 1
CALL[], 77, 79, 68, 26, 61, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="uni1EB2">
/* VTTTalk Unicode 0x1eb2 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 899, -8, 133
OFFSET[R], 903, 5, 247
SVTCA[Y]
CALL[], 16, 7, 1, 1, 37, 86
SHC[2], 2
CALL[], 35, 20, 1, 1, -17, 86
SHC[2], 3
SVTCA[X]
CALL[], 19, 12, 6, 32, 9, 87
SHC[2], 2
CALL[], 48, 27, 19, 30, 12, 87
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="uni1EB3">
/* VTTTalk Unicode 0x1eb3 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 232, 0, 0
OFFSET[R], 899, -8, 0
OFFSET[R], 903, 9, 127
SVTCA[Y]
CALL[], 65, 47, 1, 1, 71, 86
SHC[2], 1
CALL[], 84, 69, 1, 0, -4, 86
SHC[2], 2
SVTCA[X]
CALL[], 68, 61, 4, 32, 53, 87
SHC[2], 1
CALL[], 97, 76, 68, 31, 61, 87
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="uni1EB4">
/* VTTTalk Unicode 0x1eb4 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 899, -8, 133
OFFSET[R], 950, -15, 247
SVTCA[Y]
CALL[], 16, 7, 1, 1, 37, 86
SHC[2], 2
CALL[], 31, 11, 1, 1, 34, 86
SHC[2], 3
SVTCA[X]
CALL[], 19, 12, 6, 32, 9, 87
SHC[2], 2
CALL[], 40, 28, 19, 31, 12, 87
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="uni1EB5">
/* VTTTalk Unicode 0x1eb5 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 232, 0, 0
OFFSET[R], 899, -12, 0
OFFSET[R], 950, -13, 119
SVTCA[Y]
CALL[], 65, 47, 1, 1, 71, 86
SHC[2], 1
CALL[], 80, 60, 1, 1, 39, 86
SHC[2], 2
SVTCA[X]
CALL[], 68, 61, 4, 32, 53, 87
SHC[2], 1
CALL[], 89, 77, 68, 32, 61, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="uni1EB6">
/* VTTTalk Unicode 0x1eb6 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 918, -5, -700
OFFSET[R], 899, -8, 133
SVTCA[Y]
CALL[], 17, 10, 1, 1, -44, 86
SHC[2], 2
CALL[], 29, 7, 1, 1, 37, 86
SHC[2], 3
SVTCA[X]
CALL[], 14, 21, 6, 32, 9, 87
SHC[2], 2
CALL[], 32, 25, 6, 32, 9, 87
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="uni1EB7">
/* VTTTalk Unicode 0x1eb7 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 232, 0, 0
OFFSET[R], 918, -5, -700
OFFSET[R], 899, -8, 0
SVTCA[Y]
CALL[], 66, 0, 1, 1, -33, 86
SHC[2], 1
CALL[], 78, 47, 1, 1, 71, 86
SHC[2], 2
SVTCA[X]
CALL[], 63, 70, 4, 32, 53, 87
SHC[2], 1
CALL[], 81, 74, 4, 32, 53, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="uni1EB8">
/* VTTTalk Unicode 0x1eb8 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 42, 0, 0
OFFSET[R], 918, -5, -700
SVTCA[Y]
CALL[], 18, 0, 1, 1, -44, 86
SHC[2], 1
SVTCA[X]
CALL[], 15, 22, 0, 32, 3, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="uni1EB9">
/* VTTTalk Unicode 0x1eb9 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 274, 0, 0
OFFSET[R], 918, 25, -700
SVTCA[Y]
CALL[], 51, 0, 1, 1, -34, 86
SHC[2], 2
SVTCA[X]
CALL[], 48, 55, 5, 37, 15, 87
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="uni1EBA">
/* VTTTalk Unicode 0x1eba */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 42, 0, 0
OFFSET[R], 903, 24, 166
SVTCA[Y]
CALL[], 20, 1, 1, 1, 65, 86
SHC[2], 1
SVTCA[X]
CALL[], 33, 12, 0, 34, 3, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="uni1EBB">
/* VTTTalk Unicode 0x1ebb */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 274, 0, 0
OFFSET[R], 903, 25, 0
SVTCA[Y]
CALL[], 53, 10, 1, 1, 55, 86
SHC[2], 2
SVTCA[X]
CALL[], 66, 45, 5, 34, 15, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="uni1EBC">
/* VTTTalk Unicode 0x1ebc */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 42, 0, 0
OFFSET[R], 901, 3, 114
SVTCA[Y]
CALL[], 16, 1, 1, 1, 64, 86
SHC[2], 1
SVTCA[X]
CALL[], 25, 13, 0, 35, 3, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni1EBD">
/* VTTTalk Unicode 0x1ebd */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 274, 0, 0
OFFSET[R], 901, 0, 0
SVTCA[Y]
CALL[], 49, 10, 1, 1, 106, 86
SHC[2], 2
SVTCA[X]
CALL[], 58, 46, 5, 35, 15, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="uni1EBE">
/* VTTTalk Unicode 0x1ebe */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 42, 0, 0
OFFSET[R], 935, 8, 0
OFFSET[R], 944, 182, 106
SVTCA[Y]
CALL[], 12, 1, 1, 1, 31, 86
SHC[2], 1
CALL[], 19, 14, 1, 0, -25, 86
SHC[2], 2
SVTCA[X]
CALL[], 13, 16, 0, 33, 3, 87
SHC[2], 1
CALL[], 20, 16, 1, 1, -61, 86
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="uni1EBF">
/* VTTTalk Unicode 0x1ebf */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 274, 0, 0
OFFSET[R], 897, 10, 0
OFFSET[R], 920, 141, 109
SVTCA[Y]
CALL[], 45, 10, 1, 1, 43, 86
SHC[2], 2
CALL[], 52, 51, 0, 0, 10, 86
SHC[2], 3
SVTCA[X]
CALL[], 46, 49, 5, 34, 15, 87
SHC[2], 2
CALL[], 53, 49, 1, 1, -54, 86
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="uni1EC0">
/* VTTTalk Unicode 0x1ec0 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 42, 0, 0
OFFSET[R], 935, 9, 0
OFFSET[R], 943, -41, 138
SVTCA[Y]
CALL[], 12, 1, 1, 1, 31, 86
SHC[2], 1
CALL[], 19, 14, 1, 0, 7, 86
SHC[2], 2
SVTCA[X]
CALL[], 13, 16, 0, 34, 3, 87
SHC[2], 1
CALL[], 20, 22, 13, 29, 16, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="uni1EC1">
/* VTTTalk Unicode 0x1ec1 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 274, 0, 0
OFFSET[R], 897, 12, 0
OFFSET[R], 919, 134, 145
SVTCA[Y]
CALL[], 45, 10, 1, 1, 43, 86
SHC[2], 2
CALL[], 52, 51, 0, 0, 31, 86
SHC[2], 3
SVTCA[X]
CALL[], 46, 49, 5, 34, 15, 87
SHC[2], 2
CALL[], 53, 55, 46, 52, 49, 87
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="uni1EC2">
/* VTTTalk Unicode 0x1ec2 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 42, 0, 0
OFFSET[R], 935, 5, 0
OFFSET[R], 903, 139, 226
SVTCA[Y]
CALL[], 12, 1, 1, 1, 31, 86
SHC[2], 1
CALL[], 27, 18, 0, 0, 23, 86
SHC[2], 2
SVTCA[X]
CALL[], 13, 16, 0, 33, 3, 87
SHC[2], 1
CALL[], 40, 19, 13, 56, 16, 87
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="uni1EC3">
/* VTTTalk Unicode 0x1ec3 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 274, 0, 0
OFFSET[R], 897, 11, 0
OFFSET[R], 903, 146, 100
SVTCA[Y]
CALL[], 45, 10, 1, 1, 43, 86
SHC[2], 2
CALL[], 60, 51, 0, 0, 2, 86
SHC[2], 3
SVTCA[X]
CALL[], 46, 49, 5, 34, 15, 87
SHC[2], 2
CALL[], 73, 52, 46, 58, 49, 87
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="uni1EC4">
/* VTTTalk Unicode 0x1ec4 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 42, 0, 0
OFFSET[R], 935, 9, 0
OFFSET[R], 950, -1, 250
SVTCA[Y]
CALL[], 12, 1, 1, 1, 31, 86
SHC[2], 1
CALL[], 23, 14, 1, 1, 33, 86
SHC[2], 2
SVTCA[X]
CALL[], 13, 16, 0, 34, 3, 87
SHC[2], 1
CALL[], 32, 20, 13, 32, 16, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="uni1EC5">
/* VTTTalk Unicode 0x1ec5 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 274, 0, 0
OFFSET[R], 897, 11, 0
OFFSET[R], 950, 2, 141
SVTCA[Y]
CALL[], 45, 10, 1, 1, 43, 86
SHC[2], 2
CALL[], 56, 47, 1, 1, 30, 86
SHC[2], 3
SVTCA[X]
CALL[], 46, 49, 5, 34, 15, 87
SHC[2], 2
CALL[], 65, 53, 46, 32, 49, 87
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="uni1EC6">
/* VTTTalk Unicode 0x1ec6 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 42, 0, 0
OFFSET[R], 918, -5, -700
OFFSET[R], 935, 9, 0
SVTCA[Y]
CALL[], 18, 0, 1, 1, -44, 86
SHC[2], 1
CALL[], 25, 1, 1, 1, 31, 86
SHC[2], 2
SVTCA[X]
CALL[], 15, 22, 0, 32, 3, 87
SHC[2], 1
CALL[], 26, 29, 0, 34, 3, 87
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="uni1EC7">
/* VTTTalk Unicode 0x1ec7 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 274, 0, 0
OFFSET[R], 918, 25, -700
OFFSET[R], 897, 10, 0
SVTCA[Y]
CALL[], 51, 0, 1, 1, -34, 86
SHC[2], 2
CALL[], 58, 10, 1, 1, 43, 86
SHC[2], 3
SVTCA[X]
CALL[], 48, 55, 5, 37, 15, 87
SHC[2], 2
CALL[], 59, 62, 5, 34, 15, 87
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="uni1EC8">
/* VTTTalk Unicode 0x1ec8 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 79, 0, 0
OFFSET[R], 903, 4, 166
SVTCA[Y]
CALL[], 20, 5, 1, 1, 66, 86
SHC[2], 1
SVTCA[X]
CALL[], 33, 12, 0, 32, 11, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="uni1EC9">
/* VTTTalk Unicode 0x1ec9 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 314, 0, 0
OFFSET[R], 903, 15, 0
SVTCA[Y]
CALL[], 18, 5, 1, 1, 66, 86
SHC[2], 1
SVTCA[X]
CALL[], 31, 10, 0, 33, 9, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni1ECA">
/* VTTTalk Unicode 0x1eca */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 79, 0, 0
OFFSET[R], 918, -5, -700
SVTCA[Y]
CALL[], 18, 0, 1, 1, -44, 86
SHC[2], 1
SVTCA[X]
CALL[], 15, 22, 0, 33, 11, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni1ECB">
/* VTTTalk Unicode 0x1ecb */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 314, 0, 0
OFFSET[R], 918, -5, 0
OFFSET[R], 918, -5, -700
SVTCA[Y]
CALL[], 10, 5, 1, 1, 96, 86
SHC[2], 1
CALL[], 29, 0, 1, 1, -44, 86
SHC[2], 2
SVTCA[X]
CALL[], 13, 20, 0, 32, 9, 87
SHC[2], 1
CALL[], 26, 33, 0, 32, 9, 87
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="uni1ECC">
/* VTTTalk Unicode 0x1ecc */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 120, 0, 0
OFFSET[R], 918, -5, -700
SVTCA[Y]
CALL[], 44, 0, 1, 1, -33, 86
SHC[2], 2
SVTCA[X]
CALL[], 41, 48, 5, 32, 15, 87
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="uni1ECD">
/* VTTTalk Unicode 0x1ecd */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 355, 0, 0
OFFSET[R], 918, -5, -700
SVTCA[Y]
CALL[], 45, 0, 1, 1, -36, 86
SHC[2], 2
SVTCA[X]
CALL[], 42, 49, 5, 32, 15, 87
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="uni1ECE">
/* VTTTalk Unicode 0x1ece */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 120, 0, 0
OFFSET[R], 903, 15, 166
SVTCA[Y]
CALL[], 46, 10, 1, 1, 62, 86
SHC[2], 2
SVTCA[X]
CALL[], 59, 38, 5, 32, 15, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="uni1ECF">
/* VTTTalk Unicode 0x1ecf */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 355, 0, 0
OFFSET[R], 903, 15, 0
SVTCA[Y]
CALL[], 47, 10, 1, 1, 56, 86
SHC[2], 2
SVTCA[X]
CALL[], 60, 39, 5, 32, 15, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="uni1ED0">
/* VTTTalk Unicode 0x1ed0 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 120, 0, 0
OFFSET[R], 935, -1, 0
OFFSET[R], 944, 173, 106
SVTCA[Y]
CALL[], 38, 10, 1, 1, 28, 86
SHC[2], 2
CALL[], 45, 40, 1, 0, -25, 86
SHC[2], 3
SVTCA[X]
CALL[], 39, 42, 5, 32, 15, 87
SHC[2], 2
CALL[], 46, 42, 1, 1, -61, 86
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="uni1ED1">
/* VTTTalk Unicode 0x1ed1 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 355, 0, 0
OFFSET[R], 897, 0, 0
OFFSET[R], 920, 131, 109
SVTCA[Y]
CALL[], 39, 10, 1, 1, 44, 86
SHC[2], 2
CALL[], 46, 45, 0, 0, 10, 86
SHC[2], 3
SVTCA[X]
CALL[], 40, 43, 5, 32, 15, 87
SHC[2], 2
CALL[], 47, 43, 1, 1, -54, 86
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="uni1ED2">
/* VTTTalk Unicode 0x1ed2 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 120, 0, 0
OFFSET[R], 935, 0, 0
OFFSET[R], 943, -50, 138
SVTCA[Y]
CALL[], 38, 10, 1, 1, 28, 86
SHC[2], 2
CALL[], 45, 40, 1, 0, 7, 86
SHC[2], 3
SVTCA[X]
CALL[], 39, 42, 5, 32, 15, 87
SHC[2], 2
CALL[], 46, 48, 39, 29, 42, 87
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="uni1ED3">
/* VTTTalk Unicode 0x1ed3 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 355, 0, 0
OFFSET[R], 897, 2, 0
OFFSET[R], 919, 124, 145
SVTCA[Y]
CALL[], 39, 10, 1, 1, 44, 86
SHC[2], 2
CALL[], 46, 45, 0, 0, 31, 86
SHC[2], 3
SVTCA[X]
CALL[], 40, 43, 5, 32, 15, 87
SHC[2], 2
CALL[], 47, 49, 40, 52, 43, 87
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="uni1ED4">
/* VTTTalk Unicode 0x1ed4 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 120, 0, 0
OFFSET[R], 935, -4, 0
OFFSET[R], 903, 130, 226
SVTCA[Y]
CALL[], 38, 10, 1, 1, 28, 86
SHC[2], 2
CALL[], 53, 44, 0, 0, 23, 86
SHC[2], 3
SVTCA[X]
CALL[], 39, 42, 5, 31, 15, 87
SHC[2], 2
CALL[], 66, 45, 39, 56, 42, 87
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="uni1ED5">
/* VTTTalk Unicode 0x1ed5 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 355, 0, 0
OFFSET[R], 897, 1, 0
OFFSET[R], 903, 136, 100
SVTCA[Y]
CALL[], 39, 10, 1, 1, 44, 86
SHC[2], 2
CALL[], 54, 45, 0, 0, 2, 86
SHC[2], 3
SVTCA[X]
CALL[], 40, 43, 5, 32, 15, 87
SHC[2], 2
CALL[], 67, 46, 40, 58, 43, 87
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="uni1ED6">
/* VTTTalk Unicode 0x1ed6 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 120, 0, 0
OFFSET[R], 935, 0, 0
OFFSET[R], 950, -10, 250
SVTCA[Y]
CALL[], 38, 10, 1, 1, 28, 86
SHC[2], 2
CALL[], 49, 40, 1, 1, 33, 86
SHC[2], 3
SVTCA[X]
CALL[], 39, 42, 5, 32, 15, 87
SHC[2], 2
CALL[], 58, 46, 39, 32, 42, 87
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="uni1ED7">
/* VTTTalk Unicode 0x1ed7 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 355, 0, 0
OFFSET[R], 897, 1, 0
OFFSET[R], 950, -8, 141
SVTCA[Y]
CALL[], 39, 10, 1, 1, 44, 86
SHC[2], 2
CALL[], 50, 41, 1, 1, 30, 86
SHC[2], 3
SVTCA[X]
CALL[], 40, 43, 5, 32, 15, 87
SHC[2], 2
CALL[], 59, 47, 40, 32, 43, 87
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="uni1ED8">
/* VTTTalk Unicode 0x1ed8 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 120, 0, 0
OFFSET[R], 918, -5, -700
OFFSET[R], 935, 0, 0
SVTCA[Y]
CALL[], 44, 0, 1, 1, -33, 86
SHC[2], 2
CALL[], 51, 10, 1, 1, 28, 86
SHC[2], 3
SVTCA[X]
CALL[], 41, 48, 5, 32, 15, 87
SHC[2], 2
CALL[], 52, 55, 5, 32, 15, 87
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="uni1ED9">
/* VTTTalk Unicode 0x1ed9 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 355, 0, 0
OFFSET[R], 918, -5, -700
OFFSET[R], 897, 0, 0
SVTCA[Y]
CALL[], 45, 0, 1, 1, -36, 86
SHC[2], 2
CALL[], 52, 10, 1, 1, 44, 86
SHC[2], 3
SVTCA[X]
CALL[], 42, 49, 5, 32, 15, 87
SHC[2], 2
CALL[], 53, 56, 5, 32, 15, 87
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="uni1EDA">
/* VTTTalk Unicode 0x1eda */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 120, 0, 0
OFFSET[R], 940, -29, -39
OFFSET[R], 944, -19, 0
SVTCA[Y]
CALL[], 43, 10, 0, 0, 51, 86
SHC[2], 2
CALL[], 48, 43, 1, 1, -18, 86
SHC[2], 3
SVTCA[X]
CALL[], 43, 44, 5, 59, 15, 87
SHC[2], 2
CALL[], 51, 43, 1, 1, -64, 86
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="uni1EDB">
/* VTTTalk Unicode 0x1edb */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 355, 0, 0
OFFSET[R], 907, -37, -21
OFFSET[R], 920, -11, -15
SVTCA[Y]
CALL[], 48, 10, 0, 0, 53, 86
SHC[2], 2
CALL[], 49, 48, 1, 0, -13, 86
SHC[2], 3
SVTCA[X]
CALL[], 43, 39, 5, 56, 15, 87
SHC[2], 2
CALL[], 52, 48, 1, 1, -45, 86
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="uni1EDC">
/* VTTTalk Unicode 0x1edc */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 120, 0, 0
OFFSET[R], 940, -29, -39
OFFSET[R], 943, -64, 0
SVTCA[Y]
CALL[], 43, 10, 0, 0, 51, 86
SHC[2], 2
CALL[], 48, 43, 1, 1, -18, 86
SHC[2], 3
SVTCA[X]
CALL[], 43, 44, 5, 59, 15, 87
SHC[2], 2
CALL[], 51, 43, 1, 1, -94, 86
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="uni1EDD">
/* VTTTalk Unicode 0x1edd */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 355, 0, 0
OFFSET[R], 907, -37, -21
OFFSET[R], 919, -11, 0
SVTCA[Y]
CALL[], 48, 10, 0, 0, 53, 86
SHC[2], 2
CALL[], 49, 48, 1, 0, -13, 86
SHC[2], 3
SVTCA[X]
CALL[], 43, 39, 5, 56, 15, 87
SHC[2], 2
CALL[], 52, 43, 1, 0, -77, 86
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="uni1EDE">
/* VTTTalk Unicode 0x1ede */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 120, 0, 0
OFFSET[R], 940, -29, -39
OFFSET[R], 903, 15, 166
SVTCA[Y]
CALL[], 43, 10, 0, 0, 51, 86
SHC[2], 2
CALL[], 56, 43, 1, 0, 11, 86
SHC[2], 3
SVTCA[X]
CALL[], 43, 44, 5, 59, 15, 87
SHC[2], 2
CALL[], 48, 43, 1, 1, -75, 86
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="uni1EDF">
/* VTTTalk Unicode 0x1edf */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 355, 0, 0
OFFSET[R], 907, -37, -21
OFFSET[R], 903, 15, 0
SVTCA[Y]
CALL[], 48, 10, 0, 0, 53, 86
SHC[2], 2
CALL[], 57, 48, 1, 0, 3, 86
SHC[2], 3
SVTCA[X]
CALL[], 43, 39, 5, 56, 15, 87
SHC[2], 2
CALL[], 49, 48, 1, 1, -54, 86
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="uni1EE0">
/* VTTTalk Unicode 0x1ee0 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 120, 0, 0
OFFSET[R], 940, -29, -39
OFFSET[R], 901, -6, 114
SVTCA[Y]
CALL[], 43, 10, 0, 0, 51, 86
SHC[2], 2
CALL[], 52, 43, 1, 0, 10, 86
SHC[2], 3
SVTCA[X]
CALL[], 43, 44, 5, 59, 15, 87
SHC[2], 2
CALL[], 61, 49, 43, -166, 44, 87
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="uni1EE1">
/* VTTTalk Unicode 0x1ee1 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 355, 0, 0
OFFSET[R], 907, -37, -21
OFFSET[R], 901, -10, 0
SVTCA[Y]
CALL[], 48, 10, 0, 0, 53, 86
SHC[2], 2
CALL[], 53, 48, 1, 1, 54, 86
SHC[2], 3
SVTCA[X]
CALL[], 43, 39, 5, 56, 15, 87
SHC[2], 2
CALL[], 62, 50, 43, -70, 39, 87
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="uni1EE2">
/* VTTTalk Unicode 0x1ee2 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 120, 0, 0
OFFSET[R], 940, -29, -39
OFFSET[R], 918, -5, -700
SVTCA[Y]
CALL[], 43, 10, 0, 0, 51, 86
SHC[2], 2
CALL[], 54, 0, 1, 1, -33, 86
SHC[2], 3
SVTCA[X]
CALL[], 43, 44, 5, 59, 15, 87
SHC[2], 2
CALL[], 51, 58, 5, 32, 15, 87
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="uni1EE3">
/* VTTTalk Unicode 0x1ee3 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 355, 0, 0
OFFSET[R], 907, -37, -21
OFFSET[R], 918, -5, -700
SVTCA[Y]
CALL[], 48, 10, 0, 0, 53, 86
SHC[2], 2
CALL[], 55, 0, 1, 1, -36, 86
SHC[2], 3
SVTCA[X]
CALL[], 43, 39, 5, 56, 15, 87
SHC[2], 2
CALL[], 52, 59, 5, 32, 15, 87
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="uni1EE4">
/* VTTTalk Unicode 0x1ee4 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 186, 0, 0
OFFSET[R], 918, -5, -700
SVTCA[Y]
CALL[], 27, 0, 1, 1, -33, 86
SHC[2], 1
SVTCA[X]
CALL[], 24, 31, 4, 32, 17, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="uni1EE5">
/* VTTTalk Unicode 0x1ee5 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 423, 0, 0
OFFSET[R], 918, -24, -700
SVTCA[Y]
CALL[], 42, 0, 1, 1, -33, 86
SHC[2], 1
SVTCA[X]
CALL[], 39, 46, 6, 29, 23, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni1EE6">
/* VTTTalk Unicode 0x1ee6 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 186, 0, 0
OFFSET[R], 903, 15, 166
SVTCA[Y]
CALL[], 29, 15, 1, 1, 66, 86
SHC[2], 1
SVTCA[X]
CALL[], 42, 21, 4, 32, 17, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni1EE7">
/* VTTTalk Unicode 0x1ee7 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 423, 0, 0
OFFSET[R], 903, 15, 0
SVTCA[Y]
CALL[], 44, 21, 1, 1, 66, 86
SHC[2], 1
SVTCA[X]
CALL[], 57, 36, 6, 33, 23, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni1EE8">
/* TT glyph 196, char 0x1ee8 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 9, 114
MDAP[R], 33
CALL[], 5, 2, 114
SHP[2], 15
CALL[], 15, 21, 106
CALL[], 0, 10, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni1EE9">
/* TT glyph 433, char 0x1ee9 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 11, 114
MDAP[R], 48
CALL[], 7, 6, 114
CALL[], 27, 10, 114
SRP1[], 7
SHP[1], 21
CALL[], 21, 40, 106
CALL[], 0, 14, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni1EEA">
/* TT glyph 198, char 0x1eea */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 9, 114
MDAP[R], 33
CALL[], 5, 2, 114
SHP[2], 15
CALL[], 15, 21, 106
CALL[], 0, 10, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni1EEB">
/* TT glyph 435, char 0x1eeb */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 11, 114
MDAP[R], 48
CALL[], 7, 6, 114
CALL[], 27, 10, 114
SRP1[], 7
SHP[1], 21
CALL[], 21, 40, 106
CALL[], 0, 14, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni1EEC">
/* TT glyph 199, char 0x1eec */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 9, 114
MDAP[R], 55
CALL[], 5, 2, 114
CALL[], 55, 48, 106
SRP1[], 5
SHP[1], 15
CALL[], 15, 21, 106
CALL[], 0, 10, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni1EED">
/* TT glyph 436, char 0x1eed */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 11, 114
MDAP[R], 70
CALL[], 7, 6, 114
CALL[], 27, 10, 114
CALL[], 70, 63, 106
SRP1[], 7
SHP[1], 21
CALL[], 21, 40, 106
CALL[], 0, 14, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni1EEE">
/* TT glyph 200, char 0x1eee */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 9, 114
MDAP[R], 47
CALL[], 5, 2, 114
CALL[], 47, 40, 106
SRP2[], 0
IP[], 52
MDAP[R], 52
CALL[], 52, 35, 106
SRP1[], 5
SHP[1], 15
CALL[], 15, 21, 106
CALL[], 0, 10, 106
SRP1[], 47
SHP[1], 31
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni1EEF">
/* TT glyph 437, char 0x1eef */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 11, 114
MDAP[R], 62
CALL[], 7, 6, 114
CALL[], 27, 10, 114
CALL[], 62, 55, 106
SRP2[], 0
IP[], 67
MDAP[R], 67
CALL[], 67, 50, 106
SRP1[], 7
SHP[1], 21
CALL[], 21, 40, 106
CALL[], 0, 14, 106
SRP1[], 62
SHP[1], 46
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni1EF0">
/* TT glyph 197, char 0x1ef0 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 31
MDAP[R], 26
CALL[], 0, 9, 114
CALL[], 5, 2, 114
SHP[2], 15
CALL[], 15, 21, 106
CALL[], 0, 10, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni1EF1">
/* TT glyph 434, char 0x1ef1 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 46
MDAP[R], 36
CALL[], 0, 11, 114
CALL[], 7, 6, 114
CALL[], 27, 10, 114
SRP1[], 7
SHP[1], 21
CALL[], 21, 40, 106
CALL[], 0, 14, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni1EF4">
/* VTTTalk Unicode 0x1ef4 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 216, 0, 0
OFFSET[R], 918, 3, -700
SVTCA[Y]
CALL[], 15, 0, 1, 1, -44, 86
SHC[2], 1
SVTCA[X]
CALL[], 12, 19, 2, 33, 6, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="uni1EF5">
/* VTTTalk Unicode 0x1ef5 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 453, 0, 0
OFFSET[R], 918, 115, -700
SVTCA[Y]
CALL[], 29, 0, 2, 0, 27, 86
SHC[2], 2
SVTCA[X]
CALL[], 32, 39, 4, 53, 18, 87
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="uni1EF6">
/* VTTTalk Unicode 0x1ef6 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 216, 0, 0
OFFSET[R], 903, 15, 166
SVTCA[Y]
CALL[], 17, 5, 1, 1, 66, 86
SHC[2], 1
SVTCA[X]
CALL[], 30, 9, 2, 32, 6, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="uni1EF7">
/* VTTTalk Unicode 0x1ef7 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 453, 0, 0
OFFSET[R], 903, 18, 0
SVTCA[Y]
CALL[], 37, 17, 1, 1, 66, 86
SHC[2], 2
SVTCA[X]
CALL[], 50, 29, 4, 35, 18, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="uni1EF8">
/* VTTTalk Unicode 0x1ef8 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 216, 0, 0
OFFSET[R], 901, -6, 114
SVTCA[Y]
CALL[], 13, 5, 1, 1, 65, 86
SHC[2], 1
SVTCA[X]
CALL[], 22, 10, 2, 33, 6, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni1EF9">
/* VTTTalk Unicode 0x1ef9 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 453, 0, 0
OFFSET[R], 901, -7, 0
SVTCA[Y]
CALL[], 33, 17, 1, 1, 117, 86
SHC[2], 2
SVTCA[X]
CALL[], 42, 30, 4, 36, 18, 87
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="uni2007">
/* TT glyph 586, char 0x2007 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */


    </glyphProgram>

    <glyphProgram name="uni2008">
/* TT glyph 588, char 0x2008 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */


    </glyphProgram>

    <glyphProgram name="uni2009">
/* TT glyph 591, char 0x2009 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */


    </glyphProgram>

    <glyphProgram name="uni200A">
/* TT glyph 587, char 0x200a */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */


    </glyphProgram>

    <glyphProgram name="uni200B">
/* TT glyph 592, char 0x200b */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */


    </glyphProgram>

    <glyphProgram name="uni2010">
/* VTTTalk Unicode 0x2010 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 562, 0, 0


    </glyphProgram>

    <glyphProgram name="uni2015">
/* VTTTalk Unicode 0x2015 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 565, 0, 0


    </glyphProgram>

    <glyphProgram name="uni2070">
/* TT glyph 516, char 0x2070 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 4
CALL[], 12, 17, 114
CALL[], 12, 28, 106
CALL[], 4, 20, 106
SRP1[], 12
SHP[1], 1
SRP1[], 4
SHP[1], 3
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2070.ss02">
/* TT glyph 533, char 0xffff */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 8
CALL[], 8, 24, 106
CALL[], 0, 16, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2070.zero">
/* TT glyph 537, char 0xffff */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 12
MDAP[R], 20
CALL[], 20, 36, 106
CALL[], 12, 28, 106
SRP1[], 20
SHP[1], 6
SRP1[], 12
SHP[1], 0
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2074">
/* TT glyph 520, char 0x2074 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
CALL[], 4, 17, 114
SRP1[], 0
IP[], 2
MDAP[R], 2
CALL[], 2, 11, 106
SHP[1], 9
SHP[2], 6
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2075">
/* TT glyph 521, char 0x2075 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
CALL[], 24, 17, 114
CALL[], 24, 27, 106
SRP2[], 0
IP[], 31
MDAP[R], 31
CALL[], 31, 18, 106
CALL[], 0, 8, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2076">
/* TT glyph 522, char 0x2076 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
CALL[], 7, 17, 114
CALL[], 7, 15, 106
SRP2[], 0
IP[], 24
MDAP[R], 24
CALL[], 24, 41, 106
CALL[], 0, 32, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2077">
/* TT glyph 523, char 0x2077 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
CALL[], 6, 17, 114
CALL[], 6, 5, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2078">
/* TT glyph 524, char 0x2078 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
CALL[], 15, 17, 114
CALL[], 15, 56, 106
CALL[], 0, 31, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2079">
/* TT glyph 525, char 0x2079 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
CALL[], 39, 17, 114
CALL[], 39, 15, 106
SRP2[], 0
IP[], 31
MDAP[R], 31
CALL[], 31, 23, 106
CALL[], 0, 7, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni207B">
/* VTTTalk Unicode 0x207b */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 622, 0, 0


    </glyphProgram>

    <glyphProgram name="uni207F">
/* VTTTalk Unicode 0x207f */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 346, 0, 0


    </glyphProgram>

    <glyphProgram name="uni2080">
/* VTTTalk Unicode 0x2080 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 516, 0, -252

    </glyphProgram>

    <glyphProgram name="uni2080.ss02">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 533, 0, -262

    </glyphProgram>

    <glyphProgram name="uni2080.zero">
/* TT glyph 534, char 0xffff */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 12
MDAP[R], 20
CALL[], 20, 36, 106
CALL[], 12, 28, 106
SRP1[], 20
SHP[1], 6
SRP1[], 12
SHP[1], 0
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2081">
/* VTTTalk Unicode 0x2081 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 517, 0, -263

    </glyphProgram>

    <glyphProgram name="uni2082">
/* VTTTalk Unicode 0x2082 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 518, 0, -253

    </glyphProgram>

    <glyphProgram name="uni2083">
/* VTTTalk Unicode 0x2083 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 519, 0, -261

    </glyphProgram>

    <glyphProgram name="uni2084">
/* VTTTalk Unicode 0x2084 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 520, 0, -252

    </glyphProgram>

    <glyphProgram name="uni2085">
/* VTTTalk Unicode 0x2085 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 521, 0, -252

    </glyphProgram>

    <glyphProgram name="uni2086">
/* VTTTalk Unicode 0x2086 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 522, 0, -252

    </glyphProgram>

    <glyphProgram name="uni2087">
/* VTTTalk Unicode 0x2087 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 523, 0, -252

    </glyphProgram>

    <glyphProgram name="uni2088">
/* VTTTalk Unicode 0x2088 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 524, 0, -252

    </glyphProgram>

    <glyphProgram name="uni2089">
/* VTTTalk Unicode 0x2089 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 525, 0, -252

    </glyphProgram>

    <glyphProgram name="uni20A6">
/* TT glyph 608, char 0x20a6 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 4, 12, 114
CALL[], 5, 4, 114
SRP1[], 4
IP[], 0
MDAP[R], 0
CALL[], 0, 1, 106
SRP1[], 5
SHP[1], 9
SRP1[], 4
SHP[1], 11
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni20A9">
/* TT glyph 614, char 0x20a9 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 4, 12, 114
CALL[], 5, 4, 114
SRP1[], 4
IP[], 0
MDAP[R], 0
CALL[], 0, 1, 106
SRP1[], 5
SHP[1], 12
SRP1[], 4
SHP[1], 14
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni20AD">
/* TT glyph 604, char 0x20ad */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 12, 12, 114
CALL[], 13, 4, 114
SRP1[], 12
IP[], 5
MDAP[R], 5
CALL[], 5, 4, 106
SRP1[], 13
SRP2[], 12
IP[], 1
MDAP[R], 1
CALL[], 1, 0, 106
SRP1[], 13
SHP[1], 16
SHP[1], 22
SRP1[], 12
SHP[1], 24
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni20B1">
/* TT glyph 610, char 0x20b1 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 16, 12, 114
CALL[], 17, 4, 114
CALL[], 17, 41, 106
SRP2[], 16
IP[], 1
MDAP[R], 1
CALL[], 1, 0, 106
SRP1[], 17
SRP2[], 16
IP[], 9
MDAP[R], 9
CALL[], 9, 8, 106
SRP1[], 17
SRP2[], 16
IP[], 28
MDAP[R], 28
CALL[], 28, 30, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni20B2">
/* TT glyph 603, char 0x20b2 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IP[], 42
MDAP[R], 42
CALL[], 42, 43, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni20B5">
/* TT glyph 594, char 0x20b5 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
SHP[1], 15
SHP[2], 4
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni20B9">
/* TT glyph 612, char 0x20b9 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 22
MDAP[R], 11
SRP2[], 22
IP[], 27
MDAP[R], 27
CALL[], 27, 26, 106
SRP1[], 11
SRP2[], 22
IP[], 31
MDAP[R], 31
CALL[], 31, 30, 106
SRP1[], 11
SRP2[], 22
IP[], 25
MDAP[R], 25
CALL[], 25, 0, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni20BA">
/* TT glyph 606, char 0x20ba */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 8
MDAP[R], 9
CALL[], 8, 15, 106
SRP1[], 9
SHP[1], 2
SRP1[], 8
SHP[1], 0
SRP1[], 9
SHP[1], 6
SRP1[], 8
SHP[1], 4
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni20BC">
/* TT glyph 607, char 0x20bc */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 10
MDAP[R], 1
SRP1[], 10
SHP[1], 26
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni20BD">
/* TT glyph 611, char 0x20bd */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 8
MDAP[R], 9
CALL[], 9, 33, 106
SRP2[], 8
IP[], 0
MDAP[R], 0
CALL[], 0, 1, 106
SHP[1], 20
SHP[2], 22
SRP1[], 9
SRP2[], 8
IP[], 4
MDAP[R], 4
CALL[], 4, 5, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2113">
/* TT glyph 859, char 0x2113 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 11, 19, 114
MDAP[R], 34
CALL[], 34, 53, 106
CALL[], 11, 0, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2116">
/* TT glyph 861, char 0x2116 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 18, 114
CALL[], 28, 17, 114
CALL[], 1, 16, 114
CALL[], 28, 44, 106
SRP2[], 0
IP[], 36
MDAP[R], 36
CALL[], 36, 20, 106
SRP1[], 28
SRP2[], 0
IP[], 17
MDAP[R], 17
CALL[], 17, 16, 106
SRP1[], 1
SHP[1], 6
SRP1[], 0
SHP[1], 12
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2124">
/* TT glyph 473, char 0x2124 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 5
MDAP[R], 12
CALL[], 12, 11, 106
CALL[], 5, 2, 106
SRP1[], 12
SHP[1], 7
SRP1[], 5
SHP[1], 15
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2126">
/* TT glyph 639, char 0x2126 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 11, 18, 114
MDAP[R], 22
CALL[], 22, 0, 106
CALL[], 11, 12, 106
SHP[1], 33
CALL[], 33, 30, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2196">
/* TT glyph 658, char 0x2196 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 1
MDAP[R], 6
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2197">
/* TT glyph 652, char 0x2197 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 9
MDAP[R], 4
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2198">
/* TT glyph 654, char 0x2198 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 6
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2199">
/* TT glyph 656, char 0x2199 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 4
MDAP[R], 9
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni21E6">
/* TT glyph 664, char 0x21e6 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 3
MDAP[R], 7
SRP2[], 3
IP[], 9
MDAP[R], 9
CALL[], 9, 11, 106
SRP1[], 7
SRP2[], 3
IP[], 2
MDAP[R], 2
CALL[], 2, 17, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni21E7">
/* TT glyph 661, char 0x21e7 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 4
IP[], 12
MDAP[R], 12
CALL[], 12, 8, 106
SRP1[], 4
SRP2[], 0
IP[], 17
MDAP[R], 17
CALL[], 17, 2, 106
CALL[], 0, 10, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni21E8">
/* TT glyph 662, char 0x21e8 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 6
MDAP[R], 2
SRP2[], 6
IP[], 0
MDAP[R], 0
CALL[], 0, 10, 106
SRP1[], 2
SRP2[], 6
IP[], 9
MDAP[R], 9
CALL[], 9, 11, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni21E9">
/* TT glyph 663, char 0x21e9 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 5
MDAP[R], 0
CALL[], 0, 10, 106
SRP2[], 5
IP[], 17
MDAP[R], 17
CALL[], 17, 2, 106
SRP1[], 0
SRP2[], 5
IP[], 12
MDAP[R], 12
CALL[], 12, 8, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni21EA">
/* TT glyph 866, char 0x21ea */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 12
IP[], 20
MDAP[R], 20
CALL[], 20, 16, 106
SRP1[], 12
SRP2[], 0
IP[], 25
MDAP[R], 25
CALL[], 25, 10, 106
SRP1[], 12
SRP2[], 0
IP[], 8
MDAP[R], 8
CALL[], 8, 18, 106
SRP1[], 12
SRP2[], 0
IP[], 7
MDAP[R], 7
CALL[], 7, 1, 106
CALL[], 0, 4, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2206">
/* TT glyph 640, char 0x2206 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 3, 18, 114
MDAP[R], 0
CALL[], 3, 9, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2215">
/* TT glyph 618, char 0x2215 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 2
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2219">
/* TT glyph 617, char 0x2219 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 8
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2318">
/* TT glyph 871, char 0x2318 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 19
IP[], 30
MDAP[R], 30
CALL[], 30, 115, 106
CALL[], 19, 80, 106
SRP2[], 0
IP[], 24
MDAP[R], 24
CALL[], 24, 91, 106
SHP[2], 11
SHP[2], 39
SHP[1], 74
SHP[1], 106
SRP1[], 19
SRP2[], 0
IP[], 55
MDAP[R], 55
CALL[], 55, 88, 106
SHP[1], 66
SHP[1], 101
SHP[2], 8
SHP[2], 40
CALL[], 0, 60, 106
SRP2[], 19
IP[], 49
MDAP[R], 49
CALL[], 49, 92, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2325">
/* TT glyph 870, char 0x2325 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 3
CALL[], 3, 2, 106
SRP2[], 0
IP[], 9
MDAP[R], 9
CALL[], 9, 8, 106
CALL[], 0, 5, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2326">
/* TT glyph 869, char 0x2326 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 3
MDAP[R], 4
CALL[], 4, 8, 106
CALL[], 3, 9, 106
SRP1[], 0
SHP[1], 18
SRP1[], 2
SHP[1], 12
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2327">
/* TT glyph 867, char 0x2327 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 3
MDAP[R], 0
CALL[], 0, 7, 106
CALL[], 3, 4, 106
SRP1[], 0
SHP[1], 10
SRP1[], 2
SHP[1], 16
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni232B">
/* TT glyph 868, char 0x232b */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 3
MDAP[R], 0
CALL[], 0, 8, 106
CALL[], 3, 5, 106
SRP1[], 0
SHP[1], 12
SRP1[], 2
SHP[1], 18
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni238B">
/* TT glyph 864, char 0x238b */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 10
MDAP[R], 0
SRP1[], 10
IP[], 35
MDAP[R], 35
CALL[], 35, 33, 106
CALL[], 10, 21, 106
SRP1[], 0
SHP[1], 39
SRP1[], 10
SHP[1], 41
SRP1[], 0
SHP[1], 34
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni23CE">
/* TT glyph 872, char 0x23ce */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 4
MDAP[R], 0
CALL[], 0, 12, 106
SRP2[], 4
IP[], 14
MDAP[R], 14
CALL[], 14, 10, 106
SRP1[], 0
SRP2[], 4
IP[], 3
MDAP[R], 3
CALL[], 3, 20, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2423">
/* TT glyph 863, char 0x2423 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
CALL[], 0, 3, 106
SRP1[], 1
SHP[1], 6
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2500">
/* TT glyph 779, char 0x2500 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2501">
/* TT glyph 741, char 0x2501 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2502">
/* TT glyph 792, char 0x2502 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2503">
/* TT glyph 754, char 0x2503 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2504">
/* TT glyph 785, char 0x2504 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IP[], 8
MDAP[R], 8
CALL[], 8, 9, 106
SRP1[], 1
SRP2[], 0
IP[], 4
MDAP[R], 4
CALL[], 4, 5, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2505">
/* TT glyph 747, char 0x2505 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
SHP[1], 5
SHP[2], 4
SHP[1], 9
SHP[2], 8
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2506">
/* TT glyph 786, char 0x2506 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 9
SHP[1], 5
SHP[2], 4
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2507">
/* TT glyph 748, char 0x2507 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 9
SHP[1], 5
SHP[2], 4
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2508">
/* TT glyph 782, char 0x2508 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IP[], 12
MDAP[R], 12
CALL[], 12, 13, 106
SRP1[], 1
SRP2[], 0
IP[], 8
MDAP[R], 8
CALL[], 8, 9, 106
SRP1[], 1
SRP2[], 0
IP[], 4
MDAP[R], 4
CALL[], 4, 5, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2509">
/* TT glyph 744, char 0x2509 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
SHP[1], 5
SHP[2], 4
SHP[1], 9
SHP[2], 8
SHP[1], 13
SHP[2], 12
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni250A">
/* TT glyph 783, char 0x250a */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 13
SHP[1], 5
SHP[2], 4
SHP[1], 9
SHP[2], 8
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni250B">
/* TT glyph 745, char 0x250b */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 13
SHP[1], 5
SHP[2], 4
SHP[1], 9
SHP[2], 8
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni250C">
/* TT glyph 778, char 0x250c */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
CALL[], 1, 4, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni250D">
/* TT glyph 729, char 0x250d */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni250E">
/* TT glyph 723, char 0x250e */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
CALL[], 1, 4, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni250F">
/* TT glyph 740, char 0x250f */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2510">
/* TT glyph 777, char 0x2510 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 3
CALL[], 3, 2, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2511">
/* TT glyph 727, char 0x2511 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 3
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2512">
/* TT glyph 721, char 0x2512 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 3
CALL[], 3, 2, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2513">
/* TT glyph 739, char 0x2513 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 3
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2514">
/* TT glyph 791, char 0x2514 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
CALL[], 0, 3, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2515">
/* TT glyph 818, char 0x2515 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2516">
/* TT glyph 812, char 0x2516 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
CALL[], 0, 3, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2517">
/* TT glyph 753, char 0x2517 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2518">
/* TT glyph 790, char 0x2518 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 3
CALL[], 0, 1, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2519">
/* TT glyph 816, char 0x2519 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 3
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni251A">
/* TT glyph 810, char 0x251a */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 3
CALL[], 0, 1, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni251B">
/* TT glyph 751, char 0x251b */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 3
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni251C">
/* TT glyph 795, char 0x251c */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IP[], 6
MDAP[R], 6
CALL[], 6, 3, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni251D">
/* TT glyph 830, char 0x251d */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni251E">
/* TT glyph 811, char 0x251e */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 3
IP[], 8
MDAP[R], 8
CALL[], 8, 5, 106
SHP[1], 2
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni251F">
/* TT glyph 724, char 0x251f */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 3
IP[], 8
MDAP[R], 8
CALL[], 8, 5, 106
SHP[2], 1
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2520">
/* TT glyph 827, char 0x2520 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IP[], 6
MDAP[R], 6
CALL[], 6, 3, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2521">
/* TT glyph 730, char 0x2521 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 3
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2522">
/* TT glyph 817, char 0x2522 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 3
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2523">
/* TT glyph 757, char 0x2523 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2524">
/* TT glyph 794, char 0x2524 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 5
IP[], 2
MDAP[R], 2
CALL[], 2, 3, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2525">
/* TT glyph 829, char 0x2525 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 5
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2526">
/* TT glyph 809, char 0x2526 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 5
IP[], 2
MDAP[R], 2
CALL[], 2, 3, 106
SHP[1], 8
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2527">
/* TT glyph 722, char 0x2527 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 5
IP[], 2
MDAP[R], 2
CALL[], 2, 3, 106
SHP[2], 7
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2528">
/* TT glyph 826, char 0x2528 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 5
IP[], 2
MDAP[R], 2
CALL[], 2, 3, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2529">
/* TT glyph 728, char 0x2529 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 5
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni252A">
/* TT glyph 815, char 0x252a */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 5
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni252B">
/* TT glyph 756, char 0x252b */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 5
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni252C">
/* TT glyph 776, char 0x252c */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 3
CALL[], 3, 2, 106
SHP[2], 6
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni252D">
/* TT glyph 759, char 0x252d */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 3
IP[], 5
MDAP[R], 5
CALL[], 5, 8, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni252E">
/* TT glyph 797, char 0x252e */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 5
IP[], 3
MDAP[R], 3
CALL[], 3, 2, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni252F">
/* TT glyph 726, char 0x252f */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 3
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2530">
/* TT glyph 720, char 0x2530 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 3
CALL[], 3, 2, 106
SHP[2], 6
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2531">
/* TT glyph 800, char 0x2531 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 3
IP[], 5
MDAP[R], 5
CALL[], 5, 8, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2532">
/* TT glyph 762, char 0x2532 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 5
IP[], 3
MDAP[R], 3
CALL[], 3, 2, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2533">
/* TT glyph 738, char 0x2533 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 3
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2534">
/* TT glyph 789, char 0x2534 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 3
CALL[], 0, 1, 106
SHP[2], 5
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2535">
/* TT glyph 760, char 0x2535 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 3
IP[], 8
MDAP[R], 8
CALL[], 8, 5, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2536">
/* TT glyph 798, char 0x2536 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 5
IP[], 2
MDAP[R], 2
CALL[], 2, 3, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2537">
/* TT glyph 814, char 0x2537 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 3
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2538">
/* TT glyph 808, char 0x2538 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 3
CALL[], 0, 1, 106
SHP[2], 5
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2539">
/* TT glyph 801, char 0x2539 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 3
IP[], 8
MDAP[R], 8
CALL[], 8, 5, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni253A">
/* TT glyph 763, char 0x253a */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 5
IP[], 2
MDAP[R], 2
CALL[], 2, 3, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni253B">
/* TT glyph 750, char 0x253b */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 3
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni253C">
/* TT glyph 793, char 0x253c */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 5
IP[], 2
MDAP[R], 2
CALL[], 2, 3, 106
SHP[1], 10
SHP[2], 7
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni253D">
/* TT glyph 761, char 0x253d */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 5
IP[], 10
MDAP[R], 10
CALL[], 10, 7, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni253E">
/* TT glyph 799, char 0x253e */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 5
IP[], 2
MDAP[R], 2
CALL[], 2, 3, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni253F">
/* TT glyph 828, char 0x253f */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 5
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2540">
/* TT glyph 807, char 0x2540 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 5
IP[], 2
MDAP[R], 2
CALL[], 2, 3, 106
SHP[1], 10
SHP[2], 7
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2541">
/* TT glyph 725, char 0x2541 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 5
IP[], 2
MDAP[R], 2
CALL[], 2, 3, 106
SHP[1], 10
SHP[2], 7
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2542">
/* TT glyph 825, char 0x2542 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 5
IP[], 2
MDAP[R], 2
CALL[], 2, 3, 106
SHP[1], 10
SHP[2], 7
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2543">
/* TT glyph 765, char 0x2543 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 5
IP[], 10
MDAP[R], 10
CALL[], 10, 7, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2544">
/* TT glyph 803, char 0x2544 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 7
IP[], 4
MDAP[R], 4
CALL[], 4, 5, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2545">
/* TT glyph 758, char 0x2545 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 5
IP[], 12
MDAP[R], 12
CALL[], 12, 9, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2546">
/* TT glyph 796, char 0x2546 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 7
IP[], 2
MDAP[R], 2
CALL[], 2, 3, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2547">
/* TT glyph 731, char 0x2547 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 5
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2548">
/* TT glyph 813, char 0x2548 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 5
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2549">
/* TT glyph 802, char 0x2549 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 5
IP[], 10
MDAP[R], 10
CALL[], 10, 7, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni254A">
/* TT glyph 764, char 0x254a */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 5
IP[], 2
MDAP[R], 2
CALL[], 2, 3, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni254B">
/* TT glyph 755, char 0x254b */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 5
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni254C">
/* TT glyph 770, char 0x254c */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IP[], 4
MDAP[R], 4
CALL[], 4, 5, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni254D">
/* TT glyph 735, char 0x254d */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
SHP[1], 5
SHP[2], 4
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni254E">
/* TT glyph 771, char 0x254e */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 5
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni254F">
/* TT glyph 736, char 0x254f */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 5
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2550">
/* TT glyph 709, char 0x2550 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 5
CALL[], 5, 4, 106
CALL[], 0, 1, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2551">
/* TT glyph 713, char 0x2551 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
SHP[1], 5
SHP[2], 4
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2552">
/* TT glyph 734, char 0x2552 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
CALL[], 1, 4, 106
SRP2[], 0
IP[], 5
MDAP[R], 5
CALL[], 5, 8, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2553">
/* TT glyph 719, char 0x2553 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
CALL[], 1, 8, 106
SHP[2], 4
SRP1[], 0
SHP[1], 6
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2554">
/* TT glyph 708, char 0x2554 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
CALL[], 1, 4, 106
SRP2[], 0
IP[], 7
MDAP[R], 7
CALL[], 7, 10, 106
SRP1[], 0
SHP[1], 11
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2555">
/* TT glyph 733, char 0x2555 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 7
CALL[], 7, 6, 106
SRP2[], 0
IP[], 3
MDAP[R], 3
CALL[], 3, 2, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2556">
/* TT glyph 718, char 0x2556 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 3
CALL[], 3, 2, 106
SHP[2], 8
SRP1[], 0
SHP[1], 6
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2557">
/* TT glyph 707, char 0x2557 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 9
CALL[], 9, 8, 106
SRP2[], 0
IP[], 3
MDAP[R], 3
CALL[], 3, 2, 106
SRP1[], 0
SHP[1], 11
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2558">
/* TT glyph 821, char 0x2558 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IP[], 6
MDAP[R], 6
CALL[], 6, 3, 106
CALL[], 0, 7, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2559">
/* TT glyph 806, char 0x2559 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
CALL[], 0, 3, 106
SHP[2], 7
SRP1[], 1
SHP[1], 6
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni255A">
/* TT glyph 712, char 0x255a */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IP[], 6
MDAP[R], 6
CALL[], 6, 9, 106
CALL[], 0, 3, 106
SRP1[], 1
SHP[1], 8
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni255B">
/* TT glyph 820, char 0x255b */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 7
IP[], 4
MDAP[R], 4
CALL[], 4, 5, 106
CALL[], 0, 1, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni255C">
/* TT glyph 805, char 0x255c */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 3
CALL[], 0, 1, 106
SHP[2], 5
SRP1[], 3
SHP[1], 8
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni255D">
/* TT glyph 711, char 0x255d */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 3
IP[], 6
MDAP[R], 6
CALL[], 6, 7, 106
CALL[], 0, 1, 106
SRP1[], 3
SHP[1], 10
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni255E">
/* TT glyph 833, char 0x255e */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IP[], 3
MDAP[R], 3
CALL[], 3, 6, 106
SRP1[], 1
SRP2[], 0
IP[], 10
MDAP[R], 10
CALL[], 10, 7, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni255F">
/* TT glyph 824, char 0x255f */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IP[], 10
MDAP[R], 10
CALL[], 10, 7, 106
SRP1[], 1
SHP[1], 6
SRP1[], 0
SHP[1], 11
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2560">
/* TT glyph 716, char 0x2560 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IP[], 13
MDAP[R], 13
CALL[], 13, 10, 106
SRP1[], 1
SRP2[], 0
IP[], 8
MDAP[R], 8
CALL[], 8, 5, 106
SRP1[], 0
SHP[1], 9
SRP1[], 1
SHP[1], 12
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2561">
/* TT glyph 832, char 0x2561 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 9
IP[], 7
MDAP[R], 7
CALL[], 7, 6, 106
SRP1[], 9
SRP2[], 0
IP[], 2
MDAP[R], 2
CALL[], 2, 3, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2562">
/* TT glyph 823, char 0x2562 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 5
IP[], 2
MDAP[R], 2
CALL[], 2, 3, 106
SRP1[], 5
SHP[1], 9
SRP1[], 0
SHP[1], 8
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2563">
/* TT glyph 715, char 0x2563 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 7
IP[], 11
MDAP[R], 11
CALL[], 11, 10, 106
SRP1[], 7
SRP2[], 0
IP[], 2
MDAP[R], 2
CALL[], 2, 3, 106
SRP1[], 0
SHP[1], 9
SRP1[], 7
SHP[1], 14
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2564">
/* TT glyph 732, char 0x2564 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 9
CALL[], 9, 8, 106
SRP2[], 0
IP[], 3
MDAP[R], 3
CALL[], 3, 2, 106
SHP[2], 6
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2565">
/* TT glyph 717, char 0x2565 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 3
CALL[], 3, 2, 106
SHP[2], 10
SHP[2], 6
SRP1[], 0
SHP[1], 8
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2566">
/* TT glyph 706, char 0x2566 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 13
CALL[], 13, 12, 106
SRP2[], 0
IP[], 7
MDAP[R], 7
CALL[], 7, 10, 106
SRP1[], 13
SRP2[], 0
IP[], 3
MDAP[R], 3
CALL[], 3, 2, 106
SRP1[], 0
SHP[1], 11
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2567">
/* TT glyph 819, char 0x2567 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 7
IP[], 4
MDAP[R], 4
CALL[], 4, 5, 106
SHP[2], 9
CALL[], 0, 1, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2568">
/* TT glyph 804, char 0x2568 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 3
CALL[], 0, 1, 106
SHP[2], 5
SHP[2], 9
SRP1[], 3
SHP[1], 8
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2569">
/* TT glyph 710, char 0x2569 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 7
IP[], 10
MDAP[R], 10
CALL[], 10, 13, 106
SRP1[], 7
SRP2[], 0
IP[], 4
MDAP[R], 4
CALL[], 4, 5, 106
CALL[], 0, 1, 106
SRP1[], 7
SHP[1], 12
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni256A">
/* TT glyph 831, char 0x256a */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 9
IP[], 7
MDAP[R], 7
CALL[], 7, 6, 106
SHP[2], 14
SHP[1], 11
SRP1[], 9
SRP2[], 0
IP[], 2
MDAP[R], 2
CALL[], 2, 3, 106
SHP[1], 18
SHP[2], 15
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni256B">
/* TT glyph 822, char 0x256b */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 5
IP[], 2
MDAP[R], 2
CALL[], 2, 3, 106
SHP[1], 18
SHP[1], 14
SHP[2], 7
SHP[2], 11
SRP1[], 5
SHP[1], 10
SRP1[], 0
SHP[1], 16
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni256C">
/* TT glyph 714, char 0x256c */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 15
IP[], 21
MDAP[R], 21
CALL[], 21, 18, 106
SRP1[], 15
SRP2[], 0
IP[], 13
MDAP[R], 13
CALL[], 13, 12, 106
SRP1[], 15
SRP2[], 0
IP[], 10
MDAP[R], 10
CALL[], 10, 7, 106
SRP1[], 15
SRP2[], 0
IP[], 2
MDAP[R], 2
CALL[], 2, 3, 106
SRP1[], 0
SHP[1], 11
SRP1[], 15
SHP[1], 20
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni256D">
/* TT glyph 767, char 0x256d */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 8
CALL[], 8, 11, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni256E">
/* TT glyph 766, char 0x256e */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 15
MDAP[R], 7
CALL[], 7, 6, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni256F">
/* TT glyph 768, char 0x256f */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 9
MDAP[R], 0
CALL[], 9, 10, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2570">
/* TT glyph 769, char 0x2570 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 8
MDAP[R], 15
CALL[], 8, 5, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2571">
/* TT glyph 774, char 0x2571 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 2
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2572">
/* TT glyph 773, char 0x2572 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 2
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2573">
/* TT glyph 772, char 0x2573 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 2
SHP[1], 8
SHP[2], 6
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2574">
/* TT glyph 780, char 0x2574 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2575">
/* TT glyph 787, char 0x2575 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2576">
/* TT glyph 784, char 0x2576 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2577">
/* TT glyph 775, char 0x2577 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2578">
/* TT glyph 742, char 0x2578 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2579">
/* TT glyph 749, char 0x2579 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni257A">
/* TT glyph 746, char 0x257a */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni257B">
/* TT glyph 737, char 0x257b */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni257C">
/* TT glyph 781, char 0x257c */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 5
IP[], 2
MDAP[R], 2
CALL[], 2, 3, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni257D">
/* TT glyph 788, char 0x257d */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 3
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni257E">
/* TT glyph 743, char 0x257e */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IP[], 6
MDAP[R], 6
CALL[], 6, 3, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni257F">
/* TT glyph 752, char 0x257f */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 3
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2581">
/* TT glyph 669, char 0x2581 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2582">
/* TT glyph 670, char 0x2582 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2583">
/* TT glyph 671, char 0x2583 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2585">
/* TT glyph 673, char 0x2585 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2586">
/* TT glyph 674, char 0x2586 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2587">
/* TT glyph 675, char 0x2587 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2589">
/* TT glyph 685, char 0x2589 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni258A">
/* TT glyph 684, char 0x258a */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni258B">
/* TT glyph 683, char 0x258b */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni258D">
/* TT glyph 681, char 0x258d */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni258E">
/* TT glyph 680, char 0x258e */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni258F">
/* TT glyph 679, char 0x258f */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2594">
/* TT glyph 678, char 0x2594 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2595">
/* TT glyph 687, char 0x2595 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2596">
/* TT glyph 688, char 0x2596 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2597">
/* TT glyph 689, char 0x2597 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2598">
/* TT glyph 690, char 0x2598 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2599">
/* TT glyph 691, char 0x2599 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni259A">
/* TT glyph 692, char 0x259a */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 3
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni259B">
/* TT glyph 693, char 0x259b */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni259C">
/* TT glyph 694, char 0x259c */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 3
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni259D">
/* TT glyph 695, char 0x259d */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni259E">
/* TT glyph 696, char 0x259e */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 5
IP[], 4
MDAP[R], 4
CALL[], 4, 1, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni259F">
/* TT glyph 697, char 0x259f */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 3
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni25C6">
/* TT glyph 703, char 0x25c6 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 2
MDAP[R], 0
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni25C7">
/* TT glyph 704, char 0x25c7 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 2
MDAP[R], 0
SHP[2], 7
SRP1[], 2
SHP[1], 5
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni25CF">
/* TT glyph 701, char 0x25cf */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 10
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2639">
/* TT glyph 834, char 0x2639 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 10
CALL[], 10, 30, 106
SRP2[], 0
IP[], 48
MDAP[R], 48
CALL[], 48, 40, 106
CALL[], 0, 20, 106
SRP1[], 10
SHP[1], 62
SRP1[], 48
SHP[1], 56
SRP1[], 10
SHP[1], 74
SRP1[], 48
SHP[1], 68
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2713">
/* TT glyph 841, char 0x2713 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 6, 19, 114
CALL[], 0, 17, 114
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2714">
/* TT glyph 842, char 0x2714 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 6
MDAP[R], 0
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2715">
/* VTTTalk Unicode 0x2715 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 623, 0, 0


    </glyphProgram>

    <glyphProgram name="uni2717">
/* TT glyph 844, char 0x2717 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 15
SHP[2], 11
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2718">
/* TT glyph 845, char 0x2718 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 14
MDAP[R], 20
SHP[1], 6
SRP1[], 14
SHP[1], 0
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2B05">
/* TT glyph 668, char 0x2b05 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 2
MDAP[R], 6
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2B06">
/* TT glyph 665, char 0x2b06 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 3
MDAP[R], 8
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2B07">
/* TT glyph 667, char 0x2b07 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 1
MDAP[R], 6
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2B95">
/* TT glyph 666, char 0x2b95 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 7
MDAP[R], 3
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2E12">
/* TT glyph 550, char 0x2e12 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 10
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uniFFFD">
/* TT glyph 873, char 0xfffd */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 3
IP[], 14
MDAP[R], 14
CALL[], 14, 20, 106
CALL[], 0, 8, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uogonek">
/* VTTTalk Unicode 0x173 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 423, 0, 0
OFFSET[R], 912, 129, 0
SVTCA[Y]
CALL[], 46, 27, 0, 0, 17, 86
SHC[2], 1
SVTCA[X]
CALL[], 41, 47, 6, 50, 23, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="upblock">
/* TT glyph 677, char 0x2580 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uring">
/* VTTTalk Unicode 0x16f */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 423, 0, 0
OFFSET[R], 925, -7, 0
SVTCA[Y]
CALL[], 36, 21, 1, 1, 60, 86
SHC[2], 1
SHC[2], 2
SVTCA[X]
CALL[], 40, 48, 6, 32, 23, 87
SHC[2], 1
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="utilde">
/* VTTTalk Unicode 0x169 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 423, 0, 0
OFFSET[R], 901, -10, 0
SVTCA[Y]
CALL[], 40, 21, 1, 1, 117, 86
SHC[2], 1
SVTCA[X]
CALL[], 49, 37, 6, 33, 23, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="v">
/* TT glyph 446, char 0x76 (v) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 1, 6, 114
SHP[2], 10
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="w">
/* TT glyph 447, char 0x77 (w) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 1, 6, 114
SHP[2], 14
SHP[2], 12
SRP1[], 0
SHP[1], 19
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="wacute">
/* VTTTalk Unicode 0x1e83 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 447, 0, 0
OFFSET[R], 920, -11, -15
SVTCA[Y]
CALL[], 22, 13, 1, 1, 50, 86
SHC[2], 1
SVTCA[X]
CALL[], 23, 25, 1, 36, 14, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="wcircumflex">
/* VTTTalk Unicode 0x175 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 447, 0, 0
OFFSET[R], 897, 0, 0
SVTCA[Y]
CALL[], 22, 1, 1, 1, 54, 86
SHC[2], 1
SVTCA[X]
CALL[], 23, 26, 1, 32, 14, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="wdieresis">
/* VTTTalk Unicode 0x1e85 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 447, 0, 0
OFFSET[R], 917, -1, 0
SVTCA[Y]
CALL[], 22, 1, 1, 1, 107, 86
SHC[2], 1
SHC[2], 2
SVTCA[X]
CALL[], 25, 43, 1, 32, 14, 87
SHC[2], 1
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="wgrave">
/* VTTTalk Unicode 0x1e81 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 447, 0, 0
OFFSET[R], 919, -11, 0
SVTCA[Y]
CALL[], 22, 13, 1, 1, 50, 86
SHC[2], 1
SVTCA[X]
CALL[], 23, 25, 1, 27, 14, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="x">
/* TT glyph 452, char 0x78 (x) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 2, 6, 114
SHP[2], 6
SRP1[], 0
SHP[1], 9
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="y">
/* TT glyph 453, char 0x79 (y) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 15, 114
CALL[], 26, 6, 114
CALL[], 0, 8, 106
SRP1[], 26
SHP[1], 18
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="yacute">
/* VTTTalk Unicode 0xfd */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 453, 0, 0
OFFSET[R], 920, -8, -15
SVTCA[Y]
CALL[], 29, 17, 1, 1, 50, 86
SHC[2], 2
SVTCA[X]
CALL[], 30, 32, 4, 39, 18, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="ycircumflex">
/* VTTTalk Unicode 0x177 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 453, 0, 0
OFFSET[R], 897, 3, 0
SVTCA[Y]
CALL[], 29, 26, 1, 1, 54, 86
SHC[2], 2
SVTCA[X]
CALL[], 30, 33, 4, 35, 18, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="ydieresis">
/* VTTTalk Unicode 0xff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 453, 0, 0
OFFSET[R], 917, 2, 0
SVTCA[Y]
CALL[], 29, 26, 1, 1, 107, 86
SHC[2], 2
SHC[2], 3
SVTCA[X]
CALL[], 32, 50, 4, 35, 18, 87
SHC[2], 2
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="yen">
/* TT glyph 615, char 0xa5 */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 16, 12, 114
CALL[], 23, 4, 114
SRP1[], 16
IP[], 1
MDAP[R], 1
CALL[], 1, 2, 106
SHP[1], 7
SHP[2], 4
SRP1[], 23
SRP2[], 16
IP[], 9
MDAP[R], 9
CALL[], 9, 10, 106
SHP[1], 15
SHP[2], 12
SRP1[], 23
SHP[1], 20
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="ygrave">
/* VTTTalk Unicode 0x1ef3 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 453, 0, 0
OFFSET[R], 919, -8, 0
SVTCA[Y]
CALL[], 29, 17, 1, 1, 50, 86
SHC[2], 2
SVTCA[X]
CALL[], 30, 32, 4, 29, 18, 87
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="z">
/* TT glyph 463, char 0x7a (z) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 4, 6, 114
CALL[], 4, 3, 106
CALL[], 0, 7, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="zacute">
/* VTTTalk Unicode 0x17a */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 463, 0, 0
OFFSET[R], 920, -11, -15
SVTCA[Y]
CALL[], 10, 4, 1, 1, 50, 86
SHC[2], 1
SVTCA[X]
CALL[], 11, 13, 0, 36, 9, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="zcaron">
/* VTTTalk Unicode 0x17e */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 463, 0, 0
OFFSET[R], 898, -6, 0
SVTCA[Y]
CALL[], 15, 4, 1, 1, 57, 86
SHC[2], 1
SVTCA[X]
CALL[], 16, 13, 0, 32, 9, 87
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="zdotaccent">
/* VTTTalk Unicode 0x17c */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 463, 0, 0
OFFSET[R], 918, 0, 0
SVTCA[Y]
CALL[], 10, 4, 1, 1, 96, 86
SHC[2], 1
SVTCA[X]
CALL[], 13, 20, 0, 33, 9, 87
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="zero">
/* TT glyph 474, char 0x30 (0) */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
CALL[], 4, 13, 114
CALL[], 12, 5, 114
CALL[], 12, 29, 106
CALL[], 4, 21, 106
SRP1[], 12
SHP[1], 1
SRP1[], 4
SHP[1], 3
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="zero.dnom">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 516, 0, -252

    </glyphProgram>

    <glyphProgram name="zero.dnom.ss02">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 533, 0, -262

    </glyphProgram>

    <glyphProgram name="zero.dnom.zero">
/* TT glyph 535, char 0xffff */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 12
MDAP[R], 20
CALL[], 20, 36, 106
CALL[], 12, 28, 106
SRP1[], 20
SHP[1], 6
SRP1[], 12
SHP[1], 0
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="zero.numr">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 516, 0, 0


    </glyphProgram>

    <glyphProgram name="zero.numr.ss02">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

USEMYMETRICS[]
OFFSET[R], 533, 0, 0


    </glyphProgram>

    <glyphProgram name="zero.numr.zero">
/* TT glyph 536, char 0xffff */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 12
MDAP[R], 20
CALL[], 20, 36, 106
CALL[], 12, 28, 106
SRP1[], 20
SHP[1], 6
SRP1[], 12
SHP[1], 0
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="zero.ss02">
/* TT glyph 485, char 0xffff */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 0
MDAP[R], 8
CALL[], 8, 25, 106
CALL[], 0, 17, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="zero.zero">
/* TT glyph 484, char 0xffff */
/* VTT 6.35 compiler Sun Apr 27 04:23:13 2025 */
SVTCA[Y]
MDAP[R], 16
MDAP[R], 24
CALL[], 24, 41, 106
CALL[], 16, 33, 106
SRP1[], 24
SHP[1], 8
SRP1[], 16
SHP[1], 0
IUP[Y]
IUP[X]

    </glyphProgram>

    <extraProgram name="cvt">
/* Control Program */
/* ACT generated Sun Apr 27 04:23:05 2025 */

CATEGORY Stroke
CATEGORY StrokeInheritance

InstructionsOn @8..2047

DropOutCtrlOff @144

CvtCutIn = 1, 0@144 /* 1 pixel cut-in for over- and undershoots */

ClearTypeCtrl = 1

ASM("WS[], 16, 0") /* &lt;== S[16] = threshold ppem that less than or equal is no RES */

LinearAdvanceWidths = 0

/***** Height CVTs *****/
UpperCase
  Grey
  Y
  SquareHeight
      2:   623 /* cap height */
ASM("SVTCA[Y]")
ASM("CALL[], 2, 89")
      8:     0 /* base line */
ASM("SVTCA[Y]")
ASM("CALL[], 8, 89")
  RoundHeight
      3:     4 ~   2 @110 /* cap height overshoot */
      9:   -11 ~   8 @ 40 /* base line undershoot */

LowerCase
  SquareHeight
      0:   665 /* lc ascender */
ASM("SVTCA[Y]")
ASM("CALL[], 0, 89")
      6:   457 /* x height */
ASM("SVTCA[Y]")
ASM("CALL[], 6, 89")
     10:     0 /* base line */
ASM("SVTCA[Y]")
ASM("CALL[], 10, 89")
     14:  -167 /* lc descender */
ASM("SVTCA[Y]")
ASM("CALL[], 14, 89")
  RoundHeight
      1:     6 ~   0 @ 74 /* lc ascender overshoot */
      7:    10 ~   6 @ 44 /* x height overshoot */
     11:    -8 ~  10 @ 55 /* base line undershoot */
     15:    -5 ~  14 @ 88 /* lc descender undershoot */

Figure
  SquareHeight
      4:   623 /* figure height */
ASM("SVTCA[Y]")
ASM("CALL[], 4, 89")
     12:     0 /* base line */
ASM("SVTCA[Y]")
ASM("CALL[], 12, 89")
  RoundHeight
      5:     4 ~   4 @110 /* figure height overshoot */
     13:   -11 ~  12 @ 40 /* base line undershoot */

Other
  SquareHeight
     16:   624 /* other height */
ASM("SVTCA[Y]")
ASM("CALL[], 16, 89")
     18:     0 /* base line */
ASM("SVTCA[Y]")
ASM("CALL[], 18, 89")
  RoundHeight
     17:    10 ~  16 @ 44 /* other height overshoot */
     19:   -10 ~  18 @ 44 /* base line undershoot */

/***** Reserved CVTs *****/
AnyGroup
  AnyColor
  AnyDirection
  AnyCategory
     20:     0 /* DO NOT USE!!! */

/***** Grand-Parent CVT *****/
AnyGroup
  Black
  X
  StrokeInheritance
     21:    70 /* 42x */

/***** Parent CVTs *****/
UpperCase
  Black
  X
  StrokeInheritance
     22:    67 /* 21x */
LowerCase
  Black
  X
  StrokeInheritance
     25:    72 /* 21x */
ASM("SVTCA[X]")
ASM("CALL[], 21, 25, 69, 22, 86, 90")

UpperCase
  Black
  Y
  StrokeInheritance
     23:    61 /* 25x */
ASM("SVTCA[X]")
ASM("CALL[], 23, 58, 22, 70, 91")
LowerCase
  Black
  Y
  StrokeInheritance
     26:    58 /* 12x */
ASM("SVTCA[X]")
ASM("CALL[], 26, 51, 25, 32, 91")

UpperCase
  Black
  Diag
  StrokeInheritance
     24:    61 /* 25x */
ASM("SVTCA[X]")
ASM("CALL[], 24, 58, 22, 70, 91")
LowerCase
  Black
  Diag
  StrokeInheritance
     27:    58 /* 12x */
ASM("SVTCA[X]")
ASM("CALL[], 27, 51, 25, 32, 91")

/***** StrokeInheritance CVTs *****/
UpperCase
  Black
  X
  StrokeInheritance
     28:    70 =  22 @147 /* 34x */
  Y
  StrokeInheritance
     29:    61 =  23 @255 /* 36x */
  Diag
  StrokeInheritance
     30:    66 /* 40x */
ASM("SVTCA[X]")
ASM("CALL[], 30, 53, 24, 22, 92")
     31:    59 =  30 @ 55 /* 12x */

LowerCase
  Black
  X
  StrokeInheritance
     32:    60 /* 4x */
ASM("SVTCA[X]")
ASM("CALL[], 32, 9, 26, 25, 92")
     33:    73 =  25 @255 /* 33x */
  Y
  StrokeInheritance
     34:    59 /* 43x */
ASM("SVTCA[Y]")
ASM("CALL[], 34, 4, 26, 25, 92")
  Diag
  StrokeInheritance
     35:    48 =  27 @ 44 /* 3x */
     36:    65 /* 23x */
ASM("SVTCA[X]")
ASM("CALL[], 36, 32, 27, 25, 92")
     37:    67 =  36 @147 /* 8x */

Figure
  Black
  X
  StrokeInheritance
     38:    58 /* 1x */
     39:    71 /* 17x */
  Y
  StrokeInheritance
     40:    61 /* 19x */
  Diag
  StrokeInheritance
     41:    63 /* 8x */
     42:    57 =  41 @ 74 /* 2x */
     43:    75 /* 2x */

Other
  Black
  X
  StrokeInheritance
     44:    67 /* 21x */
     45:    76 /* 3x */
  Y
  StrokeInheritance
     46:    45 /* 2x */
     47:    56 /* 27x */
     48:    61 =  47 @ 88 /* 9x */
  Diag
  StrokeInheritance
     49:    60 /* 27x */
     50:    49 =  49 @ 40 /* 2x */
     51:    76 =  49 @ 28 /* 2x */
     52:   103 /* 1x */

/***** Stroke CVTs *****/
UpperCase
  Black
  X
  Stroke
     53:    67 =  28 @220 /* 9x */
     54:    69 =  28 @255 /* 11x */
     55:    72 =  28 @220 /* 14x */
  Y
  Stroke
     56:    55 =  29 @ 74 /* 3x */
     57:    59 =  29 @147 /* 8x */
     58:    62 =  29 @255 /* 23x */
     59:    66 =  29 @ 88 /* 2x */
  Diag
  Stroke
     60:    49 =  30 @ 26 /* 3x */
     61:    53 =  31 @ 74 /* 1x */
     62:    55 =  31 @110 /* 1x */
     63:    59 =  31 @255 /* 6x */
     64:    61 =  31 @220 /* 5x */
     65:    64 =  30 @147 /* 7x */
     66:    68 =  30 @255 /* 12x */
     67:    71 =  30 @147 /* 3x */
     68:    76 =  30 @ 49 /* 1x */
     69:    82 =  30 @ 28 /* 1x */

LowerCase
  Black
  X
  Stroke
     70:    60 =  32 @255 /* 4x */
     71:    66 =  33 @ 63 /* 6x */
     72:    70 =  33 @147 /* 8x */
     73:    73 =  33 @255 /* 16x */
     74:    76 =  33 @147 /* 3x */
  Y
  Stroke
     75:    55 =  34 @110 /* 7x */
     76:    59 =  34 @255 /* 22x */
     77:    63 =  34 @110 /* 14x */
  Diag
  Stroke
     78:    43 =  35 @ 88 /* 1x */
     79:    49 =  35 @255 /* 2x */
     80:    55 =  36 @ 44 /* 4x */
     81:    59 =  36 @ 88 /* 2x */
     82:    62 =  36 @220 /* 3x */
     83:    64 =  36 @255 /* 5x */
     84:    67 =  37 @255 /* 6x */
     85:    71 =  37 @110 /* 2x */
     86:    74 =  36 @ 44 /* 1x */

Figure
  Black
  X
  Stroke
     87:    58 =  38 @255 /* 1x */
     88:    68 =  39 @147 /* 7x */
     89:    72 =  39 @255 /* 9x */
     90:    74 =  39 @220 /* 1x */
  Y
  Stroke
     91:    61 =  40 @255 /* 18x */
     92:    66 =  40 @ 88 /* 1x */
  Diag
  Stroke
     93:    57 =  42 @255 /* 2x */
     94:    64 =  41 @255 /* 6x */
     95:    75 =  43 @255 /* 2x */

Other
  Black
  X
  Stroke
     96:    59 =  44 @ 55 /* 4x */
     97:    63 =  44 @110 /* 6x */
     98:    67 =  44 @255 /* 9x */
     99:    71 =  44 @110 /* 2x */
    100:    76 =  45 @255 /* 3x */
  Y
  Stroke
    101:    45 =  46 @255 /* 2x */
    102:    57 =  47 @255 /* 17x */
    103:    61 =  48 @255 /* 8x */
    104:    64 =  48 @147 /* 1x */
    105:    67 =  47 @ 40 /* 1x */
  Diag
  Stroke
    106:    47 =  50 @220 /* 1x */
    107:    50 =  50 @255 /* 1x */
    108:    55 =  49 @147 /* 1x */
    109:    58 =  49 @255 /* 6x */
    110:    60 =  49 @220 /* 6x */
    111:    63 =  49 @ 88 /* 3x */
    112:    66 =  49 @ 63 /* 7x */
    113:    74 =  51 @220 /* 1x */
    114:    77 =  51 @255 /* 1x */
    115:   103 =  52 @255 /* 1x */


    </extraProgram>

    <extraProgram name="fpgm">
/* Font-program */
/* ACT generated Sun Apr 27 04:23:05 2025 */

FDEF[], 9

/* Set fv to X
       pv perpendicular to italic angle

   CALL[], 9 */

#BEGIN
#PUSHOFF
SVTCA[X]
#PUSH, 11, 10
RS[]
SWAP[]
RS[]
NEG[]
SPVFS[]
#PUSHON
#END
ENDF[]

FDEF[], 10

/* Set fv to italic angle
       pv to Y

   CALL[], 10 */

#BEGIN
#PUSHOFF
SVTCA[Y]
#PUSH, 10, 11
RS[]
SWAP[]
RS[]
SFVFS[]
#PUSHON
#END
ENDF[]

FDEF[], 16

/* Set fv to X
       pv perpendicular to adjusted italic angle

   CALL[], 16 */

#BEGIN
#PUSHOFF
SVTCA[X]
#PUSH, 6
RS[]
#PUSH, 7
RS[]
NEG[]
SPVFS[]
#PUSHON
#END
ENDF[]

FDEF[], 31

/* fn 31 equalizes two cvts below a given ppem size

   CALL[], &lt;child cvt&gt;, &lt;parent cvt&gt;, &lt;ppem size&gt;, 31 */

#BEGIN
#PUSHOFF

/* STACK: &lt;child cvt&gt;, &lt;parent cvt&gt;, &lt;ppem size&gt; */

#PUSH, 79 /* #samples/pixel */
CALL[]
DUP[]
#PUSH, 64
LTEQ[]
IF[] /* #samples/pixel &lt;= 1 */

    /* STACK: &lt;child cvt&gt;, &lt;parent cvt&gt;, &lt;ppem size&gt;, &lt;#samples/pixel&gt; */

    POP[] /* #samples/pixel not involved */
    MPPEM[]

    /* STACK: &lt;child cvt&gt;, &lt;parent cvt&gt;, &lt;ppem size&gt;, &lt;act ppem size&gt; */

    GT[]
    IF[]
        RCVT[]
        WCVTP[]
    ELSE[]
        POP[]
        POP[]
    EIF[]

ELSE[] /* #samples/pixel &gt; 1 */

    /* STACK: &lt;child cvt&gt;, &lt;parent cvt&gt;, &lt;ppem size&gt;, &lt;#samples/pixel&gt; */

    SWAP[]
    POP[] /* ppem Size not involved */
    #PUSH, 64

    /* STACK: &lt;child cvt&gt;, &lt;parent cvt&gt;, &lt;#samples/pixel&gt;, &lt;1&gt; */

    #PUSH, 4 /* child cvt */
    CINDEX[]
    RCVT[]
    #PUSH, 4 /* parent cvt */
    CINDEX[]
    RCVT[]
    SUB[]
    ABS[]

    /* STACK: &lt;child cvt&gt;, &lt;parent cvt&gt;, &lt;#samples/pixel&gt;, &lt;1&gt;, &lt;|[child cvt] - [parent cvt]|&gt; */

    ROLL[]
    MUL[]
    GT[]
    IF[] /* 1 &gt; #samples/pixel * delta cvt */
        RCVT[]
        WCVTP[]
    ELSE[]
        POP[]
        POP[]
    EIF[]

EIF[]
#PUSHON
#END
ENDF[]

FDEF[], 40

/* Set fv to adjusted italic angle
       pv to Y

   CALL[], 40 */

#BEGIN
#PUSHOFF
SVTCA[Y]
#PUSH, 7
RS[]
#PUSH, 6
RS[]
SFVFS[]
#PUSHON
#END
ENDF[]

FDEF[], 70

/* fn changes &lt;cvt&gt; by &lt;amount&gt; (in ±1/64 pixel) at
   ppem sizes &lt;low ppem&gt; to &lt;high ppem&gt; (inclusive)

   CALL[], &lt;amount&gt;, &lt;cvt&gt;, &lt;low ppem&gt;, &lt;high ppem&gt;, 70 */

#BEGIN
#PUSHOFF
MPPEM[]
GTEQ[]
SWAP[]
MPPEM[]
LTEQ[]
AND[]
IF[]
    DUP[]
    RCVT[]
    ROLL[]
    ADD[]
    WCVTP[]
ELSE[]
    POP[]
    POP[]
EIF[]
#PUSHON
#END
ENDF[]

FDEF[], 71

/* fn changes &lt;cvt&gt; by &lt;amount&gt; (in ±1/64 pixel) at
   ppem size &lt;ppem&gt;

   CALL[], &lt;amount&gt;, &lt;cvt&gt;, &lt;ppem&gt;, 71 */

#BEGIN
#PUSHOFF
MPPEM[]
EQ[]
IF[]
    DUP[]
    RCVT[]
    ROLL[]
    ADD[]
    WCVTP[]
ELSE[]
    POP[]
    POP[]
EIF[]
#PUSHON
#END
ENDF[]

FDEF[], 72

/* fn moves &lt;point&gt; by &lt;amount&gt; (in ±1/64 pixel) at
   ppem sizes &lt;low ppem&gt; to &lt;high ppem&gt; (inclusive)

   CALL[], &lt;point&gt;, &lt;amount&gt;, &lt;low ppem&gt;, &lt;high ppem&gt;, 72 */

#BEGIN
#PUSHOFF
MPPEM[]
GTEQ[]
SWAP[]
MPPEM[]
LTEQ[]
AND[]
IF[]
    SHPIX[]
ELSE[]
    POP[]
    POP[]
EIF[]
#PUSHON
#END
ENDF[]

FDEF[], 73

/* fn moves &lt;point&gt; by &lt;amount&gt; (in ±1/64 pixel) at
   ppem size &lt;ppem&gt;

   CALL[], &lt;point&gt;, &lt;amount&gt;, &lt;ppem&gt;, 73 */

#BEGIN
#PUSHOFF
MPPEM[]
EQ[]
IF[]
    SHPIX[]
ELSE[]
    POP[]
    POP[]
EIF[]
#PUSHON
#END
ENDF[]

FDEF[], 74

/* if &lt;flag&gt; = anti-aliasing in s[2] (set by fn 84)
   fn changes &lt;cvt&gt; by &lt;amount&gt; (in ±1/64 pixel) at
   ppem sizes &lt;low ppem&gt; to &lt;high ppem&gt; (inclusive)

   CALL[], &lt;amount&gt;, &lt;cvt&gt;, &lt;low ppem&gt;, &lt;high ppem&gt;, &lt;flag&gt;, 74 */

#BEGIN
#PUSHOFF
#PUSH, 2
RS[]
EQ[]
IF[]           /* if &lt;flag&gt; = s[2] then fwd to fn 70 */
    #PUSH, 70
    CALL[]
ELSE[]         /* else cleanup stack and bail out */
    POP[]
    POP[]
    POP[]
    POP[]
EIF[]
#PUSHON
#END
ENDF[]

FDEF[], 75

/* if &lt;flag&gt; = anti-aliasing in s[2] (set by fn 84)
   fn changes &lt;cvt&gt; by &lt;amount&gt; (in ±1/64 pixel) at
   ppem size &lt;ppem&gt;

   CALL[], &lt;amount&gt;, &lt;cvt&gt;, &lt;ppem&gt;, &lt;flag&gt;, 75 */

#BEGIN
#PUSHOFF
#PUSH, 2
RS[]
EQ[]
IF[]           /* if &lt;flag&gt; = s[2] then fwd to fn 71 */
    #PUSH, 71
    CALL[]
ELSE[]         /* else cleanup stack and bail out */
    POP[]
    POP[]
    POP[]
EIF[]
#PUSHON
#END
ENDF[]

FDEF[], 76

/* if &lt;flag&gt; = anti-aliasing in s[2] (set by fn 84)
   fn moves &lt;point&gt; by &lt;amount&gt; (in ±1/64 pixel) at
   ppem sizes &lt;low ppem&gt; to &lt;high ppem&gt; (inclusive)

   CALL[], &lt;point&gt;, &lt;amount&gt;, &lt;low ppem&gt;, &lt;high ppem&gt;, &lt;flag&gt;, 76 */

#BEGIN
#PUSHOFF
#PUSH, 2
RS[]
EQ[]
IF[]           /* if &lt;flag&gt; = s[2] then fwd to fn 72 */
    #PUSH, 72
    CALL[]
ELSE[]         /* else cleanup stack and bail out */
    POP[]
    POP[]
    POP[]
    POP[]
EIF[]
#PUSHON
#END
ENDF[]

FDEF[], 77

/* if &lt;flag&gt; = anti-aliasing in s[2] (set by fn 84)
   fn moves &lt;point&gt; by &lt;amount&gt; (in ±1/64 pixel) at
   ppem size &lt;ppem&gt;

   CALL[], &lt;point&gt;, &lt;amount&gt;, &lt;ppem&gt;, &lt;flag&gt;, 77 */

#BEGIN
#PUSHOFF
#PUSH, 2
RS[]
EQ[]
IF[]           /* if &lt;flag&gt; = s[2] then fwd to fn 73 */
    #PUSH, 73
    CALL[]
ELSE[]         /* else cleanup stack and bail out */
    POP[]
    POP[]
    POP[]
EIF[]
#PUSHON
#END
ENDF[]

FDEF[], 78

/* apply minimum distance and round &lt;dist&gt; depending on s[2], &lt;code&gt;, and pv
   code = 0: position
   code = 1: distance
   code = 2: delta distance (for fractional inheritance)

   CALL[], &lt;dist&gt;, &lt;code&gt;, 78

   returns with rounded distance on stack */

#BEGIN
#PUSHOFF

/* STACK: &lt;dist&gt;, &lt;code&gt; */

SWAP[]
DUP[]
#PUSH, 0
LT[]
ROLL[]
ROLL[]
ABS[]

/* STACK: &lt;negDist&gt;, &lt;code&gt;, &lt;|dist|&gt; */

#PUSH, 0, 3 /* code */
CINDEX[]
EQ[]
IF[] /* position */

    /* STACK: &lt;negDist&gt;, &lt;code&gt;, &lt;|dist|&gt; */

    #PUSH, 64

    /* STACK: &lt;negDist&gt;, &lt;code&gt;, &lt;|dist|&gt;, &lt;#samples/pixel&gt; */

ELSE[]

    /* STACK: &lt;negDist&gt;, &lt;code&gt;, &lt;|dist|&gt; */

    #PUSH, 1, 3 /* code */
    CINDEX[]
    EQ[]
    IF[] /* distance */
        #PUSH, 5 /* minimum distance */
        RS[]
        MAX[]
    EIF[]

    #PUSH, 79 /* #samples/pixel */
    CALL[]

    /* STACK: &lt;negDist&gt;, &lt;code&gt;, &lt;|dist|&gt;, &lt;#samples/pixel&gt; */

EIF[]

SWAP[]
#PUSH, 98 /* round to virtual grid */
CALL[]

/* STACK: &lt;negDist&gt;, &lt;code&gt;, &lt;[|dist|]&gt; */

SWAP[]
POP[]

/* STACK: &lt;negDist&gt;, &lt;[|dist|]&gt; */

SWAP[]
IF[]
    NEG[]
EIF[]

/* STACK: &lt;[dist]&gt; */

#PUSHON
#END
ENDF[]

FDEF[], 79

/* depending on rendering environment and pv determine #samples/pixel for rounding etc.

   notice that for PVs other than X or Y, this method will default to X, reflecting the
   bias inherent in the asymmetrical nature of ClearType

   CALL[], 79

   returns the #samples/pixel in 26.6 */

#BEGIN
#PUSHOFF

#PUSH, 8, 0
GPV[]
POP[]
EQ[]
ADD[]
RS[]

#PUSHON
#END
ENDF[]

FDEF[], 80

/* depending on rendering environment and pv determine actual stroke optimization method

   CALL[], 80

   returns with method on stack (see fn 112 for definition of method) */

#BEGIN
#PUSHOFF

#PUSH, 12, 0
GPV[]
POP[]
EQ[]
ADD[]
RS[]

#PUSHON
#END
ENDF[]

FDEF[], 81

   /* adjust advance width to compensate for rasterizer's rounding errors

   CALL[], &lt;rsb&gt;, 81 */

#BEGIN
#PUSHOFF

/* STACK: &lt;rsb&gt; */

SVTCA[X]
DUP[]
GC[O]

/* STACK: &lt;rsb&gt;, &lt;rsb.x&gt; */
#PUSH, 2
RS[]
DUP[]
#PUSH, 4096 /* fract AW value in 26.6 */
DIV[]
#PUSH, 4096 /* 64 in 26.6 */
MUL[]
EVEN[] /* fract AW bit not set */
SWAP[]
#PUSH, 256 /* comp AW value in 26.6 */
DIV[]
#PUSH, 4096 /* 64 in 26.6 */
MUL[]
EVEN[] /* comp AW bit not set */
AND[]
IF[]
    #PUSH, 32
    ADD[]
    FLOOR[]
EIF[]

SCFS[]

#PUSHON
#END
ENDF[]

FDEF[], 83

/* CALL[], &lt;radicand&gt;, 83

   returns with square root of radicand on stack */

#BEGIN
#PUSHOFF

/* STACK: &lt;radicand&gt; */

#PUSH, 0, 2
CINDEX[]

/* STACK: &lt;radicand&gt;, &lt;low&gt;, &lt;high&gt; */

#WBeginLoop83:

    #PUSH, 2 /* low */
    CINDEX[]
    #PUSH, 2 /* high */
    CINDEX[]
    GTEQ[]
    #PUSH, WOffset83a
    SWAP[]
    JROT[], (WOffset83a=#WEndLoop83) /* while low &lt;= high */

    /* STACK: &lt;radicand&gt;, &lt;low&gt;, &lt;high&gt; */

    #PUSH, 2 /* low */
    CINDEX[]
    #PUSH, 2 /* high */
    CINDEX[]
    ADD[]
    #PUSH, 32
    MUL[]

    /* STACK: &lt;radicand&gt;, &lt;low&gt;, &lt;high&gt;, &lt;mid&gt; */

    DUP[]
    DUP[]
    #PUSH, 6 /* radicand */
    CINDEX[]
    SWAP[]
    DIV[]

    /* STACK: &lt;radicand&gt;, &lt;low&gt;, &lt;high&gt;, &lt;mid&gt;, &lt;mid&gt;, &lt;radicand/mid&gt; */

    LT[]
    IF[]

        /* STACK: &lt;radicand&gt;, &lt;low&gt;, &lt;high&gt;, &lt;mid&gt; */

        ROLL[]
        POP[]
        #PUSH, 1
        ADD[]
        SWAP[]

        /* STACK: &lt;radicand&gt;, &lt;mid+1&gt;, &lt;high&gt; */

    ELSE[]

        DUP[]
        DUP[]
        #PUSH, 6 /* radicand */
        CINDEX[]
        SWAP[]
        DIV[]

        GT[]
        IF[]

            /* STACK: &lt;radicand&gt;, &lt;low&gt;, &lt;high&gt;, &lt;mid&gt; */

            SWAP[]
            POP[]
            #PUSH, 1
            SUB[]

            /* STACK: &lt;radicand&gt;, &lt;low&gt;, &lt;mid-1&gt; */

        ELSE[]

            /* STACK: &lt;radicand&gt;, &lt;low&gt;, &lt;high&gt;, &lt;mid&gt; */

            ROLL[]
            POP[]
            SWAP[]
            POP[]
            DUP[]

            /* STACK: &lt;radicand&gt;, &lt;mid&gt;, &lt;mid&gt; */

        EIF[]

    EIF[]


    #PUSH, WOffset83b
    JMPR[], (WOffset83b=#WBeginLoop83)

#WEndLoop83:

/* STACK: &lt;radicand&gt;, &lt;low&gt;, &lt;high&gt; */

ADD[]
#PUSH, 32
MUL[]
SWAP[]
POP[]

/* STACK: &lt;mid&gt; */

#PUSHON
#END
ENDF[]

FDEF[], 84

/* fn determines current rasterizing environment and stores it in s[2] as follows:
     bit 0 (value   1) = Grey-Scaling
     bit 1 (value   2) = ClearType(tm)
     bit 2 (value   4) = Compatible Width ClearType
     bit 3 (value   8) = Vertical Direction (horizontally striped) ClearType
     bit 4 (value  16) = BGR as opposed to RGB Devices
     bit 5 (value  32) = ClearType on Rapier CE Devices
     bit 6 (value  64) = ClearType with fractional advance widths
     bit 7 (value 128) = ClearType with non-ClearType direction anti-aliasing
     bit 8 (value 256) = ClearType with gray full-pixel

   s[2] is used e.g. in fns 74 through 77

   To test against any combination of these flags, add up the respective values.

   specific to the current rasterizing environment fn stores the following parameters
     s[5] = minimum distance
     s[8] = #samples/pixel in x-direction
     s[9] = #samples/pixel in y-direction
     s[12] = stroke optimization method in x-direction
     s[13] = stroke optimization method in y-direction

   CALL[], 84 */
   /* Version 2.1 20120101 */

#BEGIN
#PUSHOFF
#PUSH,2,0
WS[]            /* s[2] = grey scaling: off (by default) */
#PUSH,35,1      /* 35 = MS Rasterizer version 1.7 */
GETINFO[]       /* 1 = tell GETINFO to give us the rasterizer version */
LTEQ[]          /* 35 &lt;= version ? */
#PUSH,64,1      /* 64 = highest rasterizer version assigned to MS */
GETINFO[]       /* 1 = tell GETINFO to give us the rasterizer version */
GTEQ[]          /* 64 &gt;= version ? */
AND[]           /* 35 &lt;= version &amp;&amp; version &lt;= 64 ? */
IF[]            /* if so, we're running MS rasterizer version 1.7 or higher */
  #PUSH,4096,32 /* 4096 = flag returned by GETINFO if grey scaling bit is on */
  GETINFO[]     /* 32 = tell GETINFO to give us the grey scaling bit */
  EQ[]          /* 4096 == flag ? */
  IF[]          /* if so, we're running under grey scaling */
    #PUSH,2,1,2
    RS[]
    ADD[]
    WS[]        /* s[2] += grey scaling: on (by now) */
  EIF[]
  #PUSH,36,1      /* 36 = MS Rasterizer version 1.6+ (WinCE) or 1.8 (WinXP) */
  GETINFO[]       /* 1 = tell GETINFO to give us the rasterizer version */
  LTEQ[]          /* 36 &lt;= version ? (already tested version &lt;= 64) */
  IF[]            /* if so, we're running MS rasterizer version 1.6+ (WinCE) or 1.8 (WinXP) or higher */
    #PUSH,8192,64 /* 8192 = flag returned by GETINFO if ClearTypeTM bit is on */
    GETINFO[]     /* 64 = tell GETINFO to give us the ClearTypeTM bit */
    EQ[]          /* 8192 == flag ? */
    IF[]          /* if so, we're running under ClearTypeTM */
      #PUSH,2,2,2
      RS[]
      ADD[]
      WS[]        /* s[2] += ClearTypeTM: on (by now) */

      #PUSH,36,1    /* 36 = MS Rasterizer version 1.6+ (WinCE) */
      GETINFO[]
      EQ[]
      IF[] /***** we're running Rasterizer v1.6+ for WinCE with ClearType *****/

        #PUSH,2,32,2
        RS[]
        ADD[]
        WS[]        /* s[2] += Rapier CE: on (by now) */
        SVTCA[Y]
        MPPEM[]
        SVTCA[X]
        MPPEM[]
        GT[]
        IF[]
          #PUSH,2,8,2
          RS[]
          ADD[]
          WS[]
        EIF[]

      ELSE[] /***** we're running Rasterizer v1.8 (or higher) for WinXP with ClearType (or Win2k 2000 with ClearType patch) *****/

        #PUSH,16384,128 /* 16384 = flag returned by GETINFO if ClearTypeTM silly aw bit is on */
        GETINFO[]       /* 128 = tell GETINFO to give us the ClearTypeTM silly aw bit */
        EQ[]            /* 16384 == flag ? */
        IF[]            /* if so, we're running under ClearTypeTM silly aw */
          #PUSH,2,4,2
          RS[]
          ADD[]
          WS[]          /* s[2] += ClearTypeTM silly aw: on (by now) */
        EIF[]

        #PUSH,16384,128 /* 32768 = flag returned by GETINFO if ClearTypeTM in vertical direction bit is on */
        MUL[]           /* Assembler restriction: produce 32768 by multiplying 16384 by 2 (2 in F26.6 is 128) */
        #PUSH,256       /* 256 = tell GETINFO to give us the ClearTypeTM in vertical direction bit */
        GETINFO[]
        EQ[]            /* 32768 == flag ? */
        IF[]            /* if so, we're running ClearTypeTM in vertical direction */
        #PUSH,2,8,2
          RS[]
          ADD[]
          WS[]          /* s[2] += ClearTypeTM in vertical direction: on (by now) */
        EIF[]

        #PUSH,16384,256 /* 65536 = flag returned by GETINFO if ClearTypeTM in BGR order bit is on */
        MUL[]           /* Assembler restriction: produce 65536 by multiplying 16384 by 4 (4 in F26.6 is 256) */
        #PUSH,512       /* 512 = tell GETINFO to give us the ClearTypeTM in BGR order bit */
        GETINFO[]
        EQ[]            /* 65536 == flag ? */
        IF[]            /* if so, we're running under ClearTypeTM in BGR order */
          #PUSH,2,16,2
          RS[]
          ADD[]
          WS[]          /* s[2] += ClearTypeTM in BGR order: on (by now) */
        EIF[]

        #PUSH,38,1      /* 38 = MS Rasterizer version 1.9 */
        GETINFO[]       /* 1 = tell GETINFO to give us the rasterizer version */
        LTEQ[]          /* 38 &lt;= version ? (already tested version &lt;= 64) */
        IF[]            /* if so, we're running MS rasterizer version 1.9 (Windows Longhorn) or higher */

          #PUSH,16384,512  /* 131072 = flag returned by GETINFO if ClearTypeTM fractional advance widths bit is on */
          MUL[]            /* Assembler restriction: produce 131072 by multiplying 16384 by 8 (8 in F26.6 is 512) */
          #PUSH,1024       /* 1024 = tell GETINFO to give us the ClearTypeTM fractional advance widths bit */
          GETINFO[]
          EQ[]             /* 131072 == flag ? */
          IF[]             /* if so, we're running under ClearTypeTM fractional advance widths */
            #PUSH,2,64,2
            RS[]
            ADD[]
            WS[]           /* s[2] += ClearTypeTM fractional advance widths: on (by now) */
          EIF[]

          #PUSH,16384,1024 /* 262144 = flag returned by GETINFO if ClearTypeTM non-ClearType direction anti-aliasing bit is on */
          MUL[]            /* Assembler restriction: produce 262144 by multiplying 16384 by 16 (16 in F26.6 is 1024) */
          #PUSH,2048       /* 2048 = tell GETINFO to give us the ClearTypeTM non-ClearType direction anti-aliasing bit */
          GETINFO[]
          EQ[]             /* 262144 == flag ? */
          IF[]             /* if so, we're running under ClearTypeTM non-ClearType direction anti-aliasing */
            #PUSH,2,128,2
            RS[]
            ADD[]
            WS[]           /* s[2] += ClearTypeTM non-ClearType direction anti-aliasing: on (by now) */
          EIF[]

          #PUSH,40,1      /* 40 = Rasterizer v2.1 Windows 8, SubPixel */
          GETINFO[]       /* 1 = tell GETINFO to give us the rasterizer version */
          LTEQ[]          /* 40 &lt;= version ? (already tested version &lt;= 64) */
          IF[]            /* if so, we're running MS rasterizer version 2.1 (Windows 8) or higher */
            #PUSH,16384,2048 /* 524288 = flag returned by GETINFO if ClearTypeTM non-ClearType direction anti-aliasing bit is on */
            MUL[]            /* Assembler restriction: produce 524288 by multiplying 16384 by 32 (32 in F26.6 is 2048) */
            #PUSH,4096       /* 4096 = tell GETINFO to give us the ClearTypeTM gray full-pixel rendering bit */
            GETINFO[]
            EQ[]             /* 524288 == flag ? */
            IF[]             /* if so, we're running under ClearTypeTM gray full-pixel rendering */
            #PUSH,2,256,2
              RS[]
              ADD[]
              WS[]           /* s[2] += ClearTypeTM gray full-pixel rendering: on (by now) */
            EIF[]
          EIF[]

        EIF[] /* Vista or greater rasterizer */

      EIF[] /* Windows ClearType (Platt) */

    EIF[] /* ClearType Enabled */
  EIF[] /* ClearType enabled rasterizer */
EIF[] /* Microsoft Rasterizer */

/* store rasterizing environment specific parameters */

#PUSH, 0, 2
RS[]
EQ[]
IF[] /* for b&amp;w */
  #PUSH, 5, 64, 8, 64, 9, 64, 12, 2, 13, 2
ELSE[]
  #PUSH, 1, 2
  RS[]
  EQ[]
  IF[] /* for grey-scaling */
    #PUSH, 5, 64, 8, 256, 9, 256, 12, 1, 13, 1
  ELSE[]
    #PUSH, 128, 2
    RS[]
    GT[]
    IF[] /* for ClearType */
      #PUSH, 5, 64, 8, 384, 9, 64
    ELSE[] /* for y-anti-aliased ClearType */
      #PUSH, 256, 2
      RS[]
      GT[]
      IF[] /* Gray ClearType */
        #PUSH, 5, 64, 8, 384, 9, 320
      ELSE[] /* Gray ClearType */
        #PUSH, 384, 2
        RS[]
        GT[]
        IF[] /* Gray ClearType */
          #PUSH, 5, 64, 8, 512, 9, 64
        ELSE[] /* Gray ClearType y-anti-aliased */
          #PUSH, 5, 64, 8, 256, 9, 256
        EIF[]
      EIF[]
    EIF[]

    #PUSH,16384,128 /* b&amp;w aw? */
    GETINFO[]
    NEQ[]
    #PUSH,16384,512 /* fract aw? */
    MUL[]
    #PUSH,1024
    GETINFO[]
    NEQ[]
    AND[]
    IF[] /* natural widths */
      #PUSH, 12, 0, 13, 1
    ELSE[] /* compatible or fractional widths */
      #PUSH, 12, 0, 13, 1
    EIF[]

  EIF[]
EIF[]

WS[]
WS[]
WS[]
WS[]
WS[]

#PUSHON
#END
ENDF[]

FDEF[], 85

/* fn 85 equalizes double specified heights below a given ppem size

   CALL[], &lt;rel cvt&gt;, &lt;ppem size&gt;, &lt;abs cvt&gt;, 85 */
   /* Version 2.0 20141201 */

#BEGIN
#PUSHOFF

/* STACK: &lt;rel cvt&gt;, &lt;ppem size&gt;, &lt;abs cvt&gt; */

RCVT[] /* pick absolute (square) height */
#PUSH, 2, 78 /* 2 appears to work for heights and weights */
CALL[]
SWAP[]

/* STACK: &lt;rel cvt&gt;, &lt;[abs cvt]&gt;, &lt;ppem size&gt; */

#PUSH, 79 /* #samples/pixel */
CALL[]
DUP[]
#PUSH, 64
LTEQ[]
IF[] /* #samples/pixel = 1 (or less...) */

    /* STACK: &lt;rel cvt&gt;, &lt;[abs cvt]&gt;, &lt;ppem size&gt;, &lt;#samples/pixel&gt; */

    POP[]
    MPPEM[]
    LTEQ[] /* specified ppem size &lt;= actual ppem size ? */
    IF[]

        /* STACK: &lt;rel cvt&gt;, &lt;[abs cvt]&gt; */

        #PUSH, 2
        CINDEX[]
        RCVT[] /* pick relative height (overshoot) */
        #PUSH, 1, 78
        CALL[]
        ADD[] /* add overshoot to square height */

        /* STACK: &lt;rel cvt&gt;, &lt;[rel cvt] + [abs cvt]&gt; */

    EIF[]

ELSE[] /* #samples/pixel &gt; 1 */

    /* STACK: &lt;rel cvt&gt;, &lt;[abs cvt]&gt;, &lt;ppem size&gt;, &lt;#samples/pixel&gt; */

    SWAP[]
    MPPEM[]
    LTEQ[] /* specified ppem size &lt;= actual ppem size */
    IF[]

      /* STACK: &lt;rel cvt&gt;, &lt;[abs cvt]&gt;, &lt;#samples/pixel&gt; */

      #PUSH, 3 /* rel cvt */
      CINDEX[]
      RCVT[]
      DUP[]
      ABS[]
      ROLL[]
      MUL[]
      #PUSH, 64

      /* STACK: &lt;rel cvt&gt;, &lt;[abs cvt]&gt;, &lt;[rel cvt]&gt;, &lt;|[rel cvt]| * #samples/pixel&gt;, &lt;1&gt; */

      GTEQ[] /* #samples/pixel greater than or equal to 1 pixel */
      IF[]

          /* STACK: &lt;rel cvt&gt;, &lt;[abs cvt]&gt;, &lt;[rel cvt]&gt; */

          #PUSH, 2, 78
          CALL[]
          ADD[] /* add overshoot to square height */

          /* STACK: &lt;rel cvt&gt;, &lt;[rel cvt] + [abs cvt]&gt; */

      ELSE[]

          /* STACK: &lt;rel cvt&gt;, &lt;[abs cvt]&gt;, &lt;[rel cvt]&gt; */

          POP[]

          /* STACK: &lt;rel cvt&gt;, &lt;[abs cvt]&gt; */

      EIF[]
    ELSE[]
          /* STACK: &lt;rel cvt&gt;,&lt;abs cvt&gt;,&lt;#samples/pixel&gt;*/
          POP[]
          /* STACK: &lt;rel cvt&gt;,&lt;abs cvt&gt;*/
    EIF[]

EIF[]

/* STACK: &lt;rel cvt&gt;, &lt;[act cvt]&gt; */

WCVTP[] /* make this the round height */
#PUSHON
#END
ENDF[]

FDEF[], 86

/* function to naturally space an accent above or below a base character

   CALL[], &lt;child&gt;, &lt;parent&gt;, &lt;roundMethod&gt;, &lt;minDist?&gt;, &lt;distance&gt;, 86

   convert distance (fUnits) to pixels, round, and space child from parent by result
   this essentially implements the functionality of an MDRP[m&gt;RWh] instrunction for
   composites which lack a suitable implementation of "original" coordinates.
   roundMethod 0, 1, 2, and 3 round down to, to, up to, and to half virtual grid
   function assumes cvt #20 is reserved and can be used temporarily in here...
   storage 16 contains a threshold ppem size. if zero, ignore the threshold, otherwise
   if less than or equal to threshold, use 64 (26.6) #samples/pixel. */

#BEGIN
#PUSHOFF

/* extract the sign from distance */
/* STACK: &lt;child&gt;, &lt;parent&gt;, &lt;roundMethod&gt;, &lt;minDist?&gt;, &lt;distance&gt; */

DUP[]
#PUSH, 0
LT[]
DUP[]
IF[]
    SWAP[]
    NEG[]
ELSE[]
    SWAP[]
EIF[]

/* scale distance using reserved cvt */
/* STACK: &lt;child&gt;, &lt;parent&gt;, &lt;roundMethod&gt;, &lt;minDist?&gt;, &lt;negDist?&gt;, &lt;|distance|&gt; */

#PUSH, 20, 20 /* reserved cvt */
ROLL[]
WCVTF[]
RCVT[]

/* determine if we are using a size threshold */
/* STACK: &lt;child&gt;, &lt;parent&gt;, &lt;roundMethod&gt;, &lt;minDist?&gt;, &lt;negDist?&gt;, &lt;|distance|'&gt; */

#PUSH, 16, 16 /* reserved storage for threshold */
RS[]
MPPEM[]
ROLL[]
RS[]
LTEQ[]
AND[] /* threshold must not be zero and &lt;= ppem */
IF[]
    #PUSH, 64 /* #samples/pixel = 1 */
ELSE[]
/* round per round method and #samples/pixel in current pv */
/* STACK: &lt;child&gt;, &lt;parent&gt;, &lt;roundMethod&gt;, &lt;minDist?&gt;, &lt;negDist?&gt;, &lt;|distance|'&gt; */

#PUSH, 79 /* #samples/pixel */
CALL[]
EIF[]

SWAP[]
#PUSH, 97, 6 /* round to virtual grid, roundMethod */
MINDEX[]
ADD[]
CALL[] /* round to virtual grid */

/* STACK: &lt;child&gt;, &lt;parent&gt;, &lt;minDist?&gt;, &lt;negDist?&gt;, &lt;[|distance|']&gt; */

/* apply minimum distance, if applicable */
ROLL[]
IF[]
    #PUSH, 5 /* minimum distance */
    RS[]
    MAX[]
EIF[]

/* fold the sign back into distance */
/* STACK: &lt;child&gt;, &lt;parent&gt;, &lt;negDist?&gt; &lt;[|distance|']&gt; */

SWAP[]
IF[]
    NEG[]
EIF[]

/* move child by [distance'] */
/* STACK: &lt;child&gt;, &lt;parent&gt;, &lt;[distance']&gt; */

SWAP[]
SRP0[]
MSIRP[m]

/* STACK: */

#PUSHON
#END
ENDF[]

FDEF[], 87

/* fn places an accent &lt;c0&gt; &lt;c1&gt; on top of a base character &lt;p0&gt; &lt;p1&gt;
   fn uses the same constraint model as fn 111 (interpolate median),
   except that for composites there is no concept of original coordinates,
   hence the respective values are provided by the caller as &lt;partialFactor&gt;

   CALL[], &lt;p0&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;p1&gt;, &lt;partialFactor&gt;, 87 */

#BEGIN
#PUSHOFF

/* partialFactor: ((c0 + c1)/2 - p0)/(p1 - p0)
   target median: ((c0 + c1)/2 - p0)*(p1' - p0')/(p1 - p0)&gt; + p0' = partialFactor*(p1' - p0')
   source median: (c0' + c1')/2
   primed coordinates are [N]ew, other coordinates are [O]riginal */

/* STACK: &lt;c0&gt;, &lt;c1&gt;, &lt;p0&gt;, &lt;partialFactor&gt;, &lt;p1&gt; */

#PUSH, 3 /* p0 */
CINDEX[]
MD[N]
MUL[]

/* STACK: &lt;c0&gt;, &lt;c1&gt;, &lt;p0&gt;, &lt;((c0 + c1)/2 - p0)*(p1' - p0')/(p1 - p0)&gt; */

SWAP[] /* p0 */
GC[N]
ADD[]

/* STACK: &lt;c0&gt;, &lt;c1&gt;, &lt;targetMedian&gt; */

#PUSH, 79 /* #samples/pixel */
CALL[]
SWAP[]

/* STACK: &lt;c0&gt;, &lt;c1&gt;, &lt;#samples/pixel&gt;, &lt;targetMedian&gt; */

#PUSH, 4 /* c0 */
CINDEX[]
#PUSH, 4 /* c1 */
CINDEX[]
MD[N]
#PUSH, 3 /* #samples/pixel */
CINDEX[]
MUL[]

/* STACK: &lt;c0&gt;, &lt;c1&gt;, &lt;#samples/pixel&gt;, &lt;targetMedian&gt;, &lt;numVirtualPixels&gt; */

ODD[]
DUP[]
ADD[]
#PUSH, 98
ADD[]
CALL[] /* round to (half) virtual grid */

/* STACK: &lt;c0&gt;, &lt;c1&gt;, &lt;[targetMedian]&gt; */

#PUSH, 3 /* c0 */
CINDEX[]
DUP[]
SRP0[]
GC[N]
ROLL[] /* c1 */
GC[N]
ADD[]
#PUSH, 32
MUL[]

/* STACK: &lt;c0&gt;, &lt;targetMedian&gt;, &lt;sourceMedian&gt; */

SUB[]

/* STACK: &lt;c0&gt;, &lt;offset&gt; */

MSIRP[m]

#PUSHON
#END
ENDF[]

FDEF[], 88

/* set up storage locations with the x and y components
   of the italic and adjusted italic angles as follows:

     s[ 6] = adjusted italic angle y
     s[ 7] = adjusted italic angle x
     s[10] = italic angle y
     s[11] = italic angle x

   while rendering in b&amp;w, determines the optimal phase
   for positioning italic strokes

     s[ 4] = optimal phase

   CALL[], &lt;riseCvt&gt;, &lt;runCvt&gt;, 88 */

#BEGIN
#PUSHOFF

/* STACK: &lt;riseCvt&gt;, &lt;runCvt&gt; */

#PUSH, 0 /* Use twilight points to calculate stroke angles */
SZPS[]

#PUSH, 2, 3 /* riseCvt */
CINDEX[]
#PUSH, 1, 4 /* runCvt */
CINDEX[]

/* STACK: &lt;riseCvt&gt;, &lt;runCvt&gt;, &lt;2&gt;, &lt;riseCvt&gt;, &lt;1&gt;, &lt;runCvt&gt; */

SVTCA[X] /* Set twilight point 1 with italic run cvt in x */
MIAP[r]

SVTCA[Y] /* Set twilight point 2 with italic rise cvt in y */
MIAP[r]

#PUSH, 1, 2 /* and let the rasterizer do the math */
SPVTL[r]
GPV[]

#PUSH, 10 /* store the x and y components of the italic angle */
SWAP[]
NEG[]     /* notice that since we're essentially setting the pv to a line  */
WS[]      /* from (runCvt,0) to (0,riseCvt), the calculcated pv will be    */
#PUSH, 11 /* proportional to (runCvt,0) - (0,riseCvt) = (runCvt,-riseCvt). */
SWAP[]    /* Hence we have to mirror the result at the base line, which is */
WS[]      /* done by flipping (negating) the sign of the y component here. */

/* STACK: &lt;riseCvt&gt;, &lt;runCvt&gt; */

#PUSH, 2, 3 /* riseCvt */
CINDEX[]
#PUSH, 1, 4 /* runCvt */
CINDEX[]

SVTCA[X] /* same for the adjusted italic angle */
MIAP[R]  /* except to round the twilight point in x... */

SVTCA[Y]
MIAP[R]  /* ...and in y */

#PUSH, 1, 2
SPVTL[r]
GPV[]

#PUSH, 6
SWAP[]
NEG[]    /* same neg as above */
WS[]
#PUSH, 7
SWAP[]
WS[]

#PUSH, 1 /* restore graphics state */
SZPS[]

/* STACK: &lt;riseCvt&gt;, &lt;runCvt&gt; */

#PUSH, 0, 2
RS[]
EQ[]
IF[] /* running b&amp;w? */

    /* STACK: &lt;riseCvt&gt;, &lt;runCvt&gt; */
    /* determine adjusted run' = run*[rise]/rise */

    RCVT[]
    SWAP[]
    RCVT[]
    DUP[]
    RTG[]
    ROUND[Bl]
    ROLL[]
    MUL[]
    SWAP[]
    DIV[]

    /* STACK: &lt;run'&gt; */
    /* determine phase = (run' - [run'])/2 = half the rounding error */

    DUP[]
    DUP[]
    #PUSH, 64
    LT[]
    IF[]
        CEILING[] /* optimize for "minimum italic angle" */
    ELSE[]
        FLOOR[] /* optimize for minimal number of jaggies */
    EIF[]
    SUB[]
    #PUSH, 32
    MUL[]

    /* STACK: &lt;phase&gt; */
    /* for its use on bottom italic edge, determine complement to full pixel */

    #PUSH, 64
    SWAP[]
    SUB[]

    /* and store in s[4] */

    #PUSH, 4
    SWAP[]
    WS[]

    /* STACK: */

ELSE[]

    /* STACK: &lt;riseCvt&gt;, &lt;runCvt&gt; */

    #PUSH, 4, 0
    WS[]
    POP[]
    POP[]

    /* STACK: */

EIF[]

RTG[]
SVTCA[X]

#PUSHON
#END
ENDF[]

FDEF[], 89

/* function rounds &lt;cvt&gt; depending on rendering environment and pv

   CALL[], &lt;cvt&gt;, 89 */

#BEGIN
#PUSHOFF

DUP[]
RCVT[]
#PUSH, 0, 78 /* roundDist */
CALL[]
WCVTP[]

#PUSHON
#END
ENDF[]

FDEF[], 90

/* below &lt;ppem&gt;: make both children the same as the (averaged) parent cvt
   at and above: calculate child cvt &lt;ch0&gt; as &lt;fraction&gt; of child cvt &lt;ch1&gt;

   CALL[], &lt;p&gt;, &lt;ch0&gt;, &lt;fraction&gt;, &lt;ch1&gt;, &lt;ppem&gt;, 90 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p&gt;, &lt;ch0&gt;, &lt;fraction&gt;, &lt;ch1&gt;, &lt;ppem&gt; */

MPPEM[]
LTEQ[]
#PUSH, 64, 79 /* #samples/pixel */
CALL[]
LT[]
OR[]
IF[] /* at or above ppem limit or rounding to less than a pixel */

    /* STACK: &lt;p&gt;, &lt;ch0&gt;, &lt;fraction&gt;, &lt;ch1&gt; */

    DUP[]
    RCVT[]
    #PUSH, 1, 78 /* roundDist */
    CALL[]
    DUP[]
    ROLL[]
    ROLL[]

    /* STACK: &lt;p&gt;, &lt;ch0&gt;, &lt;fraction&gt;, &lt;[ch1]&gt;, &lt;ch1&gt;, &lt;[ch1]&gt; */

    WCVTP[]

    /* STACK: &lt;p&gt;, &lt;ch0&gt;, &lt;fraction&gt;, &lt;[ch1]&gt; */

    DUP[]
    #PUSH, 64, 4
    MINDEX[]
    SUB[]
    MUL[]
    SUB[]
    #PUSH, 1, 78 /* roundDist */
    CALL[]

    /* STACK: &lt;p&gt;, &lt;ch0&gt;, &lt;[ch1] - [ch1]*(1-fraction)&gt; */

    WCVTP[]
    POP[] /* parent not involved */

    /* STACK: */

ELSE[]

    /* STACK: &lt;p&gt;, &lt;ch0&gt;, &lt;fraction&gt;, &lt;ch1&gt; */

    SWAP[]
    POP[] /* fraction not involved */

    /* STACK: &lt;p&gt;, &lt;ch0&gt;, &lt;ch1&gt; */

    ROLL[]
    RCVT[]
    #PUSH, 1, 78 /* roundDist */
    CALL[]

    /* STACK: &lt;ch0&gt;, &lt;ch1&gt;, &lt;[p]&gt; */

    DUP[]
    ROLL[]
    SWAP[]

    /* STACK: &lt;ch0&gt;, &lt;[p]&gt;, &lt;ch1&gt;, &lt;[p]&gt; */

    WCVTP[]
    WCVTP[]

    /* STACK: */

EIF[]

#PUSHON
#END
ENDF[]

FDEF[], 91

/* below &lt;ppem&gt;: make child cvt &lt;ch&gt; the same as parent cvt &lt;p&gt;
   at and above: calculate child cvt &lt;ch&gt; as &lt;fraction&gt; of parent cvt &lt;p&gt;

   CALL[], &lt;ch&gt;, &lt;fraction&gt;, &lt;p&gt;, &lt;ppem&gt;, 91 */

#BEGIN
#PUSHOFF

/* STACK: &lt;ch&gt;, &lt;fraction&gt;, &lt;p&gt;, &lt;ppem&gt; */

MPPEM[]
LTEQ[]
#PUSH, 64, 79 /* #samples/pixel */
CALL[]
LT[]
OR[]
IF[] /* at or above ppem limit or rounding to less than a pixel */

    /* STACK: &lt;ch&gt;, &lt;fraction&gt;, &lt;p&gt; */

    RCVT[]
    DUP[]
    ROLL[]

    /* STACK: &lt;ch&gt;, &lt;[p]&gt;, &lt;[p]&gt;, &lt;fraction&gt; */

    #PUSH, 64
    SUB[]
    MUL[]
    ADD[]

    /* STACK: &lt;ch&gt;, &lt;[p] + [p]*(fraction - 1)&gt; */

ELSE[]

    /* STACK: &lt;ch&gt;, &lt;fraction&gt;, &lt;p&gt; */

    SWAP[]
    POP[] /* fraction not involved */

    RCVT[]

    /* STACK: &lt;ch&gt;, [p] */

EIF[]

#PUSH, 1, 78 /* roundDist */
CALL[]
WCVTP[]

/* STACK: */

#PUSHON
#END
ENDF[]

FDEF[], 92

/* function to calculate a child cvt &lt;ch&gt;
   as a &lt;blend&gt; of two parent cvts &lt;p0&gt;, &lt;p1&gt;

   CALL[], &lt;ch&gt;, &lt;blend&gt;, &lt;p0&gt;, &lt;p1&gt;, 92 */

#BEGIN
#PUSHOFF

/* STACK: &lt;ch&gt;, &lt;blend&gt;, &lt;p0&gt;, &lt;p1&gt; */

SWAP[]
RCVT[]
DUP[]

/* STACK: &lt;ch&gt;, &lt;blend&gt;, &lt;p1&gt;, &lt;[p0]&gt;, &lt;[p0]&gt; */

ROLL[]
RCVT[]

SWAP[]
SUB[]

/* STACK: &lt;ch&gt;, &lt;blend&gt;, &lt;[p0]&gt;, &lt;[p1] - [p0]&gt; */

DUP[]
ABS[]
#PUSH, 64
LTEQ[]

/* STACK: &lt;ch&gt;, &lt;blend&gt;, &lt;[p0]&gt;, &lt;[p1] - [p0]&gt;, &lt;contrast &lt;= 1 pixel(s)?&gt; */

#PUSH, 4
CINDEX[]
DUP[]
#PUSH, 0
GTEQ[]
SWAP[]
#PUSH, 64
LTEQ[]
AND[]

AND[]

/* STACK: &lt;ch&gt;, &lt;blend&gt;, &lt;[p0]&gt;, &lt;[p1] - [p0]&gt;, &lt;contrast &lt;= 1 pixel(s) &amp;&amp; blend &gt;= 0 &amp;&amp; blend &lt;= 64?&gt; */

#PUSH, 64, 79 /* #samples/pixel */
CALL[]
EQ[]

AND[]

/* STACK: &lt;ch&gt;, &lt;blend&gt;, &lt;[p0]&gt;, &lt;[p1] - [p0]&gt;, &lt;contrast &lt;= 1 pixel(s) &amp;&amp; blend &gt;= 0 &amp;&amp; blend &lt;= 64 &amp;&amp; rounding to full pixel?&gt; */

IF[]

    /* STACK: &lt;ch&gt;, &lt;blend&gt;, &lt;[p0]&gt;, &lt;[p1] - [p0]&gt; */

    ROLL[]
    GPV[]
    ABS[]
    SWAP[]
    ABS[]
    SWAP[]

    /* STACK: &lt;ch&gt;, &lt;[p0]&gt;, &lt;[p1] - [p0]&gt;, &lt;blend&gt;, &lt;|pv.x|&gt;, &lt;|pv.y|&gt; */

    GTEQ[] /* pv closer to x? */
    IF[]

        /* STACK: &lt;ch&gt;, &lt;[p0]&gt;, &lt;[p1] - [p0]&gt;, &lt;blend&gt; */
        /* bias towards p1: blend' := 1 - (1 - blend)² */

        #PUSH, 64, 64
        ROLL[]
        SUB[]
        DUP[]
        MUL[]
        SUB[]

        /* &lt;ch&gt;, &lt;[p0]&gt;, &lt;[p1] - [p0]&gt;, &lt;1 - (1 - blend)²&gt; */

    ELSE[]

        /* STACK: &lt;ch&gt;, &lt;[p0]&gt;, &lt;[p1] - [p0]&gt;, &lt;blend&gt; */
        /* bias towards p0: blend' := blend² */

        DUP[]
        MUL[]

    /* STACK: &lt;ch&gt;, &lt;[p0]&gt;, &lt;[p1] - [p0]&gt;, &lt;blend²&gt; */

    EIF[]

ELSE[]

    /* STACK: &lt;ch&gt;, &lt;blend&gt;, &lt;[p0]&gt;, &lt;[p1] - [p0]&gt; */
    /* use unbiased blend */

    ROLL[]

    /* STACK: &lt;ch&gt;, &lt;[p0]&gt;, &lt;[p1] - [p0]&gt;, &lt;blend&gt; */

EIF[]

/* STACK: &lt;ch&gt;, &lt;[p0]&gt;, &lt;[p1] - [p0]&gt;, &lt;blend&gt; */

MUL[]
#PUSH, 2, 78 /* roundDist */
CALL[]
ADD[]

/* STACK: &lt;ch&gt;, &lt;[ch]&gt; */

WCVTP[]

#PUSHON
#END
ENDF[]

FDEF[], 93

/* fn sets vectors to X (used in calculated calls)

   CALL[], 93 */

#BEGIN
#PUSHOFF
SVTCA[X]
#PUSHON
#END
ENDF[]

FDEF[], 94

/* fn sets vectors to Y (used in calculated calls)

   CALL[], 94 */

#BEGIN
#PUSHOFF
SVTCA[Y]
#PUSHON
#END
ENDF[]

FDEF[], 95

/* Set fv to X, pv perpendicular to italic angle (used in calculated calls)

   CALL[], 95 */

#BEGIN
#PUSHOFF
SFVTCA[X]
#PUSH, 11, 10
RS[]
SWAP[]
RS[]
NEG[]
SPVFS[]
#PUSHON
#END
ENDF[]

FDEF[], 96

/* Set fv to italic angle, pv to Y (used in calculated calls)

   CALL[], 96 */

#BEGIN
#PUSHOFF
#PUSH, 10, 11
RS[]
SWAP[]
RS[]
SFVFS[]
SPVTCA[Y]
#PUSHON
#END
ENDF[]

FDEF[], 97

/* round down to virtual grid

   CALL[], &lt;#samples/pixel&gt;, &lt;argument&gt;, 97

   returns with rounded argument on stack */

#BEGIN
#PUSHOFF

/* STACK: &lt;#samples/pixel&gt;, &lt;argument&gt; */
/* upscale argument by #samples/pixel */

#PUSH, 2 /* #samples/pixel */
CINDEX[]
MUL[]

/* do the rounding in upscaled domain */

FLOOR[] /* round down to super grid */

/* Downscaling uses a DIV[] operation, which is implemented as floor(numerator/denominator).
   For round(numerator/denominator) instead, add ½ denominator to numerator before dividing.
   But since the division in 26.6 has to multiply the numerator by 2^6 (64) before dividing,
   we have to divide said ½ denominator by 64 before adding, hence the 8192 (= 128 in 26.6). */

#PUSH, 2 /* #samples/pixel */
CINDEX[]
#PUSH, 8192
DIV[]
ADD[]

/* downscale rounded and adjusted argument */

SWAP[] /* #samples/pixel */
DIV[]

/* STACK: &lt;[argument]&gt; */

#PUSHON
#END
ENDF[]

FDEF[], 98

/* round to virtual grid

   CALL[], &lt;#samples/pixel&gt;, &lt;argument&gt;, 98

   returns with rounded argument on stack */

#BEGIN
#PUSHOFF

/* STACK: &lt;#samples/pixel&gt;, &lt;argument&gt; */

#PUSH, 2 /* #samples/pixel */
CINDEX[]
MUL[]

/* do the rounding in upscaled domain */

#PUSH, 32 /* round to super grid */
ADD[]
FLOOR[]

/* see above for adjustments below */

#PUSH, 2 /* #samples/pixel */
CINDEX[]
#PUSH, 8192
DIV[]
ADD[]

/* downscale rounded and adjusted argument */

SWAP[] /* #samples/pixel */
DIV[]

/* STACK: &lt;[argument]&gt; */

#PUSHON
#END
ENDF[]

FDEF[], 99

/* round up to virtual grid

   CALL[], &lt;#samples/pixel&gt;, &lt;argument&gt;, 99

   returns with rounded argument on stack */

#BEGIN
#PUSHOFF

/* STACK: &lt;#samples/pixel&gt;, &lt;argument&gt; */

#PUSH, 2 /* #samples/pixel */
CINDEX[]
MUL[]

/* do the rounding in upscaled domain */

CEILING[] /* round up to super grid */

/* see above for adjustments below */

#PUSH, 2 /* #samples/pixel */
CINDEX[]
#PUSH, 8192
DIV[]
ADD[]

/* downscale rounded and adjusted argument */

SWAP[] /* #samples/pixel */
DIV[]

/* STACK: &lt;[argument]&gt; */

#PUSHON
#END
ENDF[]

FDEF[], 100

/* round to half virtual grid

   CALL[], &lt;#samples/pixel&gt;, &lt;argument&gt;, 100

   returns with rounded argument on stack */

#BEGIN
#PUSHOFF

/* STACK: &lt;#samples/pixel&gt;, &lt;argument&gt; */

#PUSH, 2 /* #samples/pixel */
CINDEX[]
MUL[]

/* do the rounding in upscaled domain */

FLOOR[]
#PUSH, 32 /* round to half super grid */
ADD[]

/* see above for adjustments below */

#PUSH, 2 /* #samples/pixel */
CINDEX[]
#PUSH, 8192
DIV[]
ADD[]

/* downscale rounded and adjusted argument */

SWAP[] /* #samples/pixel */
DIV[]

/* STACK: &lt;[argument]&gt; */

#PUSHON
#END
ENDF[]

FDEF[], 101

/* determine actual distance to be used for emulating MDRP[&lt;]
   instruction with rendering environment specific rounding

   CALL[], &lt;p&gt;, &lt;c&gt;, 101

   returns with rounded distance on stack */

#BEGIN
#PUSHOFF

/* STACK: &lt;p&gt;, &lt;c&gt; */

SWAP[]
MD[O]

/* round without minDist */

#PUSH, 2, 78 /* roundDist */
CALL[]

/* STACK: &lt;[w]&gt; */

#PUSHON
#END
ENDF[]

FDEF[], 102

/* determine actual distance to be used for emulating MDRP[&gt;]
   instruction with rendering environment specific rounding

   CALL[], &lt;p&gt;, &lt;c&gt;, 102

   returns with rounded distance on stack */

#BEGIN
#PUSHOFF

/* STACK: &lt;p&gt;, &lt;c&gt; */

SWAP[]
MD[O]

/* round with minDist */

#PUSH, 1, 78 /* roundDist */
CALL[]

/* STACK: &lt;[w]&gt; */

#PUSHON
#END
ENDF[]

FDEF[], 103

/* determine actual distance to be used for emulating MIRP[&lt;]
   instruction with rendering environment specific rounding

   CALL[], &lt;p&gt;, &lt;c&gt;, &lt;cvt&gt;, 103

   returns with rounded distance on stack */

#BEGIN
#PUSHOFF

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;cvt&gt; */

SWAP[] /* c */
ROLL[] /* p */
MD[O]
SWAP[] /* cvt */

/* STACK: &lt;wNat&gt;, &lt;cvt&gt; */
/* do cvt cut-in test */

RCVT[]
ABS[]
#PUSH, 2
CINDEX[]
ABS[]
#PUSH, 2
CINDEX[]
SUB[]
ABS[]
#PUSH, 3 /* cvt cut-in */
RS[]

/* STACK: &lt;wNat&gt;, &lt;|wCvt|&gt;, &lt;||wNat| - |wCvt||&gt;, &lt;cvt cut-in&gt; */

GT[]
IF[]

    /* STACK: &lt;wNat&gt;, &lt;|wCvt|&gt; */
    /* cvt cut-in test failed */

    POP[]
    DUP[]
    ABS[]

    /* else cvt cut-in test succeeded */

EIF[]

/* STACK: &lt;wNat&gt;, &lt;|w|&gt; */
/* round without minDist */

#PUSH, 2, 78 /* roundDist */
CALL[]

/* STACK: &lt;wNat&gt;, &lt;[w]&gt; */
/* inherit sign from wNat */

SWAP[]
#PUSH, 0
LT[]
IF[]
    NEG[]
EIF[]

/* STACK: &lt;[w]&gt; */

#PUSHON
#END
ENDF[]

FDEF[], 104

/* determine actual distance to be used for emulating MIRP[&gt;]
   instruction with rendering environment specific rounding

   CALL[], &lt;p&gt;, &lt;c&gt;, &lt;cvt&gt;, 104

   returns with rounded distance on stack */

#BEGIN
#PUSHOFF

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;cvt&gt; */

SWAP[] /* c */
ROLL[] /* p */
MD[O]
SWAP[] /* cvt */

/* STACK: &lt;wNat&gt;, &lt;cvt&gt; */
/* do cvt cut-in test */

RCVT[]
ABS[]
#PUSH, 2
CINDEX[]
ABS[]
#PUSH, 2
CINDEX[]
SUB[]
ABS[]
#PUSH, 3 /* cvt cut-in */
RS[]

/* STACK: &lt;wNat&gt;, &lt;|wCvt|&gt;, &lt;||wNat| - |wCvt||&gt;, &lt;cvt cut-in&gt; */

GT[]
IF[]

    /* STACK: &lt;wNat&gt;, &lt;|wCvt|&gt; */
    /* cvt cut-in test failed */

    POP[]
    DUP[]
    ABS[]

    /* else cvt cut-in test succeeded */

EIF[]

/* STACK: &lt;wNat&gt;, &lt;|w|&gt; */
/* round with minDist */

#PUSH, 1, 78 /* roundDist */
CALL[]

/* STACK: &lt;wNat&gt;, &lt;[w]&gt; */
/* inherit sign from wNat */

SWAP[]
#PUSH, 0
LT[]
IF[]
    NEG[]
EIF[]

/* STACK: &lt;[w]&gt; */

#PUSHON
#END
ENDF[]

FDEF[], 105

/* emulate MDRP[&lt;] instruction with rendering environment specific rounding

   CALL[], &lt;p&gt;, &lt;c&gt;, 105 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p&gt;, &lt;c&gt; */

DUP[] /* c */
#PUSH, 3 /* p */
CINDEX[]
MD[O]
#PUSH, 2, 78 /* roundDist */
CALL[]

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;[dist]&gt; */

ROLL[]
SRP0[]
MSIRP[M]

#PUSHON
#END
ENDF[]

FDEF[], 106

/* emulate MDRP[&gt;] instruction with rendering environment specific rounding

   CALL[], &lt;p&gt;, &lt;c&gt;, 106 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p&gt;, &lt;c&gt; */

DUP[] /* c */
#PUSH, 3 /* p */
CINDEX[]
MD[O]
#PUSH, 1, 78 /* roundDist */
CALL[]

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;[dist]&gt; */

ROLL[]
SRP0[]
MSIRP[M]

#PUSHON
#END
ENDF[]

FDEF[], 107

/* emulate MIRP[&lt;] instruction with rendering environment specific rounding

   CALL[], &lt;p&gt;, &lt;c&gt;, &lt;cvt&gt;, 107 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;cvt&gt; */

#PUSH, 3 /* p */
CINDEX[]
#PUSH, 3 /* c */
CINDEX[]
ROLL[] /* cvt */
#PUSH, 103 /* resActDist, cvt, noMinDist */
CALL[]

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;[dist]&gt; */

ROLL[]
SRP0[]
MSIRP[M]

#PUSHON
#END
ENDF[]

FDEF[], 108

/* emulate MIRP[&gt;] instruction with rendering environment specific rounding

   CALL[], &lt;p&gt;, &lt;c&gt;, &lt;cvt&gt;, 108 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;cvt&gt; */

#PUSH, 3 /* p */
CINDEX[]
#PUSH, 3 /* c */
CINDEX[]
ROLL[] /* cvt */
#PUSH, 104 /* resActDist, cvt, minDist */
CALL[]

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;[dist]&gt; */

ROLL[]
SRP0[]
MSIRP[M]

#PUSHON
#END
ENDF[]

FDEF[], 109

/* fn symmetrically constrains a stroke &lt;p&gt;, &lt;c&gt; with &lt;cvt&gt;

   CALL[], &lt;p&gt;, &lt;c&gt;, &lt;cvt&gt;, 109 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;cvt&gt; */
/* determine old median */

#PUSH, 3 /* &lt;p&gt; */
CINDEX[]
GC[N]
#PUSH, 3 /* &lt;c&gt; */
CINDEX[]
GC[N]
ADD[]

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;cvt&gt;, &lt;2*median&gt; */
/* lock parent */

#PUSH, 4 /* p */
CINDEX[]
MDAP[r]

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;cvt&gt;, &lt;2*median&gt; */
/* link child */

#PUSH, 4 /* p */
CINDEX[]
#PUSH, 4 /* c */
CINDEX[]
#PUSH, 4 /* cvt */
MINDEX[]
DUP[]
#PUSH, 0
LT[]
IF[]
    POP[]
    #PUSH, 106 /* resMIRP, noCvt, minDist */
ELSE[]
    #PUSH, 108 /* resMIRP, cvt, minDist */
EIF[]
CALL[]

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;2*median&gt; */
/* determine new median */

#PUSH, 3 /* &lt;p&gt; */
CINDEX[]
GC[N]
#PUSH, 3 /* &lt;c&gt; */
CINDEX[]
GC[N]
ADD[]

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;2*median&gt;, &lt;2*median'&gt; */

SUB[]
#PUSH, 128
DIV[] /* floor to 1/64 for now */

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;deltaMedian&gt; */

DUP[]
ROLL[]
DUP[]
SRP0[]
SWAP[]
MSIRP[m]
SWAP[]
DUP[]
SRP0[]
SWAP[]
MSIRP[m]

/* STACK: */

#PUSHON
#END
ENDF[]

FDEF[], 110

/* calculate offset for emulation of interpolation of median of
   &lt;c0&gt; and &lt;c1&gt; between parents &lt;p0&gt; and &lt;p1&gt; using current pv and fv

   CALL[], &lt;p0&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;p1&gt;, 110

   returns with offset on stack */

#BEGIN
#PUSHOFF

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;p1&gt; */

#PUSH, 3 /* c0 */
CINDEX[]
GC[O]
#PUSH, 3 /* c1 */
CINDEX[]
GC[O]
ADD[]

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;p1&gt;, &lt;c0 + c1&gt; */

#PUSH, 5 /* p0 */
CINDEX[]
GC[O]
#PUSH, 128
MUL[]
SUB[]

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;p1&gt;, &lt;c0 + c1 - 2*p0&gt; */

#PUSH, 2 /* p1 */
CINDEX[]
#PUSH, 6 /* p0 */
CINDEX[]
MD[N]
MUL[]

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;p1&gt;, &lt;(c0 + c1 - 2*p0)*(p1' - p0')&gt; */

SWAP[] /* p1 */
#PUSH, 5 /* p0 */
CINDEX[]
MD[O]
#PUSH, 128
MUL[]

/* prevent inadvertent divide-by-zero e.g. on non-spacing glyphs */
DUP[]
IF[]
    DIV[]
ELSE[]
    POP[]
EIF[]

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;(c0 + c1 - 2*p0)*(p1' - p0')/(2*(p1 - p0))&gt; */

#PUSH, 4 /* p0 */
MINDEX[]
GC[N]
ADD[]

/* STACK: &lt;c0&gt;, &lt;c1&gt;, &lt;(c0'' + c1'')/2&gt; */

ROLL[] /* c0 */
GC[N]
ROLL[] /* c1 */
GC[N]
ADD[]
#PUSH, 32
MUL[]

/* STACK: &lt;(c0'' + c1'')/2&gt;, &lt;(c0' + c1')/2&gt; */

SUB[]

/* STACK: &lt;offset&gt; */

#PUSHON
#END
ENDF[]

FDEF[], 111

/* emulate interpolation of median of &lt;c0&gt; and &lt;c1&gt;
   between parents &lt;p0&gt; and &lt;p1&gt; using current pv and fv

   CALL[], &lt;p0&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;p1&gt;, 111 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;p1&gt; */

#PUSH, 4 /* p0 */
MINDEX[]
#PUSH, 4 /* c0 */
CINDEX[]
#PUSH, 4 /* c1 */
CINDEX[]
#PUSH, 4 /* p1 */
MINDEX[]
#PUSH, 110 /* calc offset for interpolation of median */
CALL[]

/* STACK: &lt;c0&gt;, &lt;c1&gt;, &lt;offset&gt; */

DUP[]

/* STACK: &lt;c0&gt;, &lt;c1&gt;, &lt;offset&gt;, &lt;offset&gt; */

ROLL[]
DUP[]
SRP0[]
SWAP[]

/* STACK: &lt;c0&gt;, &lt;offset&gt;, &lt;c1&gt;, &lt;offset&gt; */

MSIRP[m]

SWAP[]
DUP[]
SRP0[]
SWAP[]

/* STACK: &lt;c0&gt;, &lt;offset&gt; */

MSIRP[m]

#PUSHON
#END
ENDF[]

FDEF[], 112


/* adjust (unrounded) stroke phase to target phase according to &lt;method&gt;

   method 0: round to nearest virtual pixel
   method 1: apply method 2 below 2 pixel wide strokes else method 0
   method 2: optimize for max #black pixels
   method 3: optimize for one edge aligned

   right?: boolean indicating a left (false) or right (true) stroke)

   CALL[], &lt;phase&gt;, &lt;weight&gt;, &lt;method&gt;, &lt;right?&gt;, 112

   returns with (rounded) adjusted phase on stack */

#BEGIN
#PUSHOFF

/* STACK: &lt;phase&gt;, &lt;weight&gt;, &lt;method&gt;, &lt;right?&gt; */

SWAP[]

DUP[]
#PUSH, 1
EQ[]
IF[]

    /* STACK: &lt;phase&gt;, &lt;weight&gt;, &lt;right?&gt;, &lt;method&gt; */
    /* replace method depending on stroke weight */

    POP[]
    #PUSH, 2 /* weight */
    CINDEX[]
    #PUSH, 2, 78 /* roundDist */
    CALL[]
    #PUSH, 128
    LT[]
    DUP[]
    ADD[]
EIF[]

DUP[]
ADD[]
ADD[]

/* STACK: &lt;phase&gt;, &lt;weight&gt;, &lt;method' = 2*method + right&gt; */

DUP[]
#PUSH, 1
LTEQ[]
IF[] /* just round to nearest virtual pixel */

    POP[]
    POP[]

    /* STACK: &lt;phase&gt; */

ELSE[]
    DUP[]
    #PUSH, 5
    LTEQ[]
    IF[] /* optimize for max #black pixels */

        POP[]

        /* STACK: &lt;phase&gt;, &lt;weight&gt; */

        DUP[]
        FLOOR[]
        SUB[]

        /* STACK: &lt;phase&gt;, &lt;fractWeight&gt; */

        #PUSH, 64
        SWAP[]
        SUB[]

        /* STACK: &lt;phase&gt;, &lt;1-fractWeight&gt; */

        #PUSH, 0, 3 /* phase */
        CINDEX[]
        LT[]
        #PUSH, 3 /* phase */
        CINDEX[]
        #PUSH, 3 /* 1-fractWeight */
        CINDEX[]
        LT[]
        AND[]
        IF[] /* if 0 &lt; phase &lt; 1-fractWeight then need to adjust phase */

            /* STACK: &lt;phase&gt;, &lt;1-fractWeight&gt; */

            DUP[]
            #PUSH, 3
            CINDEX[]
            SUB[]

            /* STACK: &lt;phase&gt;, &lt;1-fractWeight&gt;, &lt;1-fractWeight-phase&gt; */

            ROLL[]
            GTEQ[]
            IF[] /* error from phase to 1-fractWeight &gt;= error from 0 to phase */
                POP[]
                #PUSH, 0 /* target 0 as phase */
            EIF[]
            /* else target 1-fractWeight as phase, which is what's left on stack */

        ELSE[]

            /* STACK: &lt;phase&gt;, &lt;1-fractWeight&gt; */

            POP[]

        EIF[]

    ELSE[] /* optimize for one edge aligned */

        /* STACK: &lt;phase&gt;, &lt;weight&gt;, &lt;method'&gt; */

        #PUSH, 7
        EQ[]
        IF[] /* right flush */

            /* STACK: &lt;phase&gt;, &lt;weight&gt; */

            DUP[]
            FLOOR[]
            SUB[]

            /* STACK: &lt;phase&gt;, &lt;fractWeight&gt; */

            NEG[]
            SWAP[]
            POP[]

        ELSE[] /* left flush (and default) */

            /* STACK: &lt;phase&gt;, &lt;weight&gt; */

            POP[]
            POP[]
            #PUSH, 0

        EIF[]

    EIF[]

EIF[]

#PUSH, 2, 78 /* roundDist */
CALL[]

/* STACK: phase */

#PUSHON
#END
ENDF[]

FDEF[], 113

/* fn calculates delta phase for optimal position of
   stroke bordered by &lt;p&gt; and &lt;c&gt; according to &lt;method&gt;
   (see fn 112 for definition of method)

   CALL[], &lt;p&gt;, &lt;c&gt;, &lt;method&gt;, 113

   returns with delta phase in interval ]-½,+½] on stack */

#BEGIN
#PUSHOFF

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;method&gt; */

    /* use sequence of parameters &lt;p&gt; and &lt;c&gt; to determine if this is
       a "left" stroke (in which case we may add grey to the right), or
       a "right" stroke (in which case we may add grey to the left) */

#PUSH, 2 /* c */
CINDEX[]
#PUSH, 4 /* p */
CINDEX[]
MD[O]
#PUSH, 0
GTEQ[]
IF[]
    #PUSH, 0 /* "left" stroke */
ELSE[]
    ROLL[]
    ROLL[]
    SWAP[]
    ROLL[]
    #PUSH, 1 /* "right" stroke */
EIF[]

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;method&gt;, &lt;right?&gt; */

#PUSH, 4 /* p */
CINDEX[]
GC[N]
DUP[]
FLOOR[]
SUB[]
DUP[]

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;method&gt;, &lt;right?&gt;, &lt;source phase&gt;, &lt;source phase&gt; */

#PUSH, 5 /* c */
MINDEX[]
#PUSH, 6 /* p */
MINDEX[]
MD[N]

/* STACK: &lt;method&gt;, &lt;right?&gt;, &lt;source phase&gt;, &lt;source phase&gt;, &lt;weight&gt; */

#PUSH, 5 /* method */
MINDEX[]
#PUSH, 5 /* right? */
MINDEX[]
#PUSH, 112 /* adjust to target stroke phase */
CALL[]

/* STACK: &lt;source phase&gt;, &lt;target phase&gt; */

SWAP[]
SUB[]

/* STACK: &lt;delta phase&gt; */
/* minimze phase into interval ]-½,+½] */

NEG[]
#PUSH, 32
ADD[]
DUP[]
FLOOR[]
SUB[]
#PUSH, 32
SUB[]
NEG[]

#PUSHON
#END
ENDF[]

FDEF[], 114

/* emulate MIAP instruction with rendering environment specific rounding

   CALL[], &lt;c&gt;, &lt;cvt&gt;, 114 */

#BEGIN
#PUSHOFF

/* STACK: &lt;c&gt;, &lt;cvt&gt; */

#PUSH, 2 /* c */
CINDEX[]
GC[N]
DUP[]

/* STACK: &lt;c&gt;, &lt;cvt&gt;, &lt;wNat&gt;, &lt;wNat&gt; */

ROLL[]
DUP[]
#PUSH, 0
LT[]
IF[]

    /* STACK: &lt;c&gt;, &lt;wNat&gt;, &lt;wNat&gt;, &lt;cvt&gt; */

    POP[]

    /* cvt &lt; 0 (no cvt used) =&gt; w = wNat */
    /* STACK: &lt;c&gt;, &lt;wNat&gt;, &lt;w&gt; */

    #PUSH, 2, 78 /* roundDist */
    CALL[]

ELSE[]

    RCVT[]

    /* STACK: &lt;c&gt;, &lt;wNat&gt;, &lt;wNat&gt;, &lt;wCvt&gt; */
    /* no cvt cut-in test (for eventual support of automatic small caps, superiors, and inferiors), pop wNat to use wCvt */

    SWAP[]
    POP[]

    /* leave value as rounded by cpgm */
    /* STACK: &lt;c&gt;, &lt;wNat&gt;, &lt;w&gt; */

EIF[]

SUB[]
NEG[]

/* STACK: &lt;c&gt;, &lt;wDelta&gt; */

#PUSH, 2
CINDEX[]
SRP0[]

MSIRP[M]

#PUSHON
#END
ENDF[]

FDEF[], 115

/* interpolates a point &lt;p&gt; in &lt;dirFlag&gt; between points &lt;lsb&gt; and &lt;rsb&gt;
   dirFlag: postRoundFlag*8 + dir
   dir: X = 0, Y = 1, X/ = 2, Y/ = 3, ...

   depending on rendering environment and pv may optimise point position

   CALL[], &lt;dirFlag&gt;, &lt;p0&gt;, &lt;c&gt;, &lt;p1&gt;, 115 */

#BEGIN
#PUSHOFF

/* STACK: &lt;dirFlag&gt;, &lt;p0&gt;, &lt;p&gt;, &lt;p1&gt; */
/* separate postRoundFlag from dir */

#PUSH, 4 /* dirFlag */
MINDEX[]
DUP[]
#PUSH, 512
DIV[]
DUP[]
#PUSH, 512
MUL[]
ROLL[]
SWAP[]
SUB[]

/* STACK:, &lt;p0&gt;, &lt;p&gt;, &lt;p1&gt;, &lt;postRoundFlag&gt;, &lt;dir&gt; */

DUP[]
#PUSH, 93 /* setV */
ADD[]
CALL[]

/* STACK: &lt;p0&gt;, &lt;p&gt;, &lt;p1&gt;, &lt;postRoundFlag&gt;, &lt;dir&gt; */

#PUSH, 5 /* p0 */
CINDEX[]
SRP1[]
ROLL[] /* p1 */
SRP2[]
ROLL[] /* p */
DUP[]
IP[]

/* STACK: &lt;p0&gt;, &lt;postRoundFlag&gt;, &lt;dir&gt;, &lt;p&gt; */

ROLL[] /* postRoundFlag */
IF[]

    /* STACK: &lt;p0&gt;, &lt;dir&gt;, &lt;p&gt; */

    #PUSH, 93, 4096, 4 /* setV, 64, dir */
    MINDEX[]
    MUL[]
    ODD[]
    ADD[]
    CALL[]

    /* STACK: &lt;p0&gt;, &lt;p&gt; */

    SWAP[]
    POP[]
    DUP[] /* p */
    SRP0[]
    DUP[]
    GC[N]
    DUP[]
    #PUSH, 2, 78 /* roundDist */
    CALL[]
    SWAP[]
    SUB[]

    /* STACK: &lt;p&gt;, &lt;[p.c]-p.c&gt; */

ELSE[]

    /* STACK: &lt;p0&gt;, &lt;dir&gt;, &lt;p&gt; */

    SWAP[]
    POP[]

    /* STACK: &lt;p0&gt;, &lt;p&gt; */

    DUP[]
    ROLL[]
    DUP[] /* p0 */
    SRP0[]
    MD[N]

    #PUSH, 2, 78 /* roundDist */
    CALL[]

    /* STACK: &lt;p&gt;, &lt;[p.dist]&gt; */

EIF[]

MSIRP[M]

/* STACK: */

#PUSHON
#END
ENDF[]

FDEF[], 116

/* constrains a stroke in &lt;dir&gt;, defined by parent &lt;p&gt; and child &lt;c&gt;,
   and by cvt &lt;cvt&gt;, and interpolates it between points &lt;gp0&gt; and &lt;gp1&gt;
   dir: X = 0, Y = 1, X/ = 2
   sof: (stroke optimization flags ||, |&lt;, and &gt;| ) don't = 0, do = 1, leftBias = 2, rightBias = 3

   CALL[], &lt;dir&gt;, &lt;gp0&gt;, &lt;p&gt;, &lt;c&gt;, &lt;cvt&gt;, &lt;gp1&gt;, &lt;sof&gt;, 116 */

#BEGIN
#PUSHOFF

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p&gt;, &lt;c&gt;, &lt;cvt&gt;, &lt;gp1&gt;, &lt;sof&gt; */

#PUSH, 93, 4096, 9 /* setV, 64, dir */
CINDEX[]
MUL[]
ODD[]
ADD[]
CALL[]

/* constrain stroke */

#PUSH, 5 /* p */
CINDEX[]
#PUSH, 5 /* c */
CINDEX[]
#PUSH, 5 /* cvt */
MINDEX[]
#PUSH, 109 /* symDist */
CALL[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p&gt;, &lt;c&gt;, &lt;gp1&gt;, &lt;sof&gt; */

#PUSH, 93, 7 /* setV, dir */
CINDEX[]
ADD[]
CALL[]

#PUSH, 5 /* gp0 */
CINDEX[]
#PUSH, 5 /* p */
CINDEX[]
#PUSH, 5 /* c */
CINDEX[]
#PUSH, 5 /* gp1 */
CINDEX[]
#PUSH, 111 /* interpolate median */
CALL[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p&gt;, &lt;c&gt;, &lt;gp1&gt;, &lt;sof&gt; */

#PUSH, 93, 4096, 8 /* setV, 64, dir */
MINDEX[]
MUL[]
ODD[]
ADD[]
CALL[]

/* STACK: &lt;gp0&gt;, &lt;p&gt;, &lt;c&gt;, &lt;gp1&gt;, &lt;sof&gt; */

DUP[]
#PUSH, 0
GT[]
IF[] /* optimize stroke position */

    #PUSH, 80
    CALL[]

    /* STACK: &lt;gp0&gt;, &lt;p&gt;, &lt;c&gt;, &lt;gp1&gt;, &lt;sof&gt;, &lt;som&gt; */

    #PUSH, 5 /* p */
    CINDEX[]
    #PUSH, 5 /* c */
    CINDEX[]
    #PUSH, 7 /* p */
    CINDEX[]
    #PUSH, 7 /* c */
    CINDEX[]
    #PUSH, 5 /* som */
    CINDEX[]
    #PUSH, 113 /* get delta phase for optimal stroke position */
    CALL[]
    #PUSH, 2
    SLOOP[]
    SHPIX[]

    /* STACK: &lt;gp0&gt;, &lt;p&gt;, &lt;c&gt;, &lt;gp1&gt;, &lt;sof&gt;, &lt;som&gt; */

    #PUSH, 0
    GT[]
    #PUSH, 2 /* sof */
    CINDEX[]
    #PUSH, 1
    GT[]
    AND[]
    IF[]

        /* STACK: &lt;gp0&gt;, &lt;p&gt;, &lt;c&gt;, &lt;gp1&gt;, &lt;sof&gt; */
        /* determine total side-bearing space to see if we need to bias the black body */

        #PUSH, 4 /* p */
        CINDEX[]
        #PUSH, 6 /* gp0 */
        CINDEX[]
        MD[N]
        #PUSH, 3 /* gp1 */
        CINDEX[]
        #PUSH, 5 /* c */
        CINDEX[]
        MD[N]
        ADD[]
        DUP[]
        #PUSH, 64
        GT[]
        IF[]

            /* STACK: &lt;gp0&gt;, &lt;p&gt;, &lt;c&gt;, &lt;gp1&gt;, &lt;sof&gt;, &lt;totSBS&gt; */
            /* enough total side-bearing space left, leave it alone */
            POP[]

        ELSE[]

            /* STACK: &lt;gp0&gt;, &lt;p&gt;, &lt;c&gt;, &lt;gp1&gt;, &lt;sof&gt;, &lt;totSBS&gt; */
            /* 1 pixel or less total side-bearing space left */

            #PUSH, 0
            GT[]
            IF[]

                /* STACK: &lt;gp0&gt;, &lt;p&gt;, &lt;c&gt;, &lt;gp1&gt;, &lt;sof&gt; */
                /* any total side-bearing space left at all */

                DUP[]
                #PUSH, 2
                EQ[]
                IF[]

                    /* STACK: &lt;gp0&gt;, &lt;p&gt;, &lt;c&gt;, &lt;gp1&gt;, &lt;sof&gt; */
                    /* move stroke flush left */

                    #PUSH, 4 /* p */
                    CINDEX[]
                    #PUSH, 4 /* c */
                    CINDEX[]
                    #PUSH, 7 /* gp0 */
                    CINDEX[]
                    #PUSH, 7 /* p */
                    CINDEX[]
                    MD[N]
                    #PUSH, 2
                    SLOOP[]
                    SHPIX[]

                ELSE[]

                    /* STACK: &lt;gp0&gt;, &lt;p&gt;, &lt;c&gt;, &lt;gp1&gt;, &lt;sof&gt; */
                    /* move stroke flush left */

                    #PUSH, 4 /* p */
                    CINDEX[]
                    #PUSH, 4 /* c */
                    CINDEX[]
                    #PUSH, 4 /* gp1 */
                    CINDEX[]
                    #PUSH, 6 /* c */
                    CINDEX[]
                    MD[N]
                    #PUSH, 2
                    SLOOP[]
                    SHPIX[]

                EIF[]

            EIF[]

        EIF[]

    EIF[]

EIF[]

/* STACK: &lt;gp0&gt;, &lt;p&gt;, &lt;c&gt;, &lt;gp1&gt;, &lt;sof&gt; */

POP[]
POP[]
POP[]
POP[]
POP[]

/* STACK: */

#PUSHON
#END
ENDF[]

FDEF[], 117

/* fn tries to place and constrain two strokes &lt;p0,c0,cvt0&gt; and &lt;p1,c1,cvt1&gt;
   between grandparents &lt;gp0&gt; and &lt;gp1&gt; in direction &lt;dir&gt;
   dir: X = 0, Y = 1, X/ = 2
   X/ (italic) is not yet implemented; to do so properly will need to factor
   the italic phase optimization part out of fn 131 and make it available to
   this fn.

   CALL[], &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;gp1&gt;, 117 */

#BEGIN
#PUSHOFF

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;gp1&gt; */

#PUSH, 93, 4096, 11 /* setV, dir */
CINDEX[]
MUL[]
ODD[]
ADD[]
CALL[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;gp1&gt; */
/* interpolate black body */

#PUSH, 7 /* p0 */
CINDEX[]
#PUSH, 7 /* c0 */
CINDEX[]
#PUSH, 6 /* p1 */
CINDEX[]
#PUSH, 6 /* c1 */
CINDEX[]
#PUSH, 12 /* gp0 */
CINDEX[]
#PUSH, 12 /* p0 */
CINDEX[]
#PUSH, 9 /* c1 */
CINDEX[]
#PUSH, 8 /* gp1 */
CINDEX[]
#PUSH, 110 /* calc offset for interpolation of median */
CALL[]
#PUSH, 4
SLOOP[]
SHPIX[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;gp1&gt; */
/* constrain stroke0 */

#PUSH, 7 /* p0 */
CINDEX[]
#PUSH, 7 /* c0 */
CINDEX[]
#PUSH, 7 /* cvt0 */
MINDEX[]
#PUSH, 109 /* symDist */
CALL[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;gp1&gt; */
/* constrain stroke1 */

#PUSH, 4 /* p1 */
CINDEX[]
#PUSH, 4 /* c1 */
CINDEX[]
#PUSH, 4 /* cvt1 */
MINDEX[]
#PUSH, 109 /* symDist */
CALL[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt; */

#PUSH, 80
CALL[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt; */
/* determine phase0 for optimal position of stroke0 */

#PUSH, 6 /* p0 */
CINDEX[]
#PUSH, 6 /* c0 */
CINDEX[]
#PUSH, 3 /* som */
CINDEX[]
#PUSH, 113 /* get delta phase for optimal stroke position */
CALL[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt;, &lt;phase0&gt; */
/* forward to stroke1 position */

#PUSH, 5 /* p1 */
CINDEX[]
#PUSH, 5 /* c1 */
CINDEX[]
#PUSH, 3 /* phase0 */
CINDEX[]
#PUSH, 2
SLOOP[]
SHPIX[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt;, &lt;phase0&gt; */
/* determine phase1 for optimal position of stroke1 */

DUP[]
#PUSH, 6 /* p1 */
CINDEX[]
#PUSH, 6 /* c1 */
CINDEX[]
#PUSH, 5 /* som */
CINDEX[]
#PUSH, 113 /* get delta phase for optimal stroke position */
CALL[]
ADD[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt;, &lt;phase0&gt;, &lt;phase1&gt; */
/* undo forwarding to stroke1 position */

#PUSH, 6 /* p1 */
CINDEX[]
#PUSH, 6 /* c1 */
CINDEX[]
#PUSH, 4 /* phase0 */
CINDEX[]
NEG[]
#PUSH, 2
SLOOP[]
SHPIX[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt;, &lt;phase0&gt;, &lt;phase1&gt; */
/* determine double average phase error */

#PUSH, 2 /* phase0 */
CINDEX[]
#PUSH, 2 /* phase1 */
CINDEX[]
ADD[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt;, &lt;phase0&gt;, &lt;phase1&gt;, &lt;2*phaseError&gt; */

DUP[]
#PUSH, 64
GTEQ[]
IF[]

    /* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt;, &lt;phase0&gt;, &lt;phase1&gt;, &lt;2*phaseError&gt; */
    /* double average phase error &gt;= 1 pixel, correct to the left */

    POP[]
    #PUSH, 64
    SUB[]
    SWAP[]
    #PUSH, 64
    SUB[]
    SWAP[]

ELSE[]

    /* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt;, &lt;phase0&gt;, &lt;phase1&gt;, &lt;2*phaseError&gt; */

    #PUSH, -64
    LT[]
    IF[]

        /* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt;, &lt;phase0&gt;, &lt;phase1&gt;, &lt;2*phaseError&gt; */
        /* double average phase error &lt; -1 pixel, correct to the right */

        #PUSH, 64
        ADD[]
        SWAP[]
        #PUSH, 64
        ADD[]
        SWAP[]

    EIF[]

EIF[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt;, &lt;phase0&gt;, &lt;phase1&gt; */
/* apply corrected optimal phase0 to stroke0 */

#PUSH, 8 /* p0 */
CINDEX[]
#PUSH, 8 /* c0 */
CINDEX[]
#PUSH, 4 /* phase0 */
MINDEX[]
#PUSH, 2
SLOOP[]
SHPIX[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt;, &lt;phase1&gt; */
/* apply corrected optimal phase1 to stroke1 */

#PUSH, 5 /* p1 */
CINDEX[]
#PUSH, 5 /* c1 */
CINDEX[]
ROLL[] /* phase1 */
#PUSH, 2
SLOOP[]
SHPIX[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt; */

DUP[]
#PUSH, 0
GT[]
IF[]

    /* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt; */
    /* determine total side-bearing space to see if we need to bias the black body */

    #PUSH, 6 /* p0 */
    CINDEX[]
    #PUSH, 8 /* gp0 */
    CINDEX[]
    MD[N]
    #PUSH, 3 /* gp1 */
    CINDEX[]
    #PUSH, 5 /* c1 */
    CINDEX[]
    MD[N]
    ADD[]
    DUP[]
    #PUSH, 64
    GT[]
    IF[]

        /* enough total side-bearing space left, leave it alone */
        POP[]

    ELSE[]

        /* 1 pixel or less total side-bearing space left */
        #PUSH, 0
        GT[]
        IF[]

            /* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt; */
            /* any total side-bearing space left at all, move black-body flush left and start over */

            #PUSH, 6 /* p0 */
            CINDEX[]
            #PUSH, 6 /* c0 */
            CINDEX[]
            #PUSH, 6 /* p1 */
            CINDEX[]
            #PUSH, 6 /* c1 */
            CINDEX[]
            #PUSH, 11 /* gp0 */
            CINDEX[]
            #PUSH, 11 /* p0 */
            CINDEX[]
            MD[N]
            #PUSH, 4
            SLOOP[]
            SHPIX[]

            /* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt; */
            /* optimize position of stroke0 forwarding phase0 to stroke1 */

            #PUSH, 6 /* p0 */
            CINDEX[]
            #PUSH, 6 /* c0 */
            CINDEX[]
            #PUSH, 6 /* p1 */
            CINDEX[]
            #PUSH, 6 /* c1 */
            CINDEX[]
            #PUSH, 10 /* p0 */
            CINDEX[]
            #PUSH, 10 /* c0 */
            CINDEX[]
            #PUSH, 7 /* som */
            CINDEX[]
            #PUSH, 113 /* get delta phase for optimal stroke position */
            CALL[]
            #PUSH, 4 /* apply to both strokes */
            SLOOP[]
            SHPIX[]

            /* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt; */
            /* optimize position of stroke1 */

            #PUSH, 4 /* p1 */
            CINDEX[]
            #PUSH, 4 /* c1 */
            CINDEX[]
            #PUSH, 5 /* c1 */
            CINDEX[]
            #PUSH, 7 /* p1 */
            CINDEX[]
            #PUSH, 5 /* som */
            CINDEX[]
            #PUSH, 113 /* get delta phase for optimal stroke position */
            CALL[]
            #PUSH, 2 /* apply to second stroke only */
            SLOOP[]
            SHPIX[]

        ELSE[]

            /* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt; */
            /* no total side-bearing space left, move stroke1 left by 1 pixel */

            #PUSH, 4 /* p1 */
            CINDEX[]
            #PUSH, 4 /* c1 */
            CINDEX[]
            #PUSH, -64, 2
            SLOOP[]
            SHPIX[]

        EIF[]

    EIF[]

EIF[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt; */

POP[]
POP[]
POP[]
POP[]
POP[]
POP[]
POP[]
POP[]

#PUSHON
#END
ENDF[]

FDEF[], 118

/* fn to set pv perpendicular to p1 and c0' such that distance
   c0'&lt;---p0 measures cvt or natural distance if cvt = -1.
   used as support to ResX|YDDist and ResX|YDLink

   CALL[], &lt;p1&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt&gt;, 118 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p1&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt&gt; */

#PUSH, 4 /* p1 */
CINDEX[]
#PUSH, 3 /* c0 */
CINDEX[]
SDPVTL[R]
#PUSH, 3 /* p0 */
CINDEX[]
#PUSH, 3 /* c0 */
CINDEX[]
ROLL[] /* cvt */
DUP[]
#PUSH, 0
LT[]
IF[]
    POP[]
    #PUSH, 101 /* resActDist, noCvt, noMinDist */
ELSE[]
    #PUSH, 104 /* resActDist, cvt, minDist */
EIF[]
CALL[]
ABS[]

/* STACK: &lt;p1&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;w&gt; */

#PUSH, 4 /* p1 */
CINDEX[]
#PUSH, 4 /* p0 */
CINDEX[]
SPVTL[r]
#PUSH, 4 /* p1 */
CINDEX[]
#PUSH, 4 /* p0 */
CINDEX[]
MD[N]

/* STACK: &lt;p1&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;w&gt;, &lt;d&gt; */
/* test if solution exists at all */

DUP[]
DUP[]
MUL[]
#PUSH, 3 /* w */
CINDEX[]
DUP[]
MUL[]
LTEQ[]
#PUSH, 0, 3 /* d */
CINDEX[]
EQ[]
OR[]

/* STACK: &lt;p1&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;w&gt;, &lt;d&gt;, &lt;d² &lt;= w² or d = 0?&gt; */

IF[]

    /* STACK: &lt;p1&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;w&gt;, &lt;d&gt; */
    /* solution doesn't exist, hence prepare to bail out */

    POP[]
    POP[]
    SWAP[]
    POP[]
    SPVTL[R]

ELSE[]

    /* STACK: &lt;p1&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;w&gt;, &lt;d&gt; */
    /* solution exists, hence continue computation */

    DUP[]
    MUL[]
    #PUSH, 2 /* w */
    CINDEX[]
    DUP[]
    MUL[]
    SUB[]
    DUP[]

    /* STACK: &lt;p1&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;w&gt;, &lt;d² - w²&gt;, &lt;d² - w²&gt; */

    #PUSH, 83 /* sqrt */
    CALL[]

    /* STACK: &lt;p1&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;w&gt;, &lt;d² - w²&gt;, &lt;sqrt(d² - w²)&gt; */

    ROLL[] /* w */
    MUL[]

    /* STACK: &lt;p1&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;d² - w² =: dx&gt;, &lt;w·sqrt(d² - w²) =: dy&gt; */

    #PUSH, 5 /* p1 */
    CINDEX[]
    #PUSH, 5 /* p0 */
    CINDEX[]
    SDPVTL[R]
    #PUSH, 4 /* p0 */
    CINDEX[]
    #PUSH, 4 /* c0 */
    MINDEX[]
    MD[O]

    #PUSH, 0
    LT[]
    IF[]
        NEG[] /* dy */
    EIF[]

    /* STACK: &lt;p1&gt;, &lt;p0&gt;, &lt;dx&gt;, &lt;dy&gt; */

    #PUSH, 4 /* p1 */
    MINDEX[]
    DUP[]
    SVTCA[X]
    GC[N]
    SWAP[]
    SVTCA[Y]
    GC[N]

    /* STACK: &lt;p0&gt;, &lt;dx&gt;, &lt;dy&gt;, &lt;p1.x&gt;, &lt;p1.y&gt; */

    #PUSH, 5 /* p0 */
    MINDEX[]
    DUP[]
    SVTCA[X]
    GC[N]
    SWAP[]
    SVTCA[Y]
    GC[N]

    /* STACK: &lt;dx&gt;, &lt;dy&gt;, &lt;p1.x&gt;, &lt;p1.y&gt;, &lt;p0.x&gt;, &lt;p0.y&gt; */

    #PUSH, 0 /* enter twilight zone */
    SZPS[]

    SVTCA[Y]
    #PUSH, 0
    SWAP[]
    SCFS[]
    SVTCA[X]
    #PUSH, 0
    SWAP[]
    SCFS[]

    /* STACK: &lt;dx&gt;, &lt;dy&gt;, &lt;p1.x&gt;, &lt;p1.y&gt; */

    SVTCA[Y]
    DUP[]
    #PUSH, 1
    SWAP[]
    SCFS[]
    #PUSH, 2
    SWAP[]
    SCFS[]
    SVTCA[X]
    DUP[]
    #PUSH, 1
    SWAP[]
    SCFS[]
    #PUSH, 2
    SWAP[]
    SCFS[]

    /* STACK: &lt;dx&gt;, &lt;dy&gt; */

    SWAP[]

    /* STACK: &lt;dy&gt;, &lt;dx&gt; */

    #PUSH, 2, 0, 1
    SFVTL[r]
    SWAP[]
    SHPIX[]

    /* STACK: &lt;dy&gt; */

    #PUSH, 2, 0, 1
    SFVTL[R]
    SWAP[]
    SHPIX[]

    /* STACK: */

    #PUSH, 2, 1
    SPVTL[R]

    #PUSH, 1 /* leave twilight zone */
    SZPS[]

EIF[]

#PUSHON
#END
ENDF[]

FDEF[], 119

/* align c with p unless fv is perpendicular to pv
   fv and pv assumed to be set prior to calling fn 119
   used as support to ResX|YDDist and ResX|YDLink

   CALL[], &lt;p&gt;, &lt;c&gt;, 119 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p&gt;, &lt;c&gt; */

SWAP[]
SRP0[]

/* STACK: &lt;c&gt; */

GFV[]
GPV[]

/* STACK: &lt;c&gt;, &lt;fv.x&gt;, &lt;fv.y&gt;, &lt;pv.x&gt;, &lt;pv.y&gt; */

ROLL[]
MUL[]
SWAP[]
ROLL[]
MUL[]
ADD[]
ABS[]

/* STACK: &lt;c&gt;, &lt;|pv.y*fv.y + pv.x*fv.x|&gt; */

#PUSH, 16384, 1024
MUL[]

/* the above dot product multiplies two 2.14 numbers in 26.6 arithmetic yielding a 2.22 number (2^14 * 2^14 / 2^6 = 2^22)
   like the rasterizer, we're comparing this number to 1/16: |fv1·pv| &lt; 1/16 means fv1 is within ±arcsin(1/16) or ±3.5833° perpendicular to pv
   in 2.22 format 1/16 is 2^18, but since the assembler won't allow us to push 2^18 = 262144, we make up this number as a multiplication
   the multiplication, in turn, is again done in 26.6 format, hence we multiply 16384 with 1024 (2^14 * 2^10 / 2^6 = 2^18) */

LT[]
IF[]

    /* fv is approximately perpendicular to pv which by itself is perpendicular
       to a line from p to c' (with c' the twilight point 2 computed in fn 118),
       i.e. fv is approximately parallel to line from p to c'. Given the usage
       of fn 119 this means that fv is approximately coincident with said line,
       or c is approximately aligned already, hence simply touch the point, but
       without involving the pv */

    /* STACK: &lt;c&gt; */

    #PUSH, 0
    SHPIX[]

ELSE[]

    /* STACK: &lt;c&gt; */

    ALIGNRP[]

EIF[]

/* STACK: */

#PUSHON
#END
ENDF[]

FDEF[], 120

/* support to ResX|YDDist and ResX|YDLink where fv0 and fv1 are x or y

   CALL[], &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt0&gt;, &lt;cvt1&gt;, &lt;fv0&gt;, &lt;fv1&gt;, 120 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt0&gt;, &lt;cvt1&gt;, &lt;fv0&gt;, &lt;fv1&gt; */

#PUSH, 6 /* p1 */
CINDEX[]
#PUSH, 9 /* p0 */
CINDEX[]
#PUSH, 9 /* c0 */
CINDEX[]
#PUSH, 7 /* cvt0 */
MINDEX[]
#PUSH, 118
CALL[]

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv0&gt;, &lt;fv1&gt; */

SWAP[]
#PUSH, 0 /* x? */
EQ[]
IF[]
  SFVTCA[X]
ELSE[]
  SFVTCA[Y]
EIF[]

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv1&gt; */

#PUSH, 4 /* p1 */
CINDEX[]
#PUSH, 6 /* c0 */
MINDEX[]
#PUSH, 119
CALL[]

/* STACK: &lt;p0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv1&gt; */

#PUSH, 5 /* p0 */
CINDEX[]
#PUSH, 5 /* p1 */
MINDEX[]
#PUSH, 5 /* c1 */
CINDEX[]
#PUSH, 5 /* cvt1 */
MINDEX[]
#PUSH, 118
CALL[]

/* STACK: &lt;p0&gt;, &lt;c1&gt;, &lt;fv1&gt; */

#PUSH, 0 /* x? */
EQ[]
IF[]
  SFVTCA[X]
ELSE[]
  SFVTCA[Y]
EIF[]

/* STACK: &lt;p0&gt;, &lt;c1&gt; */

#PUSH, 119
CALL[]

/* STACK: */

#PUSHON
#END
ENDF[]

FDEF[], 121

/* support to ResX|YDDist and ResX|YDLink where fv0 is x or y while fv1 is to-line

   CALL[], &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt0&gt;, &lt;cvt1&gt;, &lt;fv0&gt;, &lt;fv1.p0&gt;, &lt;fv1.p1&gt;, 121 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt0&gt;, &lt;cvt1&gt;, &lt;fv0&gt;, &lt;fv1.p0&gt;, &lt;fv1.p1&gt; */

#PUSH, 7 /* p1 */
CINDEX[]
#PUSH, 10 /* p0 */
CINDEX[]
#PUSH, 10 /* c0 */
CINDEX[]
#PUSH, 8 /* cvt0 */
MINDEX[]
#PUSH, 118
CALL[]

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv0&gt;, &lt;fv1.p0&gt;, &lt;fv1.p1&gt; */

ROLL[]
#PUSH, 0 /* x? */
EQ[]
IF[]
  SFVTCA[X]
ELSE[]
  SFVTCA[Y]
EIF[]

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv1.p0&gt;, &lt;fv1.p1&gt; */

#PUSH, 5 /* p1 */
CINDEX[]
#PUSH, 7 /* c0 */
MINDEX[]
#PUSH, 119
CALL[]

/* STACK: &lt;p0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv1.p0&gt;, &lt;fv1.p1&gt; */

#PUSH, 6 /* p0 */
CINDEX[]
#PUSH, 6 /* p1 */
MINDEX[]
#PUSH, 6 /* c1 */
CINDEX[]
#PUSH, 6 /* cvt1 */
MINDEX[]
#PUSH, 118
CALL[]

/* STACK: &lt;p0&gt;, &lt;c1&gt;, &lt;fv1.p0&gt;, &lt;fv1.p1&gt; */

SFVTL[r]

/* STACK: &lt;p0&gt;, &lt;c1&gt; */

#PUSH, 119
CALL[]

/* STACK: */

#PUSHON
#END
ENDF[]

FDEF[], 122

/* support to ResX|YDDist and ResX|YDLink where fv0 is to-line while fv1 is x or y

   CALL[], &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt0&gt;, &lt;cvt1&gt;, &lt;fv0.p0&gt;, &lt;fv0.p1&gt;, &lt;fv1&gt;, 122 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt0&gt;, &lt;cvt1&gt;, &lt;fv0.p0&gt;, &lt;fv0.p1&gt;, &lt;fv1&gt; */

#PUSH, 7 /* p1 */
CINDEX[]
#PUSH, 10 /* p0 */
CINDEX[]
#PUSH, 10 /* c0 */
CINDEX[]
#PUSH, 8 /* cvt0 */
MINDEX[]
#PUSH, 118
CALL[]

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv0.p0&gt;, &lt;fv0.p1&gt;, &lt;fv1&gt; */

ROLL[]
ROLL[]
SFVTL[r]

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv1&gt; */

#PUSH, 4 /* p1 */
CINDEX[]
#PUSH, 6 /* c0 */
MINDEX[]
#PUSH, 119
CALL[]

/* STACK: &lt;p0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv1&gt; */

#PUSH, 5 /* p0 */
CINDEX[]
#PUSH, 5 /* p1 */
MINDEX[]
#PUSH, 5 /* c1 */
CINDEX[]
#PUSH, 5 /* cvt1 */
MINDEX[]
#PUSH, 118
CALL[]

/* STACK: &lt;p0&gt;, &lt;c1&gt;, &lt;fv1&gt; */

#PUSH, 0 /* x? */
EQ[]
IF[]
  SFVTCA[X]
ELSE[]
  SFVTCA[Y]
EIF[]

/* STACK: &lt;p0&gt;, &lt;c1&gt; */

#PUSH, 119
CALL[]

/* STACK: */

#PUSHON
#END
ENDF[]

FDEF[], 123

/* support to ResX|YDDist and ResX|YDLink where both fv0 and fv1 are to-line

   CALL[], &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt0&gt;, &lt;cvt1&gt;, &lt;fv0.p0&gt;, &lt;fv0.p1&gt;, &lt;fv1.p0&gt;, &lt;fv1.p1&gt;, 123 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt0&gt;, &lt;cvt1&gt;, &lt;fv0.p0&gt;, &lt;fv0.p1&gt;, &lt;fv1.p0&gt;, &lt;fv1.p1&gt; */

#PUSH, 8 /* p1 */
CINDEX[]
#PUSH, 11 /* p0 */
CINDEX[]
#PUSH, 11 /* c0 */
CINDEX[]
#PUSH, 9 /* cvt0 */
MINDEX[]
#PUSH, 118
CALL[]

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv0.p0&gt;, &lt;fv0.p1&gt;, &lt;fv1.p0&gt;, &lt;fv1.p1&gt; */

#PUSH, 4 /* fv0.p0 */
MINDEX[]
#PUSH, 4 /* fv0.p1 */
MINDEX[]
SFVTL[r]

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv1.p0&gt;, &lt;fv1.p1&gt; */

#PUSH, 5 /* p1 */
CINDEX[]
#PUSH, 7 /* c0 */
MINDEX[]
#PUSH, 119
CALL[]

/* STACK: &lt;p0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv1.p0&gt;, &lt;fv1.p1&gt; */

#PUSH, 6 /* p0 */
CINDEX[]
#PUSH, 6 /* p1 */
MINDEX[]
#PUSH, 6 /* c1 */
CINDEX[]
#PUSH, 6 /* cvt1 */
MINDEX[]
#PUSH, 118
CALL[]

/* STACK: &lt;p0&gt;, &lt;c1&gt;, &lt;fv1.p0&gt;, &lt;fv1.p1&gt; */

SFVTL[r]

/* STACK: &lt;p0&gt;, &lt;c1&gt; */

#PUSH, 119
CALL[]

/* STACK: */

#PUSHON
#END
ENDF[]

FDEF[], 124

/* determine on which side of edge p0-&gt;p1 is c
   by calculating vector product (c - p0) ^ (p1 - p0)

   CALL[], &lt;p0&gt;, &lt;c&gt;, &lt;p1&gt;, 124

   returns with vector product on stack
   if vector product &lt; 0 then c is on the left of p0-&gt;p1
   if vector product &gt; 0 then c is on the right of p0-&gt;p1
   else c is exactly on p0-&gt;p1 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p0&gt;, &lt;c&gt;, &lt;p1&gt; */

SPVTCA[X]
#PUSH, 3 /* p0 */
CINDEX[]
#PUSH, 3 /* c */
CINDEX[]
MD[O]
#PUSH, 4 /* p0 */
CINDEX[]
#PUSH, 3 /* p1 */
CINDEX[]
MD[O]

/* STACK: &lt;p0&gt;, &lt;c&gt;, &lt;p1&gt;, &lt;a.x&gt;, &lt;b.x&gt; */

SPVTCA[Y]
#PUSH, 5 /* p0 */
CINDEX[]
#PUSH, 5 /* c */
MINDEX[]
MD[O]
#PUSH, 5 /* p0 */
MINDEX[]
#PUSH, 5 /* p1 */
MINDEX[]
MD[O]

/* STACK: &lt;a.x&gt;, &lt;b.x&gt;, &lt;a.y&gt;, &lt;b.y&gt; */

#PUSH, 4 /* a.x */
MINDEX[]
MUL[]

ROLL[] /* b.x */
ROLL[] /* a.y */
MUL[]

SUB[]

/* STACK: &lt;b.y*a.x - b.x*a.y&gt; */

#PUSHON
#END
ENDF[]

FDEF[], 125

/* fn interpolates a pair of diagonal links between grand-parents gp0 and gp1 along pv
   pv: X = 0, Y = 1, X/ = 2; fv0 and fv1: x and y components in 2.14

   CALL[], &lt;pv&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;gp1&gt;, &lt;fv0.x&gt;, &lt;fv0.y&gt;, &lt;fv1.x&gt;, fv1.y&gt;, 125 */

#BEGIN
#PUSHOFF

/* interpolate parents between grand-parents along pv */
/* STACK: &lt;pv&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;gp1&gt;, &lt;fv0.x&gt;, &lt;fv0.y&gt;, &lt;fv1.x&gt;, fv1.y&gt; */

#PUSH, 93, 14 /* pv */
CINDEX[]
ADD[]
CALL[]

#PUSH, 12 /* gp0 */
MINDEX[]
SRP1[]
#PUSH, 5 /* gp1 */
MINDEX[]
SRP2[]

#PUSH, 10 /* p0 */
CINDEX[]
IP[]
#PUSH, 7 /* p1 */
CINDEX[]
IP[]

/* determine if this is a crisscrossed stroke */
/* STACK: &lt;pv&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv0.x&gt;, &lt;fv0.y&gt;, &lt;fv1.x&gt;, fv1.y&gt; */

#PUSH, 10 /* p0 */
CINDEX[]
#PUSH, 10 /* c0 */
CINDEX[]
#PUSH, 9 /* p1 */
CINDEX[]
#PUSH, 124 /* c0 on which side of edge p0-&gt;p1? */
CALL[]
#PUSH, 0
LT[]

#PUSH, 11 /* p0 */
CINDEX[]
#PUSH, 8 /* c1 */
CINDEX[]
#PUSH, 10 /* p1 */
CINDEX[]
#PUSH, 124 /* c1 on which side of edge p0-&gt;p1? */
CALL[]
#PUSH, 0
LT[]

EQ[]
IF[]

    /* both childern on same side of parent edge p0&gt;-&gt;p1
       hence re-align children with parents perp to dpv. */
    /* STACK: &lt;pv&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv0.x&gt;, &lt;fv0.y&gt;, &lt;fv1.x&gt;, fv1.y&gt; */

    #PUSH, 7 /* p1 */
    CINDEX[]
    #PUSH, 11 /* p0 */
    CINDEX[]
    SDPVTL[R]

    #PUSH, 4 /* fv0.x */
    CINDEX[]
    #PUSH, 4 /* fv0.y */
    CINDEX[]
    SFVFS[]

    #PUSH, 10 /* p0 */
    CINDEX[]
    SRP0[]
    #PUSH, 9 /* c0 */
    CINDEX[]
    MDRP[m&lt;rBl]

    #PUSH, 2 /* fv1.x */
    CINDEX[]
    #PUSH, 2 /* fv1.y */
    CINDEX[]
    SFVFS[]

    #PUSH, 7 /* p1 */
    CINDEX[]
    SRP0[]
    #PUSH, 6 /* c1 */
    CINDEX[]
    MDRP[m&lt;rBl]

ELSE[]

    /* childern on opposite sides of "parent edge" p0&gt;-&gt;p1
       hence re-align children with parents per method for crisscrossed strokes */
    /* STACK: &lt;pv&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv0.x&gt;, &lt;fv0.y&gt;, &lt;fv1.x&gt;, fv1.y&gt; */

    #PUSH, 7 /* p1 */
    CINDEX[]
    #PUSH, 11 /* p0 */
    CINDEX[]
    #PUSH, 11 /* c0 */
    CINDEX[]
    #PUSH, -1, 118 /* no cvt0, no minDist */
    CALL[]

    /* STACK: &lt;pv&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv0.x&gt;, &lt;fv0.y&gt;, &lt;fv1.x&gt;, fv1.y&gt; */

    #PUSH, 4 /* fv0.x */
    CINDEX[]
    #PUSH, 4 /* fv0.y */
    CINDEX[]
    SFVFS[]

    /* STACK: &lt;pv&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv0.x&gt;, &lt;fv0.y&gt;, &lt;fv1.x&gt;, fv1.y&gt; */

    #PUSH, 7 /* p1 */
    CINDEX[]
    #PUSH, 10 /* c0 */
    CINDEX[]
    #PUSH, 119
    CALL[]

    /* STACK: &lt;pv&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv0.x&gt;, &lt;fv0.y&gt;, &lt;fv1.x&gt;, fv1.y&gt; */

    #PUSH, 10 /* p0 */
    CINDEX[]
    #PUSH, 8 /* p1 */
    CINDEX[]
    #PUSH, 8 /* c1 */
    CINDEX[]
    #PUSH, -1, 118 /* no cvt1, no minDist */
    CALL[]

    /* STACK: &lt;pv&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv0.x&gt;, &lt;fv0.y&gt;, &lt;fv1.x&gt;, fv1.y&gt; */

    #PUSH, 2 /* fv1.x */
    CINDEX[]
    #PUSH, 2 /* fv1.y */
    CINDEX[]
    SFVFS[]

    /* STACK: &lt;p0&gt;, &lt;c1&gt; */

    #PUSH, 10 /* p0 */
    CINDEX[]
    #PUSH, 7 /* c1 */
    CINDEX[]
    #PUSH, 119
    CALL[]

EIF[]

/* determine pre-link medians, measuring perpendicularly to p0-&gt;p1 */
/* STACK: &lt;pv&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv0.x&gt;, &lt;fv0.y&gt;, &lt;fv1.x&gt;, fv1.y&gt; */

#PUSH, 10 /* p0 */
CINDEX[]
GC[N]
#PUSH, 10 /* c0 */
CINDEX[]
GC[N]
ADD[]

#PUSH, 8 /* p1 */
CINDEX[]
GC[N]
#PUSH, 8 /* c1 */
CINDEX[]
GC[N]
ADD[]

/* links */
/* STACK: &lt;pv&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv0.x&gt;, &lt;fv0.y&gt;, &lt;fv1.x&gt;, fv1.y&gt;, &lt;median0&gt;, &lt;median1&gt; */

#PUSH, 6 /* fv0.x */
CINDEX[]
#PUSH, 6 /* fv0.y */
CINDEX[]
SFVFS[]

#PUSH, 12 /* p0 */
CINDEX[]
#PUSH, 12 /* c0 */
CINDEX[]
#PUSH, 12 /* cvt0 */
MINDEX[]
DUP[]
#PUSH, 0
LT[]
IF[]
    POP[]
    #PUSH, 106 /* resMIRP, noCvt, minDist */
ELSE[]
    #PUSH, 108 /* resMIRP, cvt, minDist */
EIF[]
CALL[]

/* STACK: &lt;pv&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv0.x&gt;, &lt;fv0.y&gt;, &lt;fv1.x&gt;, fv1.y&gt;, &lt;median0&gt;, &lt;median1&gt; */

#PUSH, 4 /* fv1.x */
CINDEX[]
#PUSH, 4 /* fv1.y */
CINDEX[]
SFVFS[]

#PUSH, 9 /* p1 */
CINDEX[]
#PUSH, 9 /* c1 */
CINDEX[]
#PUSH, 9 /* cvt1 */
MINDEX[]
DUP[]
#PUSH, 0
LT[]
IF[]
    POP[]
    #PUSH, 106 /* resMIRP, noCvt, minDist */
ELSE[]
    #PUSH, 108 /* resMIRP, cvt, minDist */
EIF[]
CALL[]

/* subtract post-link medians from pre-link ones */
/* STACK: &lt;pv&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;fv0.x&gt;, &lt;fv0.y&gt;, &lt;fv1.x&gt;, fv1.y&gt;, &lt;median0&gt;, &lt;median1&gt; */

SWAP[]

#PUSH, 10 /* p0 */
CINDEX[]
GC[N]
#PUSH, 10 /* c0 */
CINDEX[]
GC[N]
ADD[]

SUB[]
#PUSH, 32
MUL[]

SWAP[]

#PUSH, 8 /* p1 */
CINDEX[]
GC[N]
#PUSH, 8 /* c1 */
CINDEX[]
GC[N]
ADD[]

SUB[]
#PUSH, 32
MUL[]

/* finally move points by respective deltas */
/* STACK: &lt;pv&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;fv0.x&gt;, &lt;fv0.y&gt;, &lt;fv1.x&gt;, fv1.y&gt;, &lt;delta0&gt;, &lt;delta1&gt; */

#PUSH, 1, 12 /* pv */
CINDEX[]
EQ[]
IF[]
    SFVTCA[Y]
ELSE[]
    SFVTCA[X]
EIF[]

#PUSH, 10 /* p0 */
MINDEX[]
DUP[]
SRP0[]
#PUSH, 3 /* delta0 */
CINDEX[]
MSIRP[m]

#PUSH, 6 /* fv0.x */
MINDEX[]
#PUSH, 6 /* fv0.y */
MINDEX[]
SFVFS[]

#PUSH, 7 /* c0 */
MINDEX[]
DUP[]
SRP0[]
ROLL[] /* delta0 */
MSIRP[m]

/* STACK: &lt;pv&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;fv1.x&gt;, fv1.y&gt;, &lt;delta1&gt; */

#PUSH, 1, 7 /* pv */
MINDEX[]
EQ[]
IF[]
    SFVTCA[Y]
ELSE[]
    SFVTCA[X]
EIF[]

#PUSH, 5 /* p1 */
MINDEX[]
DUP[]
SRP0[]
#PUSH, 2 /* delta1 */
CINDEX[]
MSIRP[m]

ROLL[] /* fv0.x */
ROLL[] /* fv0.y */
SFVFS[]

SWAP[] /* c1 */
DUP[]
SRP0[]
SWAP[] /* delta1 */
MSIRP[m]

/* STACK: */

#PUSHON
#END
ENDF[]

FDEF[], 126

/* glue code to fn 125 where both fv0 and fv1 are x or y

   CALL[], &lt;pv&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;gp1&gt;, &lt;fv0&gt;, &lt;fv1&gt;, 126 */

#BEGIN
#PUSHOFF

/* STACK: &lt;pv&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;gp1&gt;, &lt;fv0&gt;, &lt;fv1&gt; */

SWAP[] /* fv0 */
#PUSH, 1
EQ[]
IF[]
    #PUSH, 0, 16384
ELSE[]
    #PUSH, 16384, 0
EIF[]

ROLL[] /* fv1 */
#PUSH, 1
EQ[]
IF[]
    #PUSH, 0, 16384
ELSE[]
    #PUSH, 16384, 0
EIF[]

#PUSH, 125 /* resIPDDLink */
CALL[]

#PUSHON
#END
ENDF[]

FDEF[], 127

/* glue code to fn 125 where fv0 is to line and fv1 is x or y

   CALL[], &lt;pv&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;gp1&gt;, &lt;fv0.0&gt;, &lt;fv0.1&gt;, &lt;fv1&gt;, 127 */

#BEGIN
#PUSHOFF

/* STACK: &lt;pv&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;gp1&gt;, &lt;fv0.0&gt;, &lt;fv0.1&gt;, &lt;fv1&gt; */

ROLL[] /* fv0.0 */
ROLL[] /* fv0.1 */
SFVTL[r]
GFV[]

ROLL[] /* fv1 */
#PUSH, 1
EQ[]
IF[]
    #PUSH, 0, 16384
ELSE[]
    #PUSH, 16384, 0
EIF[]

#PUSH, 125 /* resIPDDLink */
CALL[]

#PUSHON
#END
ENDF[]

FDEF[], 128

/* glue code to fn 125 where fv0 is x or y and fv1 is to line

   CALL[], &lt;pv&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;gp1&gt;, &lt;fv0&gt;, &lt;fv1.0&gt;, &lt;fv1.1&gt;, 128 */

#BEGIN
#PUSHOFF

/* STACK: &lt;pv&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;gp1&gt;, &lt;fv0&gt;, &lt;fv1.0&gt;, &lt;fv1.1&gt; */

SFVTL[r]

#PUSH, 1
EQ[]
IF[]
    #PUSH, 0, 16384
ELSE[]
    #PUSH, 16384, 0
EIF[]

GFV[]

#PUSH, 125 /* resIPDDLink */
CALL[]

#PUSHON
#END
ENDF[]

FDEF[], 129

/* glue code to fn 125 where both fv0 and fv1 are to line

   CALL[], &lt;pv&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;gp1&gt;, &lt;fv0.0&gt;, &lt;fv0.1&gt;, &lt;fv1.0&gt;, &lt;fv1.1&gt;, 129 */

#BEGIN
#PUSHOFF

/* STACK: &lt;pv&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;gp1&gt;, &lt;fv0.0&gt;, &lt;fv0.1&gt;, &lt;fv1.0&gt;, &lt;fv1.1&gt; */

#PUSH, 4 /* fv0.0 */
MINDEX[]
#PUSH, 4 /* fv0.1 */
MINDEX[]
SFVTL[r]
GFV[]
#PUSH, 4 /* fv1.0 */
MINDEX[]
#PUSH, 4 /* fv1.1 */
MINDEX[]
SFVTL[r]
GFV[]
#PUSH, 125 /* resIPDDLink */
CALL[]

#PUSHON
#END
ENDF[]

FDEF[], 130

/* extrapolate x-coordinate of &lt;p&gt; to base line along italic angle
   returns with extrapolated x-coordinate on stack

   CALL[], &lt;p&gt;, 130 */

#BEGIN
#PUSHOFF

DUP[]
SVTCA[X]
GC[N]
SWAP[]
SVTCA[Y]
GC[N]

/* STACK: &lt;p.x&gt;, &lt;p.y&gt; */

#PUSH, 10 /* rise */
RS[]
#PUSH, 11 /* run */
RS[]

/* STACK: &lt;p.x&gt;, &lt;p.y&gt;, &lt;rise&gt;, &lt;run&gt; */

ROLL[]
MUL[]
SWAP[]
DIV[]
SUB[]

/* STACK: &lt;p.x - p.y*run/rise&gt; */

#PUSHON
#END
ENDF[]

FDEF[], 131

/* constrains an italic stroke, defined by parents &lt;p0&gt; and &lt;p1&gt;, by
   children &lt;c0&gt; and &lt;c1&gt;, and by cvts &lt;cvt0&gt; and &lt;cvt1&gt;, and inter-
   polates it between points &lt;lsb&gt; and &lt;rsb&gt;

   for b&amp;w stroke additionally optimizes the resulting pixel pattern

   CALL[], &lt;lsb&gt;, &lt;rsb&gt;, &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;cvt0&gt;, &lt;cvt1&gt;, 131 */

#BEGIN
#PUSHOFF

/* STACK: &lt;lsb&gt;, &lt;rsb&gt;, &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;cvt0&gt;, &lt;cvt1&gt; */

#PUSH, 9 /* pv perp italic, fv X */
CALL[]

/* lock parent edge */

#PUSH, 6 /* p0 */
CINDEX[]
MDAP[r]

#PUSH, 5 /* p1 */
CINDEX[]
RDTG[]
MDRP[m&lt;RBl]

/* link child edge */

#PUSH, 6 /* p0 */
CINDEX[]
#PUSH, 5 /* c0 */
CINDEX[]
#PUSH, 4 /* cvt0 */
CINDEX[]
DUP[]
#PUSH, 0
LT[]
IF[]
    POP[]
    #PUSH, 106 /* resMIRP, noCvt, minDist */
ELSE[]
    #PUSH, 108 /* resMIRP, cvt, minDist */
EIF[]
CALL[]

#PUSH, 5 /* p1 */
CINDEX[]
#PUSH, 4 /* c1 */
CINDEX[]
#PUSH, 3 /* cvt1 */
CINDEX[]
DUP[]
#PUSH, 0
LT[]
IF[]
    POP[]
    #PUSH, 106 /* resMIRP, noCvt, minDist */
ELSE[]
    #PUSH, 108 /* resMIRP, cvt, minDist */
EIF[]
CALL[]

RTG[]

/* STACK: &lt;lsb&gt;, &lt;rsb&gt;, &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;cvt0&gt;, &lt;cvt1&gt; */
/* interpolate median of p0 and c0 between lsb and rsb */

#PUSH, 8 /* lsb */
CINDEX[]
#PUSH, 7 /* p0 */
CINDEX[]
#PUSH, 6 /* c0 */
CINDEX[]
#PUSH, 10 /* rsb */
CINDEX[]
#PUSH, 111 /* interpolate median */
CALL[]

/* STACK: &lt;lsb&gt;, &lt;rsb&gt;, &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;cvt0&gt;, &lt;cvt1&gt; */
/* if the two actual parent-&gt;child distances round to the same stroke weight */

#PUSH, 6 /* p0 */
CINDEX[]
#PUSH, 5 /* c0 */
CINDEX[]
#PUSH, 4 /* cvt0 */
MINDEX[]
DUP[]
#PUSH, 0
LT[]
IF[]
    POP[]
    #PUSH, 102 /* resActDist, noCvt, minDist */
ELSE[]
    #PUSH, 104 /* resActDist, cvt, minDist */
EIF[]
CALL[]

/* STACK: &lt;lsb&gt;, &lt;rsb&gt;, &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;[dist0]&gt; */

#PUSH, 5 /* p1 */
CINDEX[]
#PUSH, 4 /* c1 */
CINDEX[]
#PUSH, 4 /* cvt1 */
MINDEX[]
DUP[]
#PUSH, 0
LT[]
IF[]
    POP[]
    #PUSH, 102 /* resActDist, noCvt, minDist */
ELSE[]
    #PUSH, 104 /* resActDist, cvt, minDist */
EIF[]
CALL[]

/* STACK: &lt;lsb&gt;, &lt;rsb&gt;, &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;[dist0]&gt;, &lt;[dist1]&gt; */

EQ[]
IF[]

    /* STACK: &lt;lsb&gt;, &lt;rsb&gt;, &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt; */
    /* adjust median of p1 and c1 in parallel */

    RDTG[]
    #PUSH, 4 /* p0 */
    CINDEX[]
    SRP0[]
    #PUSH, 3 /* p1 */
    CINDEX[]
    MDRP[m&lt;RBl]

    #PUSH, 2 /* c0 */
    CINDEX[]
    SRP0[]
    #PUSH, 1 /* c1 */
    CINDEX[]
    MDRP[m&lt;RBl]

    #PUSH, 5 /* rsb */
    MINDEX[]
    POP[]
    #PUSH, 5 /* lsb */
    MINDEX[]
    POP[]

    /* STACK: &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt; */

ELSE[]

    /* STACK: &lt;lsb&gt;, &lt;rsb&gt;, &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt; */
    /* interpolate median of p1 and c1 between lsb and rsb independently */

    #PUSH, 6 /* lsb */
    MINDEX[]
    #PUSH, 4 /* p1 */
    CINDEX[]
    #PUSH, 3 /* c1 */
    CINDEX[]
    #PUSH, 8 /* rsb */
    MINDEX[]
    #PUSH, 111 /* interpolate median */
    CALL[]

    /* STACK: &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt; */

EIF[]

/* STACK: &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt; */
/* for b&amp;w only optimize pixel pattern */

#PUSH, 0, 2
RS[]
EQ[]
IF[]

    /* STACK: &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt; */
    /* extrapolate c0 to base line */

    RDTG[]
    #PUSH, 2 /* c0 */
    CINDEX[]
    #PUSH, 130
    CALL[]

    /* extrapolate p0 to base line */

    #PUSH, 5 /* p0 */
    CINDEX[]
    #PUSH, 130
    CALL[]

    /* get parentPhase from extrapolated x-coordinate */

    DUP[]
    DUP[]
    ROUND[Bl]
    SUB[]

    #PUSH, 4 /* targetPhase */
    RS[]

    /* STACK: &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;c0.x'&gt;, &lt;p0.x'&gt;, &lt;parentPhase&gt;, &lt;targetPhase&gt; */
    /* shifting parent edge by deltaPhase optimizes stepping pattern on parent edge */

    SVTCA[X]
    SWAP[]
    SUB[]

    /* STACK: &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;c0.x'&gt;, &lt;p0.x'&gt;, &lt;deltaPhase&gt; */
    /* minimize the positioning error by mapping deltaPhase from [-63,63] to [-32,31] */

    #PUSH, 96
    ADD[]
    DUP[]
    ROUND[Bl]
    SUB[]
    #PUSH, 32
    SUB[]

    /* STACK: &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;c0.x'&gt;, &lt;p0.x'&gt;, &lt;deltaPhase&gt; */
    /* save minimized deltaPhase for child edge and shift parent edge */

    DUP[]
    #PUSH, 8 /* p0 */
    MINDEX[]
    #PUSH, 8 /* p1 */
    MINDEX[]
    ROLL[]
    #PUSH, 2
    SLOOP[]
    SHPIX[]

    /* STACK: &lt;c0&gt;, &lt;c1&gt;, &lt;c0.x'&gt;, &lt;p0.x'&gt;, &lt;deltaPhase&gt; */
    /* since child edge is linked perpendicular to italic angle,
       the resulting stroke would include unnecessary pixels,
       hence determine phase of distance between extrapolated
       x-coordinates (deltaDeltaPhase) */

    ROLL[]
    ROLL[]
    SUB[]
    DUP[]
    ROUND[Bl]
    SUB[]

    /* STACK: &lt;c0&gt;, &lt;c1&gt;, &lt;deltaPhase&gt;, &lt;deltaDeltaPhase&gt; */
    /* subtract from deltaPhase (don't shift quite as far...) */

    SUB[]

    /* STACK: &lt;c0&gt;, &lt;c1&gt;, &lt;deltaPhase'&gt; */
    /* shift parent edge */

    #PUSH, 2
    SLOOP[]
    SHPIX[]

    /* STACK: */

ELSE[]

    /* STACK: &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt; */

    POP[]
    POP[]
    POP[]
    POP[]

    /* STACK: */

EIF[]

RTG[]

#PUSHON
#END
ENDF[]

FDEF[], 132

/* for monochrome only: stack points &lt;p&gt; through &lt;c&gt; on top of &lt;p&gt; below &lt;ppem&gt;

   CALL[], &lt;p&gt;, &lt;c&gt;, &lt;ppem&gt;, 132 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;ppem&gt; */

MPPEM[]
GT[]
#PUSH, 1, 2
RS[]
GTEQ[]
AND[]
IF[]

    /* STACK: &lt;p&gt;, &lt;c&gt; */

    SWAP[]
    SRP0[]
    DUP[]
    SVTCA[X]
    ALIGNRP[]
    SVTCA[Y]
    ALIGNRP[]

ELSE[]

    /* STACK: &lt;p&gt;, &lt;c&gt; */

    POP[]
    POP[]
EIF[]

#PUSHON
#END
ENDF[]

FDEF[], 133

/* support fn for fns 134 and 135

   CALL[], &lt;align?&gt;, &lt;from&gt;, &lt;to&gt;, 133 */

#BEGIN
#PUSHOFF

SWAP[]

/* STACK: &lt;align?&gt;, &lt;to&gt;, &lt;from&gt; */

#WBeginLoop133:

#PUSH, 2 /* to */
CINDEX[]
#PUSH, 2 /* from */
CINDEX[]
GTEQ[]
IF[]

    /* STACK: &lt;align?&gt;, &lt;to&gt;, &lt;from&gt; */

    DUP[]
    #PUSH, 4 /* align? */
    CINDEX[]
    IF[]
        ALIGNRP[]
    ELSE[]
        IP[]
    EIF[]

    #PUSH, 1
    ADD[]

    #PUSH, WOffset133
    JMPR[], (WOffset133=#WBeginLoop133)

EIF[]

/* STACK: &lt;align?&gt;, &lt;to&gt;, &lt;from&gt; */

POP[]
POP[]
POP[]

#PUSHON
#END
ENDF[]

FDEF[], 134

/* support fn for italic IUP[?]
   assume pv and fv are set externally

   CALL[], &lt;p0&gt;, &lt;p1&gt;, 134 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p0&gt;, &lt;p1&gt; */

#PUSH, 2 /* p0 */
CINDEX[]
GC[O]
#PUSH, 2 /* p1 */
CINDEX[]
GC[O]
EQ[]

/* STACK: &lt;p0&gt;, &lt;p1&gt;, &lt;eq?&gt; */

ROLL[] /* p0 */
DUP[]
DUP[]
SRP0[]
SRP1[]
#PUSH, 1
ADD[]
ROLL[] /* p1 */
DUP[]
SRP2[]
#PUSH, 1
SUB[]

/* STACK: &lt;eq?&gt;, &lt;from&gt;, &lt;to&gt; */

#PUSH, 133
CALL[]

#PUSHON
#END
ENDF[]

FDEF[], 135

/* support fn for italic IUP[?]
   assume pv and fv are set externally

   CALL[], &lt;p0&gt;, &lt;end&gt;, &lt;start&gt;, &lt;p1&gt;, 135 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p0&gt;, &lt;end&gt;, &lt;start&gt;, &lt;p1&gt; */

#PUSH, 4 /* p0 */
CINDEX[]
GC[O]
#PUSH, 2 /* p1 */
CINDEX[]
GC[O]
EQ[]

/* STACK: &lt;p0&gt;, &lt;end&gt;, &lt;start&gt;, &lt;p1&gt;, &lt;eq?&gt; */

SWAP[]
DUP[]
SRP2[]
#PUSH, 1
SUB[]
SWAP[]
DUP[]

#PUSH, 6 /* p0 */
MINDEX[]
DUP[]
DUP[]
SRP0[]
SRP1[]
#PUSH, 1
ADD[]
#PUSH, 6 /* end */
MINDEX[]

/* STACK: &lt;start&gt;, &lt;to&gt;, &lt;eq?&gt;, &lt;eq?&gt;, &lt;from&gt;, &lt;end&gt; */

#PUSH, 133
CALL[]

ROLL[]
ROLL[]
#PUSH, 133
CALL[]

#PUSHON
#END
ENDF[]

FDEF[], 150
/* Function 150 takes 5 arguments */
/* VERSION 1.0 20120420 */

/* This function moves a point between a PPEM range */
/* for the given rasterizer mode (in Store 2) ClearType */
/* CALL[],&lt;point&gt;,&lt;amount&gt;,&lt;low PPEM&gt;,&lt;high PPEM&gt;, &lt;rasterizer mode&gt;, 150 */
/* &lt;low ppem&gt; Lowest PPEM range to be modified (inclusive) */
/* &lt;high ppem&gt; Highest PPEM range to be modified (inclusive) */
/* &lt;Point&gt; point to be modified */
/* &lt;amount&gt; Amount to move point, in ± 64ths */
/* &lt;rasterizer mode&gt; value in store 2 */
/* 150 Function number */
#BEGIN
#PUSHOFF
#PUSH, 2
RS[] /* read store 2 */
EQ[] /* is it = to the last arg? */
IF[] /* if so . . . */
    GPV[] /* Save current PV on stack to restore */
    SPVTCA[Y] /* We should only MPPEM with Y PV */
    ROLL[]
    MPPEM[] /* check cur. size against high ppem */
    GTEQ[]
    #PUSH, 4
    MINDEX[]
    MPPEM[] /* and low ppem */
    LTEQ[]
    AND[]
    IF[] /* if it's between, then */
        SPVFS[] /* Restore orig PV */
        SHPIX[] /* move the point by the amount */
    ELSE[]
       SPVFS[] /* Restore orig PV */
       POP[] /* otherwise remove the remaining arguments */
       POP[]
    EIF[]

ELSE[]
    POP[] /* remove the remaining arguments if the first test fails */
    POP[]
    POP[]
    POP[]
EIF[]
#END
#PUSHON
ENDF[]

FDEF[], 151
/* Function 151 takes 5 arguments */
/* VERSION 1.0 20120420 */

/* This function moves a point between a PPEM range */
/* for the given set of rasterizer flags (in Store 2) */
/* CALL[],&lt;point&gt;,&lt;amount&gt;,&lt;low PPEM&gt;,&lt;high PPEM&gt;, &lt;rasterizer mode&gt;, 151 */
/* &lt;low ppem&gt; Lowest PPEM range to be modified (inclusive) */
/* &lt;high ppem&gt; Highest PPEM range to be modified (inclusive) */
/* &lt;Point&gt; point to be modified */
/* &lt;amount&gt; Amount to move point, in ± 64ths */
/* &lt;rasterizer flag&gt; bit of a value in store 2 */
/* Function 151 differs from Function 150 in that instead of requiring an */
/* exact match with the value in store 2, a given set of flags (or bit values) */
/* can be referenced. For example, if the function should execute */
/* in any situation where ClearType with fractional AWs is enabled, */
/* (c.f. Function 84) irrespective of other flags (e.g. BGR as opposed */
/* to RGB Devices or non-ClearType direction anti-aliasing) then one */
/* would use a &lt;rasterizer flag&gt; value of 64. (c.f. Function 84.) */
/* The rasterizer values for &lt;rasterizer mode&gt; are defined in the function */
/* 84 header. */
/* EXAMPLE: */
/* If one wanted the move to occur if either subpixel positioned or full gray pixel */
/* then one would take the 64 (from subpixel positioned) and the 256 (from */
/* gray full-pixel) and add them to get 320. With a value of 320, the point will */
/* get moved if either subpixel positioned or full gray pixel is enabled. */
/* If one wanted to move to occur always if ClearType was on, independent of */
/* any subtype or spacing flag, one would set the rasterizer mode to 2. */

/* 151 Function number */
#BEGIN
#PUSHOFF
#PUSH, 152 /* Call function 152 with the rasterizer mode on the top of stack */
CALL[]
IF[] /* if so . . . */
    GPV[] /* Save current PV on stack to restore */
    SPVTCA[Y] /* We should only MPPEM with Y PV */
    ROLL[]
    MPPEM[] /* check cur. size against high ppem */
    GTEQ[]
    #PUSH, 4
    MINDEX[]
    MPPEM[] /* and low ppem */
    LTEQ[]
    AND[]
    IF[] /* if it's between, then */
        SPVFS[] /* Restore orig PV */
        SHPIX[] /* move the point by the amount */
    ELSE[]
        SPVFS[] /* Restore orig PV */
        POP[] /* otherwise remove the remaining arguments */
        POP[]
    EIF[]

ELSE[]
    POP[] /* remove the remaining arguments if the first test fails */
    POP[]
    POP[]
    POP[]
EIF[]
#END
#PUSHON
ENDF[]

FDEF[], 152
/* Function 152 takes 1 argument, a "bitfield" flag. */
/* VERSION 1.0 20111117 */
/*
Function 152 is intended to take a set of one or more bits as input and do an AND (e.g. mask) of those
bits with the set of flags returned by Function 84. Then determine if there is at least one
of these resultant bits that are set.

Function 152 returns TRUE if the match is successful, and FALSE if it is not successful.

If the parameter is zero, indicating no flags, then the function returns FALSE.

This function takes a maxiumum of 32 bit flags.

USES: Storage 2 (FN 84)
RETURNS: 0 or 1
*/

#BEGIN
#PUSHOFF
/* Input parameter is a set of one or more flags */

DUP[]
#PUSH, 2     /* Read FN 84 flags */
RS[]
EQ[]         /* If a simple match, return TRUE */
#PUSH, 1
SWAP[]

#PUSH, BEcln
SWAP[]
JROT[], (BEcln=#LEndClear)  /* Jump to end and clean up stack. */
POP[]
#PUSH, 0, 2
RS[]         /* Read FN 84 flags */
#PUSH, BEclr /* If no FN 84 flags, return FALSE */
SWAP[]

JROF[], (BEclr=#LEndClear)

POP[]
#PUSH, 2
RS[]
SWAP[]
#PUSH, 32   /* Maximum number of bits to loop through */
/* TopLoop: */
#LTopLoop:
   /* STACK
   Loop Iteration Count
   Updated (shifted) Input Value
   Updated (shifted) FN 84 Flag
   */
  DUP[]
  NOT[]
  IF[]    /* Exit the loop when done */
    POP[]
    POP[]
    POP[]
    #PUSH, 0, BDEnd /* 73  End */

    JMPR[], (BDEnd=#LEndFn)

  EIF[]
  ROLL[]
  ROLL[]
  DUP[]
  ROLL[]
  DUP[]
  ROLL[]
  SWAP[]
  /* STACK
  Updated (shifted) FN 84 Flag
  Updated (shifted) Input Value
  Updated (shifted) FN 84 Flag
  Updated (Shifted) Input Value
  Loop Interation Count
  */

  /* Check to see if the lower-order bit is set in the FN 84 Flag */
  #PUSH, 4096 /* Convert to 26.6 by multiply by 64 x 64 */
  MUL[]
  ODD[]
  IF[]
    /* Check to see if the lower-order bit is set in the Input Value */
    #PUSH, 4096
    MUL[]
    ODD[]
    IF[]
      /* We can early out here once we find our first match */
      POP[]
      POP[]
      POP[]
      #PUSH, 1, BTEnd  /* 1 is the TRUE return code */
      JMPR[], (BTEnd=#LEndFn)
    EIF[]
  ELSE[]
    POP[]
  EIF[]
  /* STACK
  Updated (shifted) FN 84 Flag
  Updated (shifted) Input Value
  Loop Interation Count
  */
  /* Shift both the Input Value and the FN 84 Flag each one bit right */
  #PUSH, 128  /* 2 in 26.6 */
  DIV[]
  DUP[]
  NOT[]
  IF[]
    POP[]
    POP[]
    POP[]
    #PUSH, 0, BPEnd /* 0 is end condition of FALSE */

    JMPR[], (BPEnd=#LEndFn)

  EIF[]
  SWAP[]
  #PUSH, 128  /* 2 in 26.6 */
  DIV[]
  DUP[]
  NOT[]
  IF[]
    POP[]
    POP[]
    POP[]
    #PUSH, 0, BZEnd /* End */

    JMPR[], (BZEnd=#LEndFn)

  EIF[]
  ROLL[]
  #PUSH, 1
  SUB[]
  #PUSH, WReLoop  /* -77 TopLoop */

JMPR[], (WReLoop=#LTopLoop)

/* EndClear: */
#LEndClear:
SWAP[]
POP[]
#LEndFn:
/* End: */
#END
#PUSHON
ENDF[]

FDEF[], 153
/* Function 153 takes 1 argument, a "bitfield" flag. */
/* VERSION 1.0 20111117 */
/*
Function 153 is intended to take a set of one or more bits as input and do an AND (e.g. mask) of those
bits with the set of flags returned by Function 84. Then determine if ALL
of these resultant bits from the mask are set.

Function 153 returns TRUE if the match is successful, and FALSE if it is not successful.

If the parameter is zero, indicating no flags, then the function returns FALSE.

This function takes a maxiumum of 32 flags.

USES: Storage 2 (FN 84)
RETURNS: 0 or 1
*/

#BEGIN
#PUSHOFF
/* Input parameter is a set of one or more flags */

DUP[]
#PUSH, 2     /* Read FN 84 flags */
RS[]
EQ[]         /* If a simple match, return TRUE */
#PUSH, 1
SWAP[]

#PUSH, BEcln
SWAP[]
JROT[], (BEcln=#LEndClear)  /* Jump to end and clean up stack. */
POP[]
#PUSH, 0, 2
RS[]         /* Read FN 84 flags */
#PUSH, BEclr /* If no FN 84 flags, return FALSE */
SWAP[]

JROF[], (BEclr=#LEndClear)

POP[]
#PUSH, 0, 2   /* 0 is the boolean tracking success, start off with FALSE */
RS[]
ROLL[]
#PUSH, 32   /* Maximum number of bits to loop through */
/* TopLoop: */
#LTopLoop:
   /* STACK
   Loop Iteration Count
   Updated (shifted) Input Value
   Updated (shifted) FN 84 Flag
   Conditional boolean tracking success
   */
  DUP[]
  NOT[]
  IF[]    /* Exit the loop when done */
    POP[]
    POP[]
    POP[]
    #PUSH, BDEnd /* 73  End */

    JMPR[], (BDEnd=#LEndFn)

  EIF[]
  ROLL[]
  ROLL[]
  DUP[]
  ROLL[]
  DUP[]
  ROLL[]
  SWAP[]
  /* STACK
  Updated (shifted) FN 84 Flag
  Updated (shifted) Input Value
  Updated (shifted) FN 84 Flag
  Updated (Shifted) Input Value
  Loop Interation Count
  Conditional boolean tracking success
  */

  /* Check to see if the lower-order bit is set in the FN 84 Flag */
  #PUSH, 4096 /* Convert to 26.6 by multiply by 64 x 64 */
  MUL[]
  ODD[]
  IF[]
    /* Check to see if the lower-order bit is set in the Input Value */
    #PUSH, 4096
    MUL[]
    ODD[]
    IF[]
      #PUSH, 4
      MINDEX[]
      #PUSH, 1  /* Set TRUE return code */
      OR[]      /* We OR this because we will immediately exit if we fail this test */
      #PUSH, 4
      MINDEX[]
      #PUSH, 4
      MINDEX[]
      #PUSH, 4
      MINDEX[]
    ELSE[]
      POP[]
      POP[]
      POP[]
      POP[]
      #PUSH, BTEnd , 0  /* 0 is the FALSE return code */
      SWAP[]
      JMPR[], (BTEnd=#LEndFn)

    EIF[]
  ELSE[]
    POP[]
  EIF[]
  #PUSH, 4 /* Can this be cleaned up and integrated with the code below? */
  MINDEX[]
  SWAP[]
  /* STACK
  Updated (shifted) FN 84 Flag
  Conditional boolean tracking success
  Updated (shifted) Input Value
  Loop Interation Count
  */
  /* Shift both the Input Value and the FN 84 Flag each one bit right */
  #PUSH, 128  /* 2 in 26.6 */
  DIV[]
  DUP[]
  NOT[]
  IF[]
    ROLL[]
    NOT[]
    ROLL[]
    AND[]
    SWAP[]
    POP[]
    SWAP[]
    POP[]
    #PUSH, BPEnd /* 29  End */

    JMPR[], (BPEnd=#LEndFn)

  EIF[]
  ROLL[]
  #PUSH, 128  /* 2 in 26.6 */
  DIV[]
  DUP[]
  NOT[]
  IF[]
    POP[]
    POP[]
    SWAP[]
    POP[]
    #PUSH, BZEnd /* End */

    JMPR[], (BZEnd=#LEndFn)

  EIF[]
  #PUSH, 4
  MINDEX[]
  #PUSH, 1
  SUB[]
  #PUSH, WReLoop  /* -77 TopLoop */

JMPR[], (WReLoop=#LTopLoop)

/* EndClear: */
#LEndClear:
SWAP[]
POP[]
#LEndFn:
/* End: */
#END
#PUSHON
ENDF[]



    </extraProgram>

    <extraProgram name="ppgm">
/* auto-generated pre-program */
/* VTT 6.35 compiler Sun Apr 27 04:23:12 2025 */

/* Grey scaling? */
CALL[], 84

/* InstructionsOn */
#PUSHOFF
MPPEM[]
#PUSH, 2047
GT[]
MPPEM[]
#PUSH, 8
LT[]
OR[]
#PUSH, 1
GETINFO[]
#PUSH, 37
GTEQ[]
#PUSH, 1
GETINFO[]
#PUSH, 64
LTEQ[]
AND[]
#PUSH, 6
GETINFO[]
#PUSH, 0
NEQ[]
AND[]
OR[]
IF[]
    #PUSH, 1, 1
    INSTCTRL[]
EIF[]
#PUSHON

/* DropOutCtrlOff */
SCANCTRL[], 400

SCANTYPE[], 1
SCANTYPE[], 5

/* CvtCutIn */
SVTCA[Y]
SCVTCI[], 64
WS[], 3, 64
#PUSHOFF
MPPEM[]
#PUSH, 144
GTEQ[]
IF[]
#PUSH, 3, 0, 0
SCVTCI[]
WS[]
EIF[]
#PUSHON

/* ClearTypeCtrl */
#PUSHOFF
#PUSH, 2, 2
RS[]
LTEQ[]
IF[]
    #PUSH, 4, 3
    INSTCTRL[]
EIF[]
#PUSHON

WS[], 16, 0
/* LinearAdvanceWidths */
SVTCA[Y]
CALL[], 2, 89
SVTCA[Y]
CALL[], 8, 89
CALL[], 3, 110, 2, 85
CALL[], 9, 40, 8, 85
SVTCA[Y]
CALL[], 0, 89
SVTCA[Y]
CALL[], 6, 89
SVTCA[Y]
CALL[], 10, 89
SVTCA[Y]
CALL[], 14, 89
CALL[], 1, 74, 0, 85
CALL[], 7, 44, 6, 85
CALL[], 11, 55, 10, 85
CALL[], 15, 88, 14, 85
SVTCA[Y]
CALL[], 4, 89
SVTCA[Y]
CALL[], 12, 89
CALL[], 5, 110, 4, 85
CALL[], 13, 40, 12, 85
SVTCA[Y]
CALL[], 16, 89
SVTCA[Y]
CALL[], 18, 89
CALL[], 17, 44, 16, 85
CALL[], 19, 44, 18, 85
SVTCA[X]
CALL[], 21, 25, 69, 22, 86, 90
SVTCA[X]
CALL[], 23, 58, 22, 70, 91
SVTCA[X]
CALL[], 26, 51, 25, 32, 91
SVTCA[X]
CALL[], 24, 58, 22, 70, 91
SVTCA[X]
CALL[], 27, 51, 25, 32, 91
SVTCA[X]
CALL[], 28, 22, 147, 31
SVTCA[Y]
CALL[], 29, 23, 255, 31
SVTCA[X]
CALL[], 30, 53, 24, 22, 92
CALL[], 31, 30, 55, 31
SVTCA[X]
CALL[], 32, 9, 26, 25, 92
SVTCA[X]
CALL[], 33, 25, 255, 31
SVTCA[Y]
CALL[], 34, 4, 26, 25, 92
SVTCA[Y]
CALL[], 35, 27, 44, 31
SVTCA[X]
CALL[], 36, 32, 27, 25, 92
CALL[], 37, 36, 147, 31
CALL[], 42, 41, 74, 31
CALL[], 48, 47, 88, 31
CALL[], 50, 49, 40, 31
CALL[], 51, 49, 28, 31
SVTCA[X]
CALL[], 53, 28, 220, 31
CALL[], 54, 28, 255, 31
CALL[], 55, 28, 220, 31
SVTCA[Y]
CALL[], 56, 29, 74, 31
CALL[], 57, 29, 147, 31
CALL[], 58, 29, 255, 31
CALL[], 59, 29, 88, 31
CALL[], 60, 30, 26, 31
CALL[], 61, 31, 74, 31
CALL[], 62, 31, 110, 31
CALL[], 63, 31, 255, 31
CALL[], 64, 31, 220, 31
CALL[], 65, 30, 147, 31
CALL[], 66, 30, 255, 31
CALL[], 67, 30, 147, 31
CALL[], 68, 30, 49, 31
CALL[], 69, 30, 28, 31
SVTCA[X]
CALL[], 70, 32, 255, 31
CALL[], 71, 33, 63, 31
CALL[], 72, 33, 147, 31
CALL[], 73, 33, 255, 31
CALL[], 74, 33, 147, 31
SVTCA[Y]
CALL[], 75, 34, 110, 31
CALL[], 76, 34, 255, 31
CALL[], 77, 34, 110, 31
CALL[], 78, 35, 88, 31
CALL[], 79, 35, 255, 31
CALL[], 80, 36, 44, 31
CALL[], 81, 36, 88, 31
CALL[], 82, 36, 220, 31
CALL[], 83, 36, 255, 31
CALL[], 84, 37, 255, 31
CALL[], 85, 37, 110, 31
CALL[], 86, 36, 44, 31
SVTCA[X]
CALL[], 87, 38, 255, 31
CALL[], 88, 39, 147, 31
CALL[], 89, 39, 255, 31
CALL[], 90, 39, 220, 31
SVTCA[Y]
CALL[], 91, 40, 255, 31
CALL[], 92, 40, 88, 31
CALL[], 93, 42, 255, 31
CALL[], 94, 41, 255, 31
CALL[], 95, 43, 255, 31
SVTCA[X]
CALL[], 96, 44, 55, 31
CALL[], 97, 44, 110, 31
CALL[], 98, 44, 255, 31
CALL[], 99, 44, 110, 31
CALL[], 100, 45, 255, 31
SVTCA[Y]
CALL[], 101, 46, 255, 31
CALL[], 102, 47, 255, 31
CALL[], 103, 48, 255, 31
CALL[], 104, 48, 147, 31
CALL[], 105, 47, 40, 31
CALL[], 106, 50, 220, 31
CALL[], 107, 50, 255, 31
CALL[], 108, 49, 147, 31
CALL[], 109, 49, 255, 31
CALL[], 110, 49, 220, 31
CALL[], 111, 49, 88, 31
CALL[], 112, 49, 63, 31
CALL[], 113, 51, 220, 31
CALL[], 114, 51, 255, 31
CALL[], 115, 52, 255, 31
RTG[]

    </extraProgram>

  </TSI1>

  <TSI3>

    <glyphProgram name=".notdef">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/*Auto-Hinting Light is not applied: Empty glyph or glyph with one point*/

    </glyphProgram>

    <glyphProgram name="A">
/* VTTTalk Unicode 0x41 (A) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 6 8 */
/* CVT 7 3 */
/* Min and Max */
ResYAnchor(6,8)	/* min, CVT */
ResYAnchor(7,3)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
YInterpolate(7,1,6)
YAnchor(1)
ResYDist(1,2) /*perpendicular to the stroke*/

/* Extreme Min */
YShift(6,10)

Smooth()


    </glyphProgram>

    <glyphProgram name="AE">
/* VTTTalk Unicode 0xc6 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 8 */
/* CVT 1 2 */
/* Min and Max */
ResYAnchor(0,8)	/* min, CVT */
ResYAnchor(1,2)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(1,4) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(1,8,0)
YAnchor(8)
ResYDist(8,5) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
YInterpolate(1,14,0)
YAnchor(14)
ResYDist(14,16) /*perpendicular to the stroke*/

/* YDir: Stroke #3 */
YShift(0,12) /*stroke, CVT of another stroke*/
ResYDist(12,9) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="B">
/* VTTTalk Unicode 0x42 (B) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 8 */
/* CVT 1 2 */
/* Min and Max */
ResYAnchor(0,8)	/* min, CVT */
ResYAnchor(1,2)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(1,45) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(1,33,0)
YAnchor(33)
ResYDist(33,34) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(0,22) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="C">
/* VTTTalk Unicode 0x43 (C) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 9 */
/* CVT 11 3 */
/* Min and Max */
ResYAnchor(0,9)	/* min, CVT */
ResYAnchor(11,3)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(11,18) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,28) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="CR">
/* VTTTalk Unicode 0xd */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/*Auto-Hinting Light is not applied: Empty glyph or glyph with one point*/


    </glyphProgram>

    <glyphProgram name="Ccaron">
/* VTTTalk Unicode 0x10c */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 9 */
/* CVT 11 3 */
/* Min and Max */
ResYAnchor(0,9)	/* min, CVT */
YAnchor(36)	/* max */

/* CVTs - beginning */
ResYAnchor(11,3)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(11,18) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,28) /*perpendicular to the stroke*/

/* Extreme Max */
YShift(36,41)

Smooth()


    </glyphProgram>

    <glyphProgram name="D">
/* VTTTalk Unicode 0x44 (D) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 8 */
/* CVT 1 2 */
/* Min and Max */
ResYAnchor(0,8)	/* min, CVT */
ResYAnchor(1,2)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(1,27) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,17) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="Dcaron">
/* VTTTalk Unicode 0x10e */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 8 */
/* CVT 1 2 */
/* Min and Max */
ResYAnchor(0,8)	/* min, CVT */
YAnchor(28)	/* max */

/* CVTs - beginning */
ResYAnchor(1,2)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(1,27) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,17) /*perpendicular to the stroke*/

/* Extreme Max */
YShift(28,33)

Smooth()

    </glyphProgram>

    <glyphProgram name="E">
/* VTTTalk Unicode 0x45 (E) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 8 */
/* CVT 1 2 */
/* Min and Max */
ResYAnchor(0,8)	/* min, CVT */
ResYAnchor(1,2)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(1,4) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(1,8,0)
YAnchor(8)
ResYDist(8,5) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(0,9) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="Ecaron">
/* VTTTalk Unicode 0x11a */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 8 */
/* CVT 1 2 */
/* Min and Max */
ResYAnchor(0,8)	/* min, CVT */
YAnchor(12)	/* max */

/* CVTs - beginning */
ResYAnchor(1,2)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(1,4) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(12,8,0)
YAnchor(8)
ResYDist(8,5) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(0,9) /*perpendicular to the stroke*/

/* Extreme Max */
YShift(12,17)

Smooth()


    </glyphProgram>

    <glyphProgram name="Eng">
/* VTTTalk Unicode 0x14a */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 25 8 */
/* CVT 27 2 */
/* Min and Max */
YAnchor(9)	/* min */
ResYAnchor(27,2)	/* max, CVT */

/* CVTs - beginning */
ResYAnchor(25,8)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(9,18) /*perpendicular to the stroke*/

/* Extreme Max */
YShift(27,1)

Smooth()

    </glyphProgram>

    <glyphProgram name="Eth">
/* VTTTalk Unicode 0xd0 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 8 */
/* CVT 5 2 */
/* Min and Max */
ResYAnchor(0,8)	/* min, CVT */
ResYAnchor(5,2)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(5,31) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(5,35,0)
YAnchor(35)
ResYDist(35,32) /*perpendicular to the stroke*/
YShift(35,2) /*along bottom edge*/
YShift(32,3) /*along top edge*/

/* YDir: Stroke #2 */
ResYDist(0,21) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="Euro">
/* VTTTalk Unicode 0x20ac */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 13 */
/* CVT 19 5 */
/* Min and Max */
ResYAnchor(0,13)	/* min, CVT */
ResYAnchor(19,5)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(19,29) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(19,34,0)
YAnchor(34)
ResYDist(34,37) /*perpendicular to the stroke*/
YShift(37,12) /*along bottom edge*/
YShift(34,13) /*along top edge*/

/* YDir: Stroke #2 */
YInterpolate(19,5,0)
YAnchor(5)
ResYDist(5,6) /*perpendicular to the stroke*/
YShift(5,44) /*along bottom edge*/
YShift(6,41) /*along top edge*/

/* YDir: Stroke #3 */
ResYDist(0,48) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="F">
/* VTTTalk Unicode 0x46 (F) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 8 */
/* CVT 1 2 */
/* Min and Max */
ResYAnchor(0,8)	/* min, CVT */
ResYAnchor(1,2)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(1,4) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(1,8,0)
YAnchor(8)
ResYDist(8,5) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="G">
/* VTTTalk Unicode 0x47 (G) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 9 */
/* CVT 11 3 */
/* Min and Max */
ResYAnchor(0,9)	/* min, CVT */
ResYAnchor(11,3)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(11,21) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(11,39,0)
YAnchor(39)
ResYDist(39,40) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(0,32) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="Gcaron">
/* VTTTalk Unicode 0x1e6 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 9 */
/* CVT 11 3 */
/* Min and Max */
ResYAnchor(0,9)	/* min, CVT */
YAnchor(45)	/* max */

/* CVTs - beginning */
ResYAnchor(11,3)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(11,21) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(45,39,0)
YAnchor(39)
ResYDist(39,40) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(0,32) /*perpendicular to the stroke*/

/* Extreme Max */
YShift(45,50)

Smooth()

    </glyphProgram>

    <glyphProgram name="H">
/* VTTTalk Unicode 0x48 (H) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 8 */
/* CVT 1 2 */
/* Min and Max */
ResYAnchor(0,8)	/* min, CVT */
ResYAnchor(1,2)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
YInterpolate(1,10,0)
YAnchor(10)
ResYDist(10,3) /*perpendicular to the stroke*/

/* Extreme Max */
YShift(1,6)

/* Extreme Min */
YShift(0,8)

Smooth()

    </glyphProgram>

    <glyphProgram name="Hbar">
/* VTTTalk Unicode 0x126 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 4 8 */
/* CVT 5 2 */
/* Min and Max */
ResYAnchor(4,8)	/* min, CVT */
ResYAnchor(5,2)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
YInterpolate(5,1,4)
YAnchor(1)
ResYDist(1,0) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(5,14,4)
YAnchor(14)
ResYDist(14,7) /*perpendicular to the stroke*/

/* Extreme Max */
YShift(5,10)

/* Extreme Min */
YShift(4,12)

Smooth()


    </glyphProgram>

    <glyphProgram name="I">
/* VTTTalk Unicode 0x49 (I) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 8 */
/* CVT 5 2 */
/* Min and Max */
ResYAnchor(0,8)	/* min, CVT */
ResYAnchor(5,2)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(5,4) /*perpendicular to the stroke*/
YShift(4,8) /*along bottom edge*/

/* YDir: Stroke #1 */
ResYDist(0,9) /*perpendicular to the stroke*/
YShift(9,1) /*along top edge*/

Smooth()

    </glyphProgram>

    <glyphProgram name="J">
/* VTTTalk Unicode 0x4a (J) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 9 */
/* CVT 14 2 */
/* Min and Max */
ResYAnchor(0,9)	/* min, CVT */
ResYAnchor(14,2)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(14,13) /*perpendicular to the stroke*/
YShift(13,17) /*along bottom edge*/

/* YDir: Stroke #1 */
ResYDist(0,7) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="K">
/* VTTTalk Unicode 0x4b (K) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 4 8 */
/* CVT 5 2 */
/* Min and Max */
ResYAnchor(4,8)	/* min, CVT */
ResYAnchor(5,2)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* Extreme Max */
YShift(5,8)

/* Extreme Max */
YShift(5,14)

/* Extreme Min */
YShift(4,16)

Smooth()

    </glyphProgram>

    <glyphProgram name="L">
/* VTTTalk Unicode 0x4c (L) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 8 */
/* CVT 1 2 */
/* Min and Max */
ResYAnchor(0,8)	/* min, CVT */
ResYAnchor(1,2)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(0,3) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="Lcaron">
/* VTTTalk Unicode 0x13d */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 11 3 */
/* CVT 18 8 */
/* CVT 19 2 */
/* Min and Max */
ResYAnchor(18,8)	/* min, CVT */
ResYAnchor(11,3)	/* max, CVT */

/* CVTs - beginning */
ResYAnchor(19,2)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(18,21) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="Lslash">
/* VTTTalk Unicode 0x141 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 8 */
/* CVT 5 2 */
/* Min and Max */
ResYAnchor(0,8)	/* min, CVT */
ResYAnchor(5,2)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(0,20) /*perpendicular to the stroke*/

/* Extreme Max */
YShift(5,9)

Smooth()


    </glyphProgram>

    <glyphProgram name="M">
/* VTTTalk Unicode 0x4d (M) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 8 */
/* CVT 2 2 */
/* Min and Max */
ResYAnchor(0,8)	/* min, CVT */
ResYAnchor(2,2)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* Extreme Max */
YShift(2,5)

/* Extreme Min */
YShift(0,7)

Smooth()


    </glyphProgram>

    <glyphProgram name="N">
/* VTTTalk Unicode 0x4e (N) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 8 */
/* CVT 2 2 */
/* Min and Max */
ResYAnchor(0,8)	/* min, CVT */
ResYAnchor(2,2)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* Extreme Max */
YShift(2,5)

/* Extreme Min */
YShift(0,7)

Smooth()


    </glyphProgram>

    <glyphProgram name="NULL">
/* VTTTalk Unicode 0x0 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/*Auto-Hinting Light is not applied: Empty glyph or glyph with one point*/


    </glyphProgram>

    <glyphProgram name="Ncaron">
/* VTTTalk Unicode 0x147 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 8 */
/* CVT 2 2 */
/* Min and Max */
ResYAnchor(0,8)	/* min, CVT */
YAnchor(10)	/* max */

/* CVTs - beginning */
ResYAnchor(2,2)  /*knot, CVT*/
/* CVTs - end */


/* Extreme Min */
YShift(0,7)

/* Extreme Max */
YShift(10,15)

Smooth()


    </glyphProgram>

    <glyphProgram name="O">
/* VTTTalk Unicode 0x4f (O) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 9 */
/* CVT 10 3 */
/* Min and Max */
ResYAnchor(0,9)	/* min, CVT */
ResYAnchor(10,3)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(10,29) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,20) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="OE">
/* VTTTalk Unicode 0x152 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 9 */
/* CVT 10 3 */
/* CVT 14 2 */
/* CVT 25 8 */
/* Min and Max */
ResYAnchor(0,9)	/* min, CVT */
ResYAnchor(10,3)	/* max, CVT */

/* CVTs - beginning */
ResYAnchor(14,2)  /*knot, CVT*/
ResYAnchor(25,8)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(14,17) /*perpendicular to the stroke*/
YShift(17,36) /*along bottom edge*/

/* YDir: Stroke #1 */
YInterpolate(10,21,0)
YAnchor(21)
ResYDist(21,18) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(25,22) /*perpendicular to the stroke*/
YShift(22,29) /*along top edge*/

Smooth()

    </glyphProgram>

    <glyphProgram name="Oslash">
/* VTTTalk Unicode 0xd8 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 4 9 */
/* CVT 14 3 */
/* Min and Max */
ResYAnchor(4,9)	/* min, CVT */
YAnchor(2)	/* max */

/* CVTs - beginning */
ResYAnchor(14,3)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(14,33) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(4,24) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="P">
/* VTTTalk Unicode 0x50 (P) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 8 */
/* CVT 1 2 */
/* Min and Max */
ResYAnchor(0,8)	/* min, CVT */
ResYAnchor(1,2)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(1,25) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(1,12,0)
YAnchor(12)
ResYDist(12,14) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="Q">
/* VTTTalk Unicode 0x51 (Q) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 15 3 */
/* Min and Max */
YAnchor(0)	/* min */
ResYAnchor(15,3)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(15,42) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,29) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="R">
/* VTTTalk Unicode 0x52 (R) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 8 */
/* CVT 1 2 */
/* Min and Max */
ResYAnchor(0,8)	/* min, CVT */
ResYAnchor(1,2)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(1,26) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(1,14,0)
YAnchor(14)
ResYDist(14,16) /*perpendicular to the stroke*/

/* Extreme Min */
YShift(0,12)

Smooth()


    </glyphProgram>

    <glyphProgram name="Rcaron">
/* VTTTalk Unicode 0x158 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 8 */
/* CVT 1 2 */
/* Min and Max */
ResYAnchor(0,8)	/* min, CVT */
YAnchor(27)	/* max */

/* CVTs - beginning */
ResYAnchor(1,2)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(1,26) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(27,14,0)
YAnchor(14)
ResYDist(14,16) /*perpendicular to the stroke*/

/* Extreme Min */
YShift(0,12)

/* Extreme Max */
YShift(27,32)

Smooth()


    </glyphProgram>

    <glyphProgram name="S">
/* VTTTalk Unicode 0x53 (S) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 9 */
/* CVT 27 3 */
/* Min and Max */
ResYAnchor(0,9)	/* min, CVT */
ResYAnchor(27,3)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(27,35) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,7) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="Scaron">
/* VTTTalk Unicode 0x160 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 9 */
/* CVT 27 3 */
/* Min and Max */
ResYAnchor(0,9)	/* min, CVT */
YAnchor(55)	/* max */

/* CVTs - beginning */
ResYAnchor(27,3)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(27,35) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,7) /*perpendicular to the stroke*/

/* Extreme Max */
YShift(55,60)

Smooth()

    </glyphProgram>

    <glyphProgram name="T">
/* VTTTalk Unicode 0x54 (T) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 8 */
/* CVT 3 2 */
/* Min and Max */
ResYAnchor(0,8)	/* min, CVT */
ResYAnchor(3,2)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(3,2) /*perpendicular to the stroke*/
YShift(2,6) /*along bottom edge*/

Smooth()

    </glyphProgram>

    <glyphProgram name="Tbar">
/* VTTTalk Unicode 0x166 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 8 */
/* CVT 3 2 */
/* Min and Max */
ResYAnchor(0,8)	/* min, CVT */
ResYAnchor(3,2)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(3,2) /*perpendicular to the stroke*/
YShift(2,6) /*along bottom edge*/

/* YDir: Stroke #1 */
YInterpolate(3,8,0)
YAnchor(8)
ResYDist(8,9) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="Tcaron">
/* VTTTalk Unicode 0x164 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 8 */
/* CVT 3 2 */
/* Min and Max */
ResYAnchor(0,8)	/* min, CVT */
YAnchor(8)	/* max */

/* CVTs - beginning */
ResYAnchor(3,2)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(3,2) /*perpendicular to the stroke*/
YShift(2,6) /*along bottom edge*/

/* Extreme Max */
YShift(8,13)

Smooth()


    </glyphProgram>

    <glyphProgram name="Thorn">
/* VTTTalk Unicode 0xde */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 8 */
/* CVT 1 2 */
/* Min and Max */
ResYAnchor(0,8)	/* min, CVT */
ResYAnchor(1,2)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
YInterpolate(1,9,0)
YAnchor(9)
ResYDist(9,31) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(1,19,0)
YAnchor(19)
ResYDist(19,21) /*perpendicular to the stroke*/

/* Extreme Max */
YShift(1,5)

Smooth()


    </glyphProgram>

    <glyphProgram name="U">
/* VTTTalk Unicode 0x55 (U) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 9 */
/* CVT 5 2 */
/* Min and Max */
ResYAnchor(0,9)	/* min, CVT */
ResYAnchor(5,2)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(0,10) /*perpendicular to the stroke*/

/* Extreme Max */
YShift(5,16)

Smooth()


    </glyphProgram>

    <glyphProgram name="U.i">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 19  DISABLED for a NON-LATIN glyph */
/* CVT 5 16  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(0)	/* min */
YAnchor(5)	/* max */

/* YDir: Stroke #0 */
ResYDist(0,10) /*perpendicular to the stroke*/

/* Extreme Max */
YShift(5,16)

Smooth()


    </glyphProgram>

    <glyphProgram name="Uhorn">
/* VTTTalk Unicode 0x1af */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 9 */
/* CVT 5 2 */
/* Min and Max */
ResYAnchor(0,9)	/* min, CVT */
YAnchor(26)	/* max */

/* CVTs - beginning */
ResYAnchor(5,2)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
YShift(5,15) /*stroke, CVT of another stroke*/
ResYDist(15,21) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,10) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="V">
/* VTTTalk Unicode 0x56 (V) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 8 */
/* CVT 5 2 */
/* Min and Max */
ResYAnchor(0,8)	/* min, CVT */
ResYAnchor(5,2)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* Extreme Max */
YShift(5,2)

Smooth()

    </glyphProgram>

    <glyphProgram name="W">
/* VTTTalk Unicode 0x57 (W) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 8 */
/* CVT 1 2 */
/* Min and Max */
ResYAnchor(0,8)	/* min, CVT */
ResYAnchor(1,2)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* Extreme Max */
YShift(1,8)

/* Extreme Min */
YShift(0,10)

Smooth()

    </glyphProgram>

    <glyphProgram name="X">
/* VTTTalk Unicode 0x58 (X) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 8 */
/* CVT 2 2 */
/* Min and Max */
ResYAnchor(0,8)	/* min, CVT */
ResYAnchor(2,2)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* Extreme Max */
YShift(2,6)

/* Extreme Min */
YShift(0,9)

Smooth()


    </glyphProgram>

    <glyphProgram name="Y">
/* VTTTalk Unicode 0x59 (Y) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 2 2 */
/* CVT 8 8 */
/* Min and Max */
ResYAnchor(8,8)	/* min, CVT */
ResYAnchor(2,2)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* Extreme Max */
YShift(2,6)

Smooth()

    </glyphProgram>

    <glyphProgram name="Z">
/* VTTTalk Unicode 0x5a (Z) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 8 */
/* CVT 4 2 */
/* Min and Max */
ResYAnchor(0,8)	/* min, CVT */
ResYAnchor(4,2)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(4,3) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,7) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="Zcaron">
/* VTTTalk Unicode 0x17d */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 8 */
/* CVT 4 2 */
/* Min and Max */
ResYAnchor(0,8)	/* min, CVT */
YAnchor(10)	/* max */

/* CVTs - beginning */
ResYAnchor(4,2)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(4,3) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,7) /*perpendicular to the stroke*/

/* Extreme Max */
YShift(10,15)

Smooth()

    </glyphProgram>

    <glyphProgram name="a">
/* VTTTalk Unicode 0x61 (a) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 11 */
/* CVT 47 7 */
/* CVT 53 10 */
/* Min and Max */
ResYAnchor(0,11)	/* min, CVT */
ResYAnchor(47,7)	/* max, CVT */

/* CVTs - beginning */
ResYAnchor(53,10)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(47,39) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(47,18,0)
YAnchor(18)
ResYDist(18,8) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(0,28) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="acute">
/* VTTTalk Unicode 0xb4 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(2)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="acute.case">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(2)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="ae">
/* VTTTalk Unicode 0xe6 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 11 */
/* CVT 21 7 */
/* Min and Max */
ResYAnchor(0,11)	/* min, CVT */
ResYAnchor(21,7)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(21,14) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YShift(21,29) /*stroke, CVT of another stroke*/
ResYDist(29,74) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
YInterpolate(21,35,0)
YAnchor(35)
ResYDist(35,69) /*perpendicular to the stroke*/
YShift(35,61) /*along bottom edge*/

/* YDir: Stroke #3 */
YShift(0,49) /*stroke, CVT of another stroke*/
ResYDist(49,41) /*perpendicular to the stroke*/

/* YDir: Stroke #4 */
ResYDist(0,57) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="ampersand">
/* VTTTalk Unicode 0x26 (&amp;) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 5 19 */
/* CVT 22 16 */
/* Min and Max */
ResYAnchor(5,19)	/* min, CVT */
ResYAnchor(22,16)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(22,70) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(5,47) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="arrowboth">
/* VTTTalk Unicode 0x2194 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(3)	/* min */
YAnchor(0)	/* max */

/* YDir: Stroke #0 */
YInterpolate(0,6,3)
YAnchor(6)
ResYDist(6,13) /*perpendicular to the stroke*/

/* Extreme Max */
YShift(0,11)

/* Extreme Min */
YShift(3,8)

Smooth()


    </glyphProgram>

    <glyphProgram name="arrowdown">
/* VTTTalk Unicode 0x2193 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(5)	/* min */
YAnchor(0)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="arrowleft">
/* VTTTalk Unicode 0x2190 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(4)	/* min */
YAnchor(7)	/* max */

/* YDir: Stroke #0 */
YInterpolate(7,2,4)
YAnchor(2)
ResYDist(2,9) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="arrowright">
/* VTTTalk Unicode 0x2192 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(6)	/* min */
YAnchor(3)	/* max */

/* YDir: Stroke #0 */
YInterpolate(3,9,6)
YAnchor(9)
ResYDist(9,0) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="arrowup">
/* VTTTalk Unicode 0x2191 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 9 18 */
/* Min and Max */
ResYAnchor(9,18)	/* min, CVT */
YAnchor(4)	/* max */

/* CVTs - beginning */
/* CVTs - end */


Smooth()


    </glyphProgram>

    <glyphProgram name="arrowupdn">
/* VTTTalk Unicode 0x2195 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(1)	/* min */
YAnchor(9)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="asciicircum">
/* VTTTalk Unicode 0x5e (^) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 2 16 */
/* Min and Max */
YAnchor(0)	/* min */
ResYAnchor(2,16)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* Extreme Min */
YShift(0,5)

Smooth()

    </glyphProgram>

    <glyphProgram name="asciitilde">
/* VTTTalk Unicode 0x7e (~) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(13)	/* max */

/* YDir: Stroke #0 */
YInterpolate(13,5,0)
YAnchor(5)

/* YDir: Stroke #1 */
ResYDist(0,19) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="asterisk">
/* VTTTalk Unicode 0x2a (*) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(6)	/* max */

/* Extreme Min */
YShift(0,13)

Smooth()


    </glyphProgram>

    <glyphProgram name="asterisk.ss01">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(6)	/* max */

/* Extreme Min */
YShift(0,13)

Smooth()


    </glyphProgram>

    <glyphProgram name="asteriskmath">
/* VTTTalk Unicode 0x2217 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(6)	/* max */

/* Extreme Min */
YShift(0,13)

Smooth()


    </glyphProgram>

    <glyphProgram name="at">
/* VTTTalk Unicode 0x40 (@) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 19 */
/* CVT 11 17 */
/* Min and Max */
ResYAnchor(0,19)	/* min, CVT */
ResYAnchor(11,17)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(11,36) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(11,22,0)
YAnchor(22)
ResYDist(22,54) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(0,47) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="b">
/* VTTTalk Unicode 0x62 (b) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 11 */
/* CVT 6 10 */
/* CVT 7 0 */
/* CVT 14 7 */
/* Min and Max */
ResYAnchor(0,11)	/* min, CVT */
ResYAnchor(7,0)	/* max, CVT */

/* CVTs - beginning */
ResYAnchor(6,10)  /*knot, CVT*/
ResYAnchor(14,7)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(14,34) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,24) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="backslash">
/* VTTTalk Unicode 0x5c (\) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 1 17 */
/* CVT 3 19 */
/* Min and Max */
ResYAnchor(3,19)	/* min, CVT */
ResYAnchor(1,17)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* Extreme Max */
YShift(1,2)

Smooth()

    </glyphProgram>

    <glyphProgram name="bar">
/* VTTTalk Unicode 0x7c (|) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="block">
/* VTTTalk Unicode 0x2588 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="braceleft">
/* VTTTalk Unicode 0x7b ({) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(22)	/* max */

/* YDir: Stroke #0 */
ResYDist(22,25) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(22,10,0)
YAnchor(10)
ResYDist(10,11) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(0,43) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="braceright">
/* VTTTalk Unicode 0x7d (}) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(1)	/* min */
YAnchor(23)	/* max */

/* YDir: Stroke #0 */
ResYDist(23,22) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(23,37,1)
YAnchor(37)
ResYDist(37,34) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(1,2) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="bracketleft">
/* VTTTalk Unicode 0x5b ([) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

/* YDir: Stroke #0 */
ResYDist(1,4) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,5) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="bracketright">
/* VTTTalk Unicode 0x5d (]) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(1)	/* min */
YAnchor(6)	/* max */

/* YDir: Stroke #0 */
ResYDist(6,5) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(1,2) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="breve">
/* VTTTalk Unicode 0x2d8 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(4)	/* max */

/* YDir: Stroke #0 */
ResYDist(0,7) /*perpendicular to the stroke*/

/* Extreme Max */
YShift(4,10)

Smooth()


    </glyphProgram>

    <glyphProgram name="brokenbar">
/* VTTTalk Unicode 0xa6 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(4)	/* min */
YAnchor(1)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="bullet">
/* VTTTalk Unicode 0x2022 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(8)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="c">
/* VTTTalk Unicode 0x63 (c) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 11 */
/* CVT 10 7 */
/* Min and Max */
ResYAnchor(0,11)	/* min, CVT */
ResYAnchor(10,7)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(10,18) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,28) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="caron">
/* VTTTalk Unicode 0x2c7 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(2)	/* max */

/* Extreme Max */
YShift(2,4)

Smooth()


    </glyphProgram>

    <glyphProgram name="caron.case">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(2)	/* min */
YAnchor(0)	/* max */

/* Extreme Max */
YShift(0,5)

Smooth()

    </glyphProgram>

    <glyphProgram name="cedilla">
/* VTTTalk Unicode 0xb8 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(16)	/* max */

/* YDir: Stroke #0 */
ResYDist(16,15) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,7) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="cent">
/* VTTTalk Unicode 0xa2 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 3 4 */
/* Min and Max */
YAnchor(0)	/* min */
ResYAnchor(3,4)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
YInterpolate(3,4,0)
YAnchor(4)
ResYDist(4,32) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="circle">
/* VTTTalk Unicode 0x25cb */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(10)	/* max */

/* YDir: Stroke #0 */
ResYDist(10,30) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,20) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="circleplus">
/* VTTTalk Unicode 0x2295 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(10)	/* max */

/* YDir: Stroke #0 */
ResYDist(10,30) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(10,42,0)
YAnchor(42)
ResYDist(42,43) /*perpendicular to the stroke*/
YShift(42,50) /*along bottom edge*/
YShift(43,47) /*along top edge*/

/* YDir: Stroke #2 */
ResYDist(0,20) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="circumflex">
/* VTTTalk Unicode 0x2c6 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(2)	/* min */
YAnchor(4)	/* max */

/* Extreme Min */
YShift(2,0)

Smooth()


    </glyphProgram>

    <glyphProgram name="club">
/* VTTTalk Unicode 0x2663 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 2 18  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(1)	/* min */
YAnchor(36)	/* max */

/* Contour #2 */
YShift(36,43) /* max */
YShift(1,48) /* min */

/* Extreme Min */
YShift(1,3)

/* Extreme Min */
YShift(1,47)

Smooth()


    </glyphProgram>

    <glyphProgram name="colon">
/* VTTTalk Unicode 0x3a (:) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 16 19 */
/* Min and Max */
ResYAnchor(16,19)	/* min, CVT */
YAnchor(8)	/* max */

/* CVTs - beginning */
/* CVTs - end */


Smooth()


    </glyphProgram>

    <glyphProgram name="colonmonetary">
/* VTTTalk Unicode 0x20a1 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 8 13 */
/* CVT 19 5 */
/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

/* CVTs - beginning */
ResYAnchor(8,13)  /*knot, CVT*/
ResYAnchor(19,5)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(8,36) /*perpendicular to the stroke*/

/* Contour #1 */
YShift(1,5) /* max */
YShift(0,4) /* min */

Smooth()


    </glyphProgram>

    <glyphProgram name="comma">
/* VTTTalk Unicode 0x2c (,) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(13)	/* max */

Smooth()

    </glyphProgram>

    <glyphProgram name="copyright">
/* VTTTalk Unicode 0xa9 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(40)	/* min */
YAnchor(50)	/* max */

/* YDir: Stroke #0 */
ResYDist(50,71) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(50,10,40)
YAnchor(10)
ResYDist(10,22) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
YInterpolate(50,0,40)
YAnchor(0)
ResYDist(0,32) /*perpendicular to the stroke*/

/* YDir: Stroke #3 */
ResYDist(40,61) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="currency">
/* VTTTalk Unicode 0xa4 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(10)	/* max */

/* YDir: Stroke #0 */
YInterpolate(10,14,0)
YAnchor(14)
ResYDist(14,44) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(10,32,0)
YAnchor(32)
ResYDist(32,36) /*perpendicular to the stroke*/

/* Extreme Max */
YShift(10,18)

/* Extreme Min */
YShift(0,28)

Smooth()


    </glyphProgram>

    <glyphProgram name="d">
/* VTTTalk Unicode 0x64 (d) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 11 */
/* CVT 11 7 */
/* CVT 17 0 */
/* CVT 22 10 */
/* Min and Max */
ResYAnchor(0,11)	/* min, CVT */
ResYAnchor(17,0)	/* max, CVT */

/* CVTs - beginning */
ResYAnchor(11,7)  /*knot, CVT*/
ResYAnchor(22,10)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(11,41) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,31) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="dagger">
/* VTTTalk Unicode 0x2020 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(5)	/* max */

/* YDir: Stroke #0 */
YInterpolate(5,3,0)
YAnchor(3)
ResYDist(3,2) /*perpendicular to the stroke*/
YShift(2,10) /*along bottom edge*/
YShift(3,7) /*along top edge*/

Smooth()


    </glyphProgram>

    <glyphProgram name="daggerdbl">
/* VTTTalk Unicode 0x2021 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(9)	/* max */

/* YDir: Stroke #0 */
YInterpolate(9,7,0)
YAnchor(7)
ResYDist(7,6) /*perpendicular to the stroke*/
YShift(6,14) /*along bottom edge*/
YShift(7,11) /*along top edge*/

/* YDir: Stroke #1 */
YInterpolate(9,2,0)
YAnchor(2)
ResYDist(2,3) /*perpendicular to the stroke*/
YShift(2,18) /*along bottom edge*/
YShift(3,15) /*along top edge*/

Smooth()


    </glyphProgram>

    <glyphProgram name="dcaron">
/* VTTTalk Unicode 0x10f */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 11 */
/* CVT 16 0 */
/* CVT 21 10 */
/* CVT 54 7 */
/* Min and Max */
ResYAnchor(0,11)	/* min, CVT */
ResYAnchor(16,0)	/* max, CVT */

/* CVTs - beginning */
ResYAnchor(21,10)  /*knot, CVT*/
ResYAnchor(54,7)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
YInterpolate(16,10,0)
YAnchor(10)
ResYDist(10,37) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,29) /*perpendicular to the stroke*/

/* Extreme Max */
YShift(16,47)

Smooth()

    </glyphProgram>

    <glyphProgram name="degree">
/* VTTTalk Unicode 0xb0 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 9 17 */
/* Min and Max */
YAnchor(0)	/* min */
ResYAnchor(9,17)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(9,27) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,19) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="diamond">
/* VTTTalk Unicode 0x2666 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 5 18  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(4)	/* min */
YAnchor(0)	/* max */

Smooth()

    </glyphProgram>

    <glyphProgram name="dieresis">
/* VTTTalk Unicode 0xa8 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(6)	/* max */

/* Contour #1 */
YShift(6,18) /* max */
YShift(0,12) /* min */

Smooth()


    </glyphProgram>

    <glyphProgram name="dieresis.case">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(6)	/* max */

/* Contour #1 */
YShift(6,18) /* max */
YShift(0,12) /* min */

Smooth()


    </glyphProgram>

    <glyphProgram name="divide">
/* VTTTalk Unicode 0xf7 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(16)	/* min */
YAnchor(10)	/* max */

/* YDir: Stroke #0 */
YInterpolate(10,0,16)
YAnchor(0)
ResYDist(0,1) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="dkshade">
/* VTTTalk Unicode 0x2593 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 94 19  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(0)	/* min */
YAnchor(27)	/* max */

/* YDir: Stroke #0 */
YInterpolate(27,33,0)
YAnchor(33)
ResYDist(33,166) /*perpendicular to the stroke*/
YShift(166,162) /*along bottom edge*/
YShift(166,38) /*along bottom edge*/
YShift(33,25) /*along top edge*/
YShift(33,29) /*along top edge*/

/* YDir: Stroke #1 */
YInterpolate(27,167,0)
YAnchor(167)
ResYDist(167,158) /*perpendicular to the stroke*/
YShift(158,24) /*along bottom edge*/
YShift(158,154) /*along bottom edge*/
YShift(167,163) /*along top edge*/
YShift(167,39) /*along top edge*/

/* YDir: Stroke #2 */
YInterpolate(27,159,0)
YAnchor(159)
ResYDist(159,150) /*perpendicular to the stroke*/
YShift(150,146) /*along bottom edge*/
YShift(150,42) /*along bottom edge*/
YShift(159,21) /*along top edge*/
YShift(159,155) /*along top edge*/

/* YDir: Stroke #3 */
YInterpolate(27,151,0)
YAnchor(151)
ResYDist(151,142) /*perpendicular to the stroke*/
YShift(142,20) /*along bottom edge*/
YShift(142,138) /*along bottom edge*/
YShift(151,147) /*along top edge*/
YShift(151,43) /*along top edge*/

/* YDir: Stroke #4 */
YInterpolate(27,143,0)
YAnchor(143)
ResYDist(143,134) /*perpendicular to the stroke*/
YShift(134,130) /*along bottom edge*/
YShift(134,46) /*along bottom edge*/
YShift(143,17) /*along top edge*/
YShift(143,139) /*along top edge*/

/* YDir: Stroke #5 */
YInterpolate(27,135,0)
YAnchor(135)
ResYDist(135,126) /*perpendicular to the stroke*/
YShift(126,16) /*along bottom edge*/
YShift(126,122) /*along bottom edge*/
YShift(135,131) /*along top edge*/
YShift(135,47) /*along top edge*/

/* YDir: Stroke #6 */
YInterpolate(27,118,0)
YAnchor(118)
ResYDist(118,127) /*perpendicular to the stroke*/
YShift(118,114) /*along bottom edge*/
YShift(118,50) /*along bottom edge*/
YShift(127,13) /*along top edge*/
YShift(127,123) /*along top edge*/

/* YDir: Stroke #7 */
YInterpolate(27,110,0)
YAnchor(110)
ResYDist(110,119) /*perpendicular to the stroke*/
YShift(110,12) /*along bottom edge*/
YShift(110,106) /*along bottom edge*/
YShift(119,115) /*along top edge*/
YShift(119,51) /*along top edge*/

/* YDir: Stroke #8 */
YInterpolate(27,102,0)
YAnchor(102)
ResYDist(102,111) /*perpendicular to the stroke*/
YShift(102,98) /*along bottom edge*/
YShift(102,54) /*along bottom edge*/
YShift(111,9) /*along top edge*/
YShift(111,107) /*along top edge*/

/* YDir: Stroke #9 */
YInterpolate(27,94,0)
YAnchor(94)
ResYDist(94,103) /*perpendicular to the stroke*/
YShift(94,8) /*along bottom edge*/
YShift(94,90) /*along bottom edge*/
YShift(103,99) /*along top edge*/
YShift(103,55) /*along top edge*/

/* YDir: Stroke #10 */
YInterpolate(27,86,0)
YAnchor(86)
ResYDist(86,95) /*perpendicular to the stroke*/
YShift(86,82) /*along bottom edge*/
YShift(86,58) /*along bottom edge*/
YShift(95,5) /*along top edge*/
YShift(95,91) /*along top edge*/

/* YDir: Stroke #11 */
YInterpolate(27,78,0)
YAnchor(78)
ResYDist(78,87) /*perpendicular to the stroke*/
YShift(78,4) /*along bottom edge*/
YShift(78,74) /*along bottom edge*/
YShift(87,83) /*along top edge*/
YShift(87,59) /*along top edge*/

/* YDir: Stroke #12 */
YInterpolate(27,66,0)
YAnchor(66)
ResYDist(66,79) /*perpendicular to the stroke*/
YShift(66,70) /*along bottom edge*/
YShift(66,62) /*along bottom edge*/
YShift(79,1) /*along top edge*/
YShift(79,75) /*along top edge*/

/* Extreme Max */
YShift(27,36)

/* Extreme Max */
YShift(27,32)

/* Extreme Min */
YShift(0,68)

/* Extreme Min */
YShift(0,64)

Smooth()


    </glyphProgram>

    <glyphProgram name="dnblock">
/* VTTTalk Unicode 0x2584 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="dollar">
/* VTTTalk Unicode 0x24 ($) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(24)	/* max */

/* Contour #1 */
YShift(24,64) /* max */
YShift(0,56) /* min */

/* Contour #2 */
YShift(24,66) /* max */
YShift(0,65) /* min */

/* Extreme Max */
YShift(24,28)

Smooth()


    </glyphProgram>

    <glyphProgram name="dong">
/* VTTTalk Unicode 0x20ab */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 12 */
/* Min and Max */
ResYAnchor(0,12)	/* min, CVT */
YAnchor(19)	/* max */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
YInterpolate(19,52,0)
YAnchor(52)
ResYDist(52,51) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(19,14,0)
YAnchor(14)
ResYDist(14,42) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
YInterpolate(19,4,0)
YAnchor(4)
ResYDist(4,33) /*perpendicular to the stroke*/

/* YDir: Stroke #3 */
ResYDist(0,1) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="dotaccent">
/* VTTTalk Unicode 0x2d9 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(6)	/* max */

Smooth()

    </glyphProgram>

    <glyphProgram name="dotlessi">
/* VTTTalk Unicode 0x131 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 10 */
/* CVT 5 6 */
/* Min and Max */
ResYAnchor(0,10)	/* min, CVT */
ResYAnchor(5,6)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(5,4) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,1) /*perpendicular to the stroke*/
YShift(1,7) /*along top edge*/

Smooth()


    </glyphProgram>

    <glyphProgram name="e">
/* VTTTalk Unicode 0x65 (e) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 11 */
/* CVT 10 7 */
/* Min and Max */
ResYAnchor(0,11)	/* min, CVT */
ResYAnchor(10,7)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(10,40) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(10,19,0)
YAnchor(19)
ResYDist(19,34) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(0,24) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="eight">
/* VTTTalk Unicode 0x38 (8) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 13 */
/* CVT 18 5 */
/* Min and Max */
ResYAnchor(0,13)	/* min, CVT */
ResYAnchor(18,5)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(18,64) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,36) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="element">
/* VTTTalk Unicode 0x2208 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 18  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(0)	/* min */
YAnchor(8)	/* max */

/* YDir: Stroke #0 */
ResYDist(8,11) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(8,22,0)
YAnchor(22)
ResYDist(22,23) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(0,19) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="ellipsis">
/* VTTTalk Unicode 0x2026 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 19 */
/* Min and Max */
ResYAnchor(0,19)	/* min, CVT */
YAnchor(8)	/* max */

/* CVTs - beginning */
/* CVTs - end */


/* Contour #1 */
YShift(8,24) /* max */
YShift(0,16) /* min */

/* Contour #2 */
YShift(8,40) /* max */
YShift(0,32) /* min */

Smooth()


    </glyphProgram>

    <glyphProgram name="emdash">
/* VTTTalk Unicode 0x2014 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

/* YDir: Stroke #0 */

Smooth()

    </glyphProgram>

    <glyphProgram name="emptyset">
/* VTTTalk Unicode 0x2205 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(2)	/* max */

/* YDir: Stroke #0 */
YInterpolate(2,14,0)
YAnchor(14)
ResYDist(14,34) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(2,4,0)
YAnchor(4)
ResYDist(4,24) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="endash">
/* VTTTalk Unicode 0x2013 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

/* YDir: Stroke #0 */

Smooth()

    </glyphProgram>

    <glyphProgram name="eng">
/* VTTTalk Unicode 0x14b */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 15 */
/* CVT 28 10 */
/* CVT 29 6 */
/* CVT 36 7 */
/* Min and Max */
ResYAnchor(0,15)	/* min, CVT */
ResYAnchor(36,7)	/* max, CVT */

/* CVTs - beginning */
ResYAnchor(28,10)  /*knot, CVT*/
ResYAnchor(29,6)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(36,20) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,10) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="equal">
/* VTTTalk Unicode 0x3d (=) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(4)	/* min */
YAnchor(1)	/* max */

/* YDir: Stroke #0 */
ResYDist(1,0) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(4,5) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="equal_equal_equal.dlig">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(8)	/* min */
YAnchor(1)	/* max */

/* YDir: Stroke #0 */
ResYDist(1,0) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(1,4,8)
YAnchor(4)
ResYDist(4,5) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(8,9) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="equal_greater.dlig">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 16  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(3)	/* min */
YAnchor(0)	/* max */

/* YDir: Stroke #0 */
YInterpolate(0,21,3)
YAnchor(21)
ResYDist(21,20) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(0,16,3)
YAnchor(16)
ResYDist(16,17) /*perpendicular to the stroke*/

/* Contour #1 */
YShift(21,7) /* max */
YShift(3,10) /* min */

/* Contour #2 */
YShift(0,11) /* max */
YShift(16,13) /* min */

Smooth()


    </glyphProgram>

    <glyphProgram name="estimated">
/* VTTTalk Unicode 0x212e */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 19 */
/* Min and Max */
ResYAnchor(0,19)	/* min, CVT */
YAnchor(9)	/* max */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(9,30) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(9,14,0)
YAnchor(14)
ResYDist(14,34) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(0,18) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="eth">
/* VTTTalk Unicode 0xf0 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 11 */
/* CVT 10 7 */
/* CVT 26 1 */
/* Min and Max */
ResYAnchor(0,11)	/* min, CVT */
ResYAnchor(26,1)	/* max, CVT */

/* CVTs - beginning */
ResYAnchor(10,7)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(10,54) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,43) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="exclam">
/* VTTTalk Unicode 0x21 (!) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 11 19 */
/* Min and Max */
ResYAnchor(11,19)	/* min, CVT */
YAnchor(5)	/* max */

/* CVTs - beginning */
/* CVTs - end */


Smooth()


    </glyphProgram>

    <glyphProgram name="exclam_equal_equal.dlig">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(2)	/* max */

/* YDir: Stroke #0 */
YInterpolate(2,5,0)
YAnchor(5)
ResYDist(5,4) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(2,8,0)
YAnchor(8)
ResYDist(8,9) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
YInterpolate(2,12,0)
YAnchor(12)
ResYDist(12,13) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="exclamdown">
/* VTTTalk Unicode 0xa1 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 2 18 */
/* CVT 10 19 */
/* Min and Max */
YAnchor(6)	/* min */
YAnchor(11)	/* max */

/* CVTs - beginning */
ResYAnchor(2,18)  /*knot, CVT*/
ResYAnchor(10,19)  /*knot, CVT*/
/* CVTs - end */


Smooth()

    </glyphProgram>

    <glyphProgram name="f">
/* VTTTalk Unicode 0x66 (f) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 10 */
/* CVT 9 1 */
/* CVT 22 6 */
/* Min and Max */
ResYAnchor(0,10)	/* min, CVT */
ResYAnchor(9,1)	/* max, CVT */

/* CVTs - beginning */
ResYAnchor(22,6)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(9,17) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(22,25) /*perpendicular to the stroke*/
YShift(25,2) /*along bottom edge*/
YShift(22,3) /*along top edge*/

Smooth()


    </glyphProgram>

    <glyphProgram name="five">
/* VTTTalk Unicode 0x35 (5) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 13 */
/* CVT 25 4 */
/* Min and Max */
ResYAnchor(0,13)	/* min, CVT */
ResYAnchor(25,4)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(25,28) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(25,33,0)
YAnchor(33)
ResYDist(33,18) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(0,8) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="florin">
/* VTTTalk Unicode 0x192 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 15 */
/* CVT 23 1 */
/* Min and Max */
ResYAnchor(0,15)	/* min, CVT */
ResYAnchor(23,1)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(23,35) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(23,17,0)
YAnchor(17)
ResYDist(17,16) /*perpendicular to the stroke*/
YShift(16,43) /*along bottom edge*/
YShift(17,40) /*along top edge*/

/* YDir: Stroke #2 */
ResYDist(0,9) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="four">
/* VTTTalk Unicode 0x34 (4) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 4 4 */
/* CVT 10 12 */
/* Min and Max */
ResYAnchor(10,12)	/* min, CVT */
ResYAnchor(4,4)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
YInterpolate(4,9,10)
YAnchor(9)
ResYDist(9,6) /*perpendicular to the stroke*/
YShift(9,2) /*along bottom edge*/
YShift(6,11) /*along top edge*/

Smooth()

    </glyphProgram>

    <glyphProgram name="fraction">
/* VTTTalk Unicode 0x2044 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 1 19 */
/* CVT 3 17 */
/* Min and Max */
ResYAnchor(1,19)	/* min, CVT */
ResYAnchor(3,17)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* Extreme Max */
YShift(3,2)

Smooth()

    </glyphProgram>

    <glyphProgram name="g">
/* VTTTalk Unicode 0x67 (g) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 15 */
/* CVT 92 7 */
/* Min and Max */
ResYAnchor(0,15)	/* min, CVT */
ResYAnchor(92,7)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
YInterpolate(92,64,0)
YAnchor(64)
ResYDist(64,80) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(92,93) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
YInterpolate(92,72,0)
YAnchor(72)
ResYDist(72,56) /*perpendicular to the stroke*/

/* YDir: Stroke #3 */
ResYDist(0,19) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="germandbls">
/* VTTTalk Unicode 0xdf */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 11 */
/* CVT 37 10 */
/* CVT 42 1 */
/* Min and Max */
ResYAnchor(0,11)	/* min, CVT */
ResYAnchor(42,1)	/* max, CVT */

/* CVTs - beginning */
ResYAnchor(37,10)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(42,31) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(42,18,0)
YAnchor(18)
ResYDist(18,19) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(0,7) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="grave">
/* VTTTalk Unicode 0x60 (`) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(2)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="grave.case">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(2)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="greater">
/* VTTTalk Unicode 0x3e (&gt;) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(4)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="greater_equal.dlig">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(7)	/* min */
YAnchor(4)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="greaterequal">
/* VTTTalk Unicode 0x2265 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(8)	/* min */
YAnchor(4)	/* max */

/* YDir: Stroke #0 */
ResYDist(8,9) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="guillemotleft">
/* VTTTalk Unicode 0xab */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(3)	/* max */

/* Contour #1 */
YShift(3,10) /* max */
YShift(0,7) /* min */

Smooth()

    </glyphProgram>

    <glyphProgram name="guillemotright">
/* VTTTalk Unicode 0xbb */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(4)	/* max */

/* Contour #1 */
YShift(4,11) /* max */
YShift(0,7) /* min */

Smooth()

    </glyphProgram>

    <glyphProgram name="guilsinglleft">
/* VTTTalk Unicode 0x2039 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(3)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="guilsinglright">
/* VTTTalk Unicode 0x203a */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(4)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="h">
/* VTTTalk Unicode 0x68 (h) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 10 */
/* CVT 1 0 */
/* CVT 7 7 */
/* Min and Max */
ResYAnchor(0,10)	/* min, CVT */
ResYAnchor(1,0)	/* max, CVT */

/* CVTs - beginning */
ResYAnchor(7,7)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(7,18) /*perpendicular to the stroke*/

/* Extreme Min */
YShift(0,13)

Smooth()


    </glyphProgram>

    <glyphProgram name="heart">
/* VTTTalk Unicode 0x2665 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 13 18 */
/* Min and Max */
ResYAnchor(13,18)	/* min, CVT */
YAnchor(0)	/* max */

/* CVTs - beginning */
/* CVTs - end */


/* Extreme Max */
YShift(0,25)

Smooth()


    </glyphProgram>

    <glyphProgram name="hookabovecomb">
/* VTTTalk Unicode 0x309 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(7)	/* min */
YAnchor(24)	/* max */

/* YDir: Stroke #0 */
ResYDist(24,17) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="house">
/* VTTTalk Unicode 0x2302 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 2 18  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(2)	/* min */
YAnchor(4)	/* max */

/* YDir: Stroke #0 */
ResYDist(2,6) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="hungarumlaut">
/* VTTTalk Unicode 0x2dd */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(2)	/* max */

/* Contour #1 */
YShift(2,6) /* max */
YShift(0,4) /* min */

Smooth()

    </glyphProgram>

    <glyphProgram name="hungarumlaut.case">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(2)	/* max */

/* Contour #1 */
YShift(2,6) /* max */
YShift(0,4) /* min */

Smooth()


    </glyphProgram>

    <glyphProgram name="hyphen">
/* VTTTalk Unicode 0x2d (-) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

/* YDir: Stroke #0 */

Smooth()

    </glyphProgram>

    <glyphProgram name="hyphen_greater.dlig">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 4 16  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(0)	/* min */
YAnchor(4)	/* max */

/* YDir: Stroke #0 */
YInterpolate(4,7,0)
YAnchor(7)
ResYDist(7,8) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="infinity">
/* VTTTalk Unicode 0x221e */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(4)	/* min */
YAnchor(18)	/* max */

/* YDir: Stroke #0 */
ResYDist(18,32) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(18,24,4)
YAnchor(24)
ResYDist(24,48) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
YInterpolate(18,10,4)
YAnchor(10)
ResYDist(10,40) /*perpendicular to the stroke*/

/* YDir: Stroke #3 */
ResYDist(4,56) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="integral">
/* VTTTalk Unicode 0x222b */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(16)	/* max */

/* YDir: Stroke #0 */
ResYDist(16,23) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,7) /*perpendicular to the stroke*/

/* Extreme Max */
YShift(16,19)

/* Extreme Min */
YShift(0,3)

Smooth()

    </glyphProgram>

    <glyphProgram name="invsmileface">
/* VTTTalk Unicode 0x263b */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(10)	/* max */

/* YDir: Stroke #0 */
ResYDist(10,42) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,20) /*perpendicular to the stroke*/

/* Contour #3 */
YShift(10,54) /* max */
YShift(0,48) /* min */

Smooth()

    </glyphProgram>

    <glyphProgram name="k">
/* VTTTalk Unicode 0x6b (k) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 4 10 */
/* CVT 5 0 */
/* CVT 14 6 */
/* Min and Max */
ResYAnchor(4,10)	/* min, CVT */
ResYAnchor(5,0)	/* max, CVT */

/* CVTs - beginning */
ResYAnchor(14,6)  /*knot, CVT*/
/* CVTs - end */


/* Extreme Min */
YShift(4,16)

Smooth()


    </glyphProgram>

    <glyphProgram name="kgreenlandic">
/* VTTTalk Unicode 0x138 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 4 10 */
/* CVT 5 6 */
/* Min and Max */
ResYAnchor(4,10)	/* min, CVT */
ResYAnchor(5,6)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* Extreme Max */
YShift(5,8)

/* Extreme Max */
YShift(5,14)

/* Extreme Min */
YShift(4,16)

Smooth()


    </glyphProgram>

    <glyphProgram name="l">
/* VTTTalk Unicode 0x6c (l) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 10 */
/* CVT 5 0 */
/* Min and Max */
ResYAnchor(0,10)	/* min, CVT */
ResYAnchor(5,0)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(5,4) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,1) /*perpendicular to the stroke*/
YShift(1,7) /*along top edge*/

Smooth()

    </glyphProgram>

    <glyphProgram name="ldot">
/* VTTTalk Unicode 0x140 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 10 */
/* CVT 5 0 */
/* Min and Max */
ResYAnchor(0,10)	/* min, CVT */
ResYAnchor(5,0)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(5,4) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,1) /*perpendicular to the stroke*/
YShift(1,7) /*along top edge*/

/* Contour #1 */
YShift(5,18) /* max */
YShift(0,10) /* min */

Smooth()


    </glyphProgram>

    <glyphProgram name="less">
/* VTTTalk Unicode 0x3c (&lt;) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(3)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="less_equal.dlig">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(7)	/* min */
YAnchor(3)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="less_hyphen.dlig">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 3 16  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(0)	/* min */
YAnchor(3)	/* max */

/* YDir: Stroke #0 */
YInterpolate(3,8,0)
YAnchor(8)
ResYDist(8,9) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="lessequal">
/* VTTTalk Unicode 0x2264 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(7)	/* min */
YAnchor(3)	/* max */

/* YDir: Stroke #0 */
ResYDist(7,8) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="lfblock">
/* VTTTalk Unicode 0x258c */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="logicalnot">
/* VTTTalk Unicode 0xac */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(3)	/* max */

/* YDir: Stroke #0 */
ResYDist(3,2) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="lozenge">
/* VTTTalk Unicode 0x25ca */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 18 */
/* CVT 2 17 */
/* Min and Max */
ResYAnchor(0,18)	/* min, CVT */
ResYAnchor(2,17)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* Contour #1 */
YShift(2,8) /* max */
YShift(0,6) /* min */

Smooth()


    </glyphProgram>

    <glyphProgram name="lslash">
/* VTTTalk Unicode 0x142 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 10 */
/* CVT 9 0 */
/* Min and Max */
ResYAnchor(0,10)	/* min, CVT */
ResYAnchor(9,0)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(9,8) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,1) /*perpendicular to the stroke*/
YShift(1,15) /*along top edge*/

Smooth()

    </glyphProgram>

    <glyphProgram name="ltshade">
/* VTTTalk Unicode 0x2591 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(157)	/* max */

/* YDir: Stroke #0 */
YInterpolate(157,165,0)
YAnchor(165)
ResYDist(165,164) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(157,161,0)
YAnchor(161)
ResYDist(161,160) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(157,156) /*perpendicular to the stroke*/

/* YDir: Stroke #3 */
YInterpolate(157,153,0)
YAnchor(153)
ResYDist(153,152) /*perpendicular to the stroke*/

/* YDir: Stroke #4 */
YInterpolate(157,149,0)
YAnchor(149)
ResYDist(149,148) /*perpendicular to the stroke*/

/* YDir: Stroke #5 */
YInterpolate(157,145,0)
YAnchor(145)
ResYDist(145,144) /*perpendicular to the stroke*/

/* YDir: Stroke #6 */
YInterpolate(157,141,0)
YAnchor(141)
ResYDist(141,140) /*perpendicular to the stroke*/

/* YDir: Stroke #7 */
YInterpolate(157,137,0)
YAnchor(137)
ResYDist(137,136) /*perpendicular to the stroke*/

/* YDir: Stroke #8 */
YInterpolate(157,133,0)
YAnchor(133)
ResYDist(133,132) /*perpendicular to the stroke*/

/* YDir: Stroke #9 */
YInterpolate(157,129,0)
YAnchor(129)
ResYDist(129,128) /*perpendicular to the stroke*/

/* YDir: Stroke #10 */
YInterpolate(157,125,0)
YAnchor(125)
ResYDist(125,124) /*perpendicular to the stroke*/

/* YDir: Stroke #11 */
YInterpolate(157,121,0)
YAnchor(121)
ResYDist(121,120) /*perpendicular to the stroke*/

/* YDir: Stroke #12 */
YInterpolate(157,117,0)
YAnchor(117)
ResYDist(117,116) /*perpendicular to the stroke*/

/* YDir: Stroke #13 */
YInterpolate(157,113,0)
YAnchor(113)
ResYDist(113,112) /*perpendicular to the stroke*/

/* YDir: Stroke #14 */
YInterpolate(157,109,0)
YAnchor(109)
ResYDist(109,108) /*perpendicular to the stroke*/

/* YDir: Stroke #15 */
YInterpolate(157,105,0)
YAnchor(105)
ResYDist(105,104) /*perpendicular to the stroke*/

/* YDir: Stroke #16 */
YInterpolate(157,101,0)
YAnchor(101)
ResYDist(101,100) /*perpendicular to the stroke*/

/* YDir: Stroke #17 */
YInterpolate(157,97,0)
YAnchor(97)
ResYDist(97,96) /*perpendicular to the stroke*/

/* YDir: Stroke #18 */
YInterpolate(157,93,0)
YAnchor(93)
ResYDist(93,92) /*perpendicular to the stroke*/

/* YDir: Stroke #19 */
YInterpolate(157,89,0)
YAnchor(89)
ResYDist(89,88) /*perpendicular to the stroke*/

/* YDir: Stroke #20 */
YInterpolate(157,85,0)
YAnchor(85)
ResYDist(85,84) /*perpendicular to the stroke*/

/* YDir: Stroke #21 */
YInterpolate(157,80,0)
YAnchor(80)
ResYDist(80,81) /*perpendicular to the stroke*/

/* YDir: Stroke #22 */
YInterpolate(157,76,0)
YAnchor(76)
ResYDist(76,77) /*perpendicular to the stroke*/

/* YDir: Stroke #23 */
YInterpolate(157,72,0)
YAnchor(72)
ResYDist(72,73) /*perpendicular to the stroke*/

/* YDir: Stroke #24 */
YInterpolate(157,68,0)
YAnchor(68)
ResYDist(68,69) /*perpendicular to the stroke*/

/* YDir: Stroke #25 */
YInterpolate(157,64,0)
YAnchor(64)
ResYDist(64,65) /*perpendicular to the stroke*/

/* YDir: Stroke #26 */
YInterpolate(157,60,0)
YAnchor(60)
ResYDist(60,61) /*perpendicular to the stroke*/

/* YDir: Stroke #27 */
YInterpolate(157,56,0)
YAnchor(56)
ResYDist(56,57) /*perpendicular to the stroke*/

/* YDir: Stroke #28 */
YInterpolate(157,52,0)
YAnchor(52)
ResYDist(52,53) /*perpendicular to the stroke*/

/* YDir: Stroke #29 */
YInterpolate(157,48,0)
YAnchor(48)
ResYDist(48,49) /*perpendicular to the stroke*/

/* YDir: Stroke #30 */
YInterpolate(157,44,0)
YAnchor(44)
ResYDist(44,45) /*perpendicular to the stroke*/

/* YDir: Stroke #31 */
YInterpolate(157,40,0)
YAnchor(40)
ResYDist(40,41) /*perpendicular to the stroke*/

/* YDir: Stroke #32 */
YInterpolate(157,36,0)
YAnchor(36)
ResYDist(36,37) /*perpendicular to the stroke*/

/* YDir: Stroke #33 */
YInterpolate(157,32,0)
YAnchor(32)
ResYDist(32,33) /*perpendicular to the stroke*/

/* YDir: Stroke #34 */
YInterpolate(157,28,0)
YAnchor(28)
ResYDist(28,29) /*perpendicular to the stroke*/

/* YDir: Stroke #35 */
YInterpolate(157,24,0)
YAnchor(24)
ResYDist(24,25) /*perpendicular to the stroke*/

/* YDir: Stroke #36 */
YInterpolate(157,20,0)
YAnchor(20)
ResYDist(20,21) /*perpendicular to the stroke*/

/* YDir: Stroke #37 */
YInterpolate(157,16,0)
YAnchor(16)
ResYDist(16,17) /*perpendicular to the stroke*/

/* YDir: Stroke #38 */
YInterpolate(157,12,0)
YAnchor(12)
ResYDist(12,13) /*perpendicular to the stroke*/

/* YDir: Stroke #39 */
YInterpolate(157,8,0)
YAnchor(8)
ResYDist(8,9) /*perpendicular to the stroke*/

/* YDir: Stroke #40 */
YInterpolate(157,4,0)
YAnchor(4)
ResYDist(4,5) /*perpendicular to the stroke*/

/* YDir: Stroke #41 */
ResYDist(0,1) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="m">
/* VTTTalk Unicode 0x6d (m) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 10 */
/* CVT 1 6 */
/* CVT 7 7 */
/* Min and Max */
ResYAnchor(0,10)	/* min, CVT */
ResYAnchor(7,7)	/* max, CVT */

/* CVTs - beginning */
ResYAnchor(1,6)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
YShift(7,15) /*stroke, CVT of another stroke*/
ResYDist(15,28) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(7,39) /*perpendicular to the stroke*/

/* Extreme Min */
YShift(0,34)

/* Extreme Min */
YShift(0,23)

Smooth()


    </glyphProgram>

    <glyphProgram name="macron">
/* VTTTalk Unicode 0xaf */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 1 16 */
/* Min and Max */
YAnchor(0)	/* min */
ResYAnchor(1,16)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */

Smooth()

    </glyphProgram>

    <glyphProgram name="minus">
/* VTTTalk Unicode 0x2212 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

/* YDir: Stroke #0 */

Smooth()

    </glyphProgram>

    <glyphProgram name="minute">
/* VTTTalk Unicode 0x2032 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(2)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="multiply">
/* VTTTalk Unicode 0xd7 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(6)	/* max */

/* Extreme Max */
YShift(6,8)

/* Extreme Min */
YShift(0,2)

Smooth()


    </glyphProgram>

    <glyphProgram name="n">
/* VTTTalk Unicode 0x6e (n) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 10 */
/* CVT 1 6 */
/* CVT 7 7 */
/* Min and Max */
ResYAnchor(0,10)	/* min, CVT */
ResYAnchor(7,7)	/* max, CVT */

/* CVTs - beginning */
ResYAnchor(1,6)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(7,18) /*perpendicular to the stroke*/

/* Extreme Min */
YShift(0,13)

Smooth()


    </glyphProgram>

    <glyphProgram name="nine">
/* VTTTalk Unicode 0x39 (9) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 13 */
/* CVT 47 5 */
/* Min and Max */
ResYAnchor(0,13)	/* min, CVT */
ResYAnchor(47,5)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(47,18) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(47,37,0)
YAnchor(37)
ResYDist(37,28) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(0,8) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="notequal">
/* VTTTalk Unicode 0x2260 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(2)	/* min */
YAnchor(0)	/* max */

/* YDir: Stroke #0 */
YInterpolate(0,5,2)
YAnchor(5)
ResYDist(5,4) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(0,8,2)
YAnchor(8)
ResYDist(8,9) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="numbersign">
/* VTTTalk Unicode 0x23 (#) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 13 16 */
/* Min and Max */
YAnchor(0)	/* min */
ResYAnchor(13,16)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
YInterpolate(13,11,0)
YAnchor(11)
ResYDist(11,31) /*perpendicular to the stroke*/
YShift(31,10) /*along bottom edge*/
YShift(31,22) /*along bottom edge*/
YShift(11,15) /*along top edge*/
YShift(11,19) /*along top edge*/

/* YDir: Stroke #1 */
YInterpolate(13,26,0)
YAnchor(26)
ResYDist(26,23) /*perpendicular to the stroke*/
YShift(26,6) /*along bottom edge*/
YShift(26,2) /*along bottom edge*/
YShift(23,7) /*along top edge*/
YShift(23,28) /*along top edge*/

/* Extreme Max */
YShift(13,18)

/* Extreme Min */
YShift(0,3)

Smooth()

    </glyphProgram>

    <glyphProgram name="o">
/* VTTTalk Unicode 0x6f (o) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 11 */
/* CVT 10 7 */
/* Min and Max */
ResYAnchor(0,11)	/* min, CVT */
ResYAnchor(10,7)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(10,29) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,20) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="oe">
/* VTTTalk Unicode 0x153 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 6 11 */
/* CVT 16 7 */
/* Min and Max */
ResYAnchor(6,11)	/* min, CVT */
ResYAnchor(16,7)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
YShift(16,23) /*stroke, CVT of another stroke*/
ResYDist(23,76) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(16,61) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
YInterpolate(16,29,6)
YAnchor(29)
ResYDist(29,71) /*perpendicular to the stroke*/

/* YDir: Stroke #3 */
YInterpolate(16,0,6)
YAnchor(0)
ResYDist(0,33) /*perpendicular to the stroke*/
YShift(33,40) /*along top edge*/

Smooth()

    </glyphProgram>

    <glyphProgram name="ogonek">
/* VTTTalk Unicode 0x2db */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(1)	/* min */
YAnchor(10)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="one">
/* VTTTalk Unicode 0x31 (1) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 4 4 */
/* CVT 6 12 */
/* Min and Max */
ResYAnchor(6,12)	/* min, CVT */
ResYAnchor(4,4)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


Smooth()


    </glyphProgram>

    <glyphProgram name="onehalf">
/* VTTTalk Unicode 0xbd */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 38 19 */
/* CVT 40 17 */
/* Min and Max */
YAnchor(7)	/* min */
YAnchor(4)	/* max */

/* CVTs - beginning */
ResYAnchor(38,19)  /*knot, CVT*/
ResYAnchor(40,17)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
YInterpolate(4,17,7)
YAnchor(17)
ResYDist(17,25) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(7,34) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="onequarter">
/* VTTTalk Unicode 0xbc */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 9 18 */
/* CVT 22 19 */
/* CVT 24 17 */
/* Min and Max */
YAnchor(7)	/* min */
YAnchor(4)	/* max */

/* CVTs - beginning */
ResYAnchor(9,18)  /*knot, CVT*/
ResYAnchor(22,19)  /*knot, CVT*/
ResYAnchor(24,17)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(9,18) /*perpendicular to the stroke*/
YShift(9,16) /*along bottom edge*/
YShift(18,13) /*along top edge*/

Smooth()


    </glyphProgram>

    <glyphProgram name="ordfeminine">
/* VTTTalk Unicode 0xaa */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 40 16 */
/* Min and Max */
YAnchor(56)	/* min */
ResYAnchor(40,16)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(40,33) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(40,7,56)
YAnchor(7)
ResYDist(7,16) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
YInterpolate(40,0,56)
YAnchor(0)
ResYDist(0,24) /*perpendicular to the stroke*/

/* YDir: Stroke #3 */
ResYDist(56,53) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="ordmasculine">
/* VTTTalk Unicode 0xba */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 8 16 */
/* Min and Max */
YAnchor(35)	/* min */
ResYAnchor(8,16)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(8,24) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(8,0,35)
YAnchor(0)
ResYDist(0,16) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(35,32) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="oslash">
/* VTTTalk Unicode 0xf8 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 4 11 */
/* CVT 14 7 */
/* Min and Max */
YAnchor(0)	/* min */
YAnchor(2)	/* max */

/* CVTs - beginning */
ResYAnchor(4,11)  /*knot, CVT*/
ResYAnchor(14,7)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(14,33) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(4,24) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="p">
/* VTTTalk Unicode 0x70 (p) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 14 */
/* CVT 1 6 */
/* CVT 7 7 */
/* CVT 17 11 */
/* Min and Max */
ResYAnchor(0,14)	/* min, CVT */
ResYAnchor(7,7)	/* max, CVT */

/* CVTs - beginning */
ResYAnchor(1,6)  /*knot, CVT*/
ResYAnchor(17,11)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(7,34) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(17,23) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="paragraph">
/* VTTTalk Unicode 0xb6 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(11)	/* max */

/* YDir: Stroke #0 */
ResYDist(11,16) /*perpendicular to the stroke*/

/* Extreme Min */
YShift(0,14)

Smooth()


    </glyphProgram>

    <glyphProgram name="parenleft">
/* VTTTalk Unicode 0x28 (() */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(8)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="parenright">
/* VTTTalk Unicode 0x29 ()) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(12)	/* max */

Smooth()

    </glyphProgram>

    <glyphProgram name="partialdiff">
/* VTTTalk Unicode 0x2202 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 19 */
/* Min and Max */
ResYAnchor(0,19)	/* min, CVT */
YAnchor(28)	/* max */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(28,21) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(28,9,0)
YAnchor(9)
ResYDist(9,49) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(0,38) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="percent">
/* VTTTalk Unicode 0x25 (%) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 18 */
/* CVT 2 16 */
/* CVT 4 19 */
/* CVT 45 17 */
/* Min and Max */
ResYAnchor(4,19)	/* min, CVT */
ResYAnchor(45,17)	/* max, CVT */

/* CVTs - beginning */
ResYAnchor(0,18)  /*knot, CVT*/
ResYAnchor(2,16)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(45,63) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(45,53,4)
YAnchor(53)
ResYDist(53,37) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
YInterpolate(45,28,4)
YAnchor(28)
ResYDist(28,12) /*perpendicular to the stroke*/

/* YDir: Stroke #3 */
ResYDist(4,20) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="period">
/* VTTTalk Unicode 0x2e (.) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 19 */
/* Min and Max */
ResYAnchor(0,19)	/* min, CVT */
YAnchor(8)	/* max */

/* CVTs - beginning */
/* CVTs - end */


Smooth()


    </glyphProgram>

    <glyphProgram name="periodcentered">
/* VTTTalk Unicode 0xb7 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(8)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="perthousand">
/* VTTTalk Unicode 0x2030 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 4 19 */
/* CVT 78 17 */
/* Min and Max */
ResYAnchor(4,19)	/* min, CVT */
ResYAnchor(78,17)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(78,95) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(78,86,4)
YAnchor(86)
ResYDist(86,70) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
YInterpolate(78,62,4)
YAnchor(62)
ResYDist(62,45) /*perpendicular to the stroke*/

/* YDir: Stroke #3 */
YInterpolate(78,29,4)
YAnchor(29)
ResYDist(29,12) /*perpendicular to the stroke*/

/* YDir: Stroke #4 */
YShift(4,37) /*stroke, CVT of another stroke*/
ResYDist(37,53) /*perpendicular to the stroke*/

/* YDir: Stroke #5 */
ResYDist(4,20) /*perpendicular to the stroke*/

/* Contour #0 */
YShift(78,2) /* max */
YShift(29,0) /* min */

Smooth()


    </glyphProgram>

    <glyphProgram name="peseta">
/* VTTTalk Unicode 0x20a7 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 12 */
/* CVT 1 4 */
/* CVT 13 13 */
/* Min and Max */
ResYAnchor(13,13)	/* min, CVT */
ResYAnchor(1,4)	/* max, CVT */

/* CVTs - beginning */
ResYAnchor(0,12)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(1,93) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(1,83,13)
YAnchor(83)
ResYDist(83,11) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
YInterpolate(1,70,13)
YAnchor(70)
ResYDist(70,63) /*perpendicular to the stroke*/

/* YDir: Stroke #3 */
YInterpolate(1,35,13)
YAnchor(35)
ResYDist(35,36) /*perpendicular to the stroke*/

/* YDir: Stroke #4 */
ResYDist(13,28) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="plus">
/* VTTTalk Unicode 0x2b (+) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(5)	/* max */

/* YDir: Stroke #0 */
YInterpolate(5,2,0)
YAnchor(2)
ResYDist(2,3) /*perpendicular to the stroke*/
YShift(2,10) /*along bottom edge*/
YShift(3,7) /*along top edge*/

Smooth()


    </glyphProgram>

    <glyphProgram name="plusminus">
/* VTTTalk Unicode 0xb1 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(12)	/* min */
YAnchor(5)	/* max */

/* YDir: Stroke #0 */
YInterpolate(5,3,12)
YAnchor(3)
ResYDist(3,2) /*perpendicular to the stroke*/
YShift(2,10) /*along bottom edge*/
YShift(3,7) /*along top edge*/

/* YDir: Stroke #1 */
ResYDist(12,13) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="product">
/* VTTTalk Unicode 0x220f */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 1 16 */
/* Min and Max */
YAnchor(0)	/* min */
ResYAnchor(1,16)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(1,10) /*perpendicular to the stroke*/

/* Extreme Min */
YShift(0,8)

Smooth()

    </glyphProgram>

    <glyphProgram name="q">
/* VTTTalk Unicode 0x71 (q) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 6 11 */
/* CVT 16 7 */
/* CVT 23 6 */
/* CVT 24 14 */
/* Min and Max */
ResYAnchor(24,14)	/* min, CVT */
ResYAnchor(16,7)	/* max, CVT */

/* CVTs - beginning */
ResYAnchor(6,11)  /*knot, CVT*/
ResYAnchor(23,6)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(16,35) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(6,25) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="question">
/* VTTTalk Unicode 0x3f (?) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 36 19 */
/* Min and Max */
ResYAnchor(36,19)	/* min, CVT */
YAnchor(22)	/* max */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(22,13) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="questiondown">
/* VTTTalk Unicode 0xbf */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(22)	/* min */
YAnchor(36)	/* max */

/* YDir: Stroke #0 */
ResYDist(22,13) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="quotedblbase">
/* VTTTalk Unicode 0x201e */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(13)	/* max */

/* Contour #1 */
YShift(13,34) /* max */
YShift(0,21) /* min */

Smooth()


    </glyphProgram>

    <glyphProgram name="quotedblleft">
/* VTTTalk Unicode 0x201c */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 17 */
/* Min and Max */
YAnchor(13)	/* min */
ResYAnchor(0,17)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* Contour #1 */
YShift(0,21) /* max */
YShift(13,34) /* min */

Smooth()


    </glyphProgram>

    <glyphProgram name="quotedblright">
/* VTTTalk Unicode 0x201d */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 34 17 */
/* Min and Max */
YAnchor(0)	/* min */
ResYAnchor(34,17)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* Extreme Max */
YShift(34,13)

/* Extreme Min */
YShift(0,21)

Smooth()

    </glyphProgram>

    <glyphProgram name="quoteleft">
/* VTTTalk Unicode 0x2018 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 17 */
/* Min and Max */
YAnchor(13)	/* min */
ResYAnchor(0,17)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


Smooth()

    </glyphProgram>

    <glyphProgram name="quoteright">
/* VTTTalk Unicode 0x2019 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 13 17 */
/* Min and Max */
YAnchor(0)	/* min */
ResYAnchor(13,17)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


Smooth()


    </glyphProgram>

    <glyphProgram name="quotesingle">
/* VTTTalk Unicode 0x27 (') */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(6)	/* min */
YAnchor(0)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="quotesingle.ss03">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(9)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="r">
/* VTTTalk Unicode 0x72 (r) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 10 */
/* CVT 1 6 */
/* CVT 9 7 */
/* Min and Max */
ResYAnchor(0,10)	/* min, CVT */
ResYAnchor(9,7)	/* max, CVT */

/* CVTs - beginning */
ResYAnchor(1,6)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(9,16) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="r.serif">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 18  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(0)	/* min */
YAnchor(11)	/* max */

/* YDir: Stroke #0 */
ResYDist(11,21) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(11,5,0)
YAnchor(5)
ResYDist(5,4) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(0,1) /*perpendicular to the stroke*/
YShift(1,27) /*along top edge*/

Smooth()

    </glyphProgram>

    <glyphProgram name="radical">
/* VTTTalk Unicode 0x221a */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 19 */
/* Min and Max */
ResYAnchor(0,19)	/* min, CVT */
YAnchor(6)	/* max */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
YInterpolate(6,2,0)
YAnchor(2)
ResYDist(2,3) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="registered">
/* VTTTalk Unicode 0xae */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(24)	/* min */
YAnchor(34)	/* max */

/* YDir: Stroke #0 */
ResYDist(34,55) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(34,5,24)
YAnchor(5)
ResYDist(5,23) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
YInterpolate(34,2,24)
YAnchor(2)
ResYDist(2,15) /*perpendicular to the stroke*/

/* YDir: Stroke #3 */
ResYDist(24,45) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="ring">
/* VTTTalk Unicode 0x2da */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(8)	/* max */

/* YDir: Stroke #0 */
ResYDist(8,22) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,16) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="ring.case">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 16  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(0)	/* min */
YAnchor(8)	/* max */

/* YDir: Stroke #0 */
ResYDist(8,22) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,16) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="rtblock">
/* VTTTalk Unicode 0x2590 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="s">
/* VTTTalk Unicode 0x73 (s) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 11 */
/* CVT 26 7 */
/* Min and Max */
ResYAnchor(0,11)	/* min, CVT */
ResYAnchor(26,7)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(26,36) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,9) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="section">
/* VTTTalk Unicode 0xa7 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(42)	/* max */

/* YDir: Stroke #0 */
ResYDist(42,55) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,15) /*perpendicular to the stroke*/

/* Contour #1 */
YShift(42,93) /* max */
YShift(0,82) /* min */

Smooth()

    </glyphProgram>

    <glyphProgram name="semicolon">
/* VTTTalk Unicode 0x3b (;) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(28)	/* max */

Smooth()

    </glyphProgram>

    <glyphProgram name="seven">
/* VTTTalk Unicode 0x37 (7) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 12 */
/* CVT 6 4 */
/* Min and Max */
ResYAnchor(0,12)	/* min, CVT */
ResYAnchor(6,4)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(6,5) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="shade">
/* VTTTalk Unicode 0x2592 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(157)	/* max */

/* YDir: Stroke #0 */
YInterpolate(157,165,0)
YAnchor(165)
ResYDist(165,164) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(157,161,0)
YAnchor(161)
ResYDist(161,160) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(157,156) /*perpendicular to the stroke*/

/* YDir: Stroke #3 */
YInterpolate(157,153,0)
YAnchor(153)
ResYDist(153,152) /*perpendicular to the stroke*/

/* YDir: Stroke #4 */
YInterpolate(157,149,0)
YAnchor(149)
ResYDist(149,148) /*perpendicular to the stroke*/

/* YDir: Stroke #5 */
YInterpolate(157,145,0)
YAnchor(145)
ResYDist(145,144) /*perpendicular to the stroke*/

/* YDir: Stroke #6 */
YInterpolate(157,141,0)
YAnchor(141)
ResYDist(141,140) /*perpendicular to the stroke*/

/* YDir: Stroke #7 */
YInterpolate(157,137,0)
YAnchor(137)
ResYDist(137,136) /*perpendicular to the stroke*/

/* YDir: Stroke #8 */
YInterpolate(157,133,0)
YAnchor(133)
ResYDist(133,132) /*perpendicular to the stroke*/

/* YDir: Stroke #9 */
YInterpolate(157,129,0)
YAnchor(129)
ResYDist(129,128) /*perpendicular to the stroke*/

/* YDir: Stroke #10 */
YInterpolate(157,125,0)
YAnchor(125)
ResYDist(125,124) /*perpendicular to the stroke*/

/* YDir: Stroke #11 */
YInterpolate(157,121,0)
YAnchor(121)
ResYDist(121,120) /*perpendicular to the stroke*/

/* YDir: Stroke #12 */
YInterpolate(157,117,0)
YAnchor(117)
ResYDist(117,116) /*perpendicular to the stroke*/

/* YDir: Stroke #13 */
YInterpolate(157,113,0)
YAnchor(113)
ResYDist(113,112) /*perpendicular to the stroke*/

/* YDir: Stroke #14 */
YInterpolate(157,109,0)
YAnchor(109)
ResYDist(109,108) /*perpendicular to the stroke*/

/* YDir: Stroke #15 */
YInterpolate(157,105,0)
YAnchor(105)
ResYDist(105,104) /*perpendicular to the stroke*/

/* YDir: Stroke #16 */
YInterpolate(157,101,0)
YAnchor(101)
ResYDist(101,100) /*perpendicular to the stroke*/

/* YDir: Stroke #17 */
YInterpolate(157,97,0)
YAnchor(97)
ResYDist(97,96) /*perpendicular to the stroke*/

/* YDir: Stroke #18 */
YInterpolate(157,93,0)
YAnchor(93)
ResYDist(93,92) /*perpendicular to the stroke*/

/* YDir: Stroke #19 */
YInterpolate(157,89,0)
YAnchor(89)
ResYDist(89,88) /*perpendicular to the stroke*/

/* YDir: Stroke #20 */
YInterpolate(157,85,0)
YAnchor(85)
ResYDist(85,84) /*perpendicular to the stroke*/

/* YDir: Stroke #21 */
YInterpolate(157,80,0)
YAnchor(80)
ResYDist(80,81) /*perpendicular to the stroke*/

/* YDir: Stroke #22 */
YInterpolate(157,76,0)
YAnchor(76)
ResYDist(76,77) /*perpendicular to the stroke*/

/* YDir: Stroke #23 */
YInterpolate(157,72,0)
YAnchor(72)
ResYDist(72,73) /*perpendicular to the stroke*/

/* YDir: Stroke #24 */
YInterpolate(157,68,0)
YAnchor(68)
ResYDist(68,69) /*perpendicular to the stroke*/

/* YDir: Stroke #25 */
YInterpolate(157,64,0)
YAnchor(64)
ResYDist(64,65) /*perpendicular to the stroke*/

/* YDir: Stroke #26 */
YInterpolate(157,60,0)
YAnchor(60)
ResYDist(60,61) /*perpendicular to the stroke*/

/* YDir: Stroke #27 */
YInterpolate(157,56,0)
YAnchor(56)
ResYDist(56,57) /*perpendicular to the stroke*/

/* YDir: Stroke #28 */
YInterpolate(157,52,0)
YAnchor(52)
ResYDist(52,53) /*perpendicular to the stroke*/

/* YDir: Stroke #29 */
YInterpolate(157,48,0)
YAnchor(48)
ResYDist(48,49) /*perpendicular to the stroke*/

/* YDir: Stroke #30 */
YInterpolate(157,44,0)
YAnchor(44)
ResYDist(44,45) /*perpendicular to the stroke*/

/* YDir: Stroke #31 */
YInterpolate(157,40,0)
YAnchor(40)
ResYDist(40,41) /*perpendicular to the stroke*/

/* YDir: Stroke #32 */
YInterpolate(157,36,0)
YAnchor(36)
ResYDist(36,37) /*perpendicular to the stroke*/

/* YDir: Stroke #33 */
YInterpolate(157,32,0)
YAnchor(32)
ResYDist(32,33) /*perpendicular to the stroke*/

/* YDir: Stroke #34 */
YInterpolate(157,28,0)
YAnchor(28)
ResYDist(28,29) /*perpendicular to the stroke*/

/* YDir: Stroke #35 */
YInterpolate(157,24,0)
YAnchor(24)
ResYDist(24,25) /*perpendicular to the stroke*/

/* YDir: Stroke #36 */
YInterpolate(157,20,0)
YAnchor(20)
ResYDist(20,21) /*perpendicular to the stroke*/

/* YDir: Stroke #37 */
YInterpolate(157,16,0)
YAnchor(16)
ResYDist(16,17) /*perpendicular to the stroke*/

/* YDir: Stroke #38 */
YInterpolate(157,12,0)
YAnchor(12)
ResYDist(12,13) /*perpendicular to the stroke*/

/* YDir: Stroke #39 */
YInterpolate(157,8,0)
YAnchor(8)
ResYDist(8,9) /*perpendicular to the stroke*/

/* YDir: Stroke #40 */
YInterpolate(157,4,0)
YAnchor(4)
ResYDist(4,5) /*perpendicular to the stroke*/

/* YDir: Stroke #41 */
ResYDist(0,1) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="six">
/* VTTTalk Unicode 0x36 (6) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 13 */
/* CVT 8 5 */
/* Min and Max */
ResYAnchor(0,13)	/* min, CVT */
ResYAnchor(8,5)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(8,17) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(8,28,0)
YAnchor(28)
ResYDist(28,48) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(0,38) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="slash">
/* VTTTalk Unicode 0x2f (/) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 1 19 */
/* CVT 3 17 */
/* Min and Max */
ResYAnchor(1,19)	/* min, CVT */
ResYAnchor(3,17)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* Extreme Max */
YShift(3,2)

Smooth()

    </glyphProgram>

    <glyphProgram name="smileface">
/* VTTTalk Unicode 0x263a */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(10)	/* max */

/* YDir: Stroke #0 */
ResYDist(10,30) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(10,40,0)
YAnchor(40)
ResYDist(40,48) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(0,20) /*perpendicular to the stroke*/

/* Contour #3 */
YShift(10,62) /* max */
YShift(40,56) /* min */

/* Contour #4 */
YShift(10,74) /* max */
YShift(40,68) /* min */

Smooth()

    </glyphProgram>

    <glyphProgram name="space">
/* VTTTalk Unicode 0x20 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/*Auto-Hinting Light is not applied: Empty glyph or glyph with one point*/

    </glyphProgram>

    <glyphProgram name="spade">
/* VTTTalk Unicode 0x2660 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 6 18  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(5)	/* min */
YAnchor(12)	/* max */

/* Extreme Min */
YShift(5,7)

/* Extreme Min */
YShift(5,4)

Smooth()


    </glyphProgram>

    <glyphProgram name="sterling">
/* VTTTalk Unicode 0xa3 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 19 4 */
/* CVT 56 13 */
/* Min and Max */
ResYAnchor(56,13)	/* min, CVT */
ResYAnchor(19,4)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(19,26) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(19,11,56)
YAnchor(11)
ResYDist(11,10) /*perpendicular to the stroke*/
YShift(10,37) /*along bottom edge*/
YShift(11,34) /*along top edge*/

/* YDir: Stroke #2 */
ResYDist(56,49) /*perpendicular to the stroke*/

/* Extreme Min */
YShift(56,0)

Smooth()

    </glyphProgram>

    <glyphProgram name="summation">
/* VTTTalk Unicode 0x2211 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(4)	/* max */

/* YDir: Stroke #0 */
ResYDist(4,7) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,11) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="t">
/* VTTTalk Unicode 0x74 (t) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 11 */
/* CVT 22 6 */
/* Min and Max */
ResYAnchor(0,11)	/* min, CVT */
YAnchor(7)	/* max */

/* CVTs - beginning */
ResYAnchor(22,6)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(22,21) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,14) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="tbar">
/* VTTTalk Unicode 0x167 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 4 11 */
/* CVT 26 6 */
/* Min and Max */
ResYAnchor(4,11)	/* min, CVT */
YAnchor(11)	/* max */

/* CVTs - beginning */
ResYAnchor(26,6)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(26,25) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(11,0,4)
YAnchor(0)
ResYDist(0,1) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(4,18) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="thorn">
/* VTTTalk Unicode 0xfe */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 14 */
/* CVT 1 0 */
/* CVT 7 7 */
/* CVT 17 11 */
/* Min and Max */
ResYAnchor(0,14)	/* min, CVT */
ResYAnchor(1,0)	/* max, CVT */

/* CVTs - beginning */
ResYAnchor(7,7)  /*knot, CVT*/
ResYAnchor(17,11)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(7,34) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(17,23) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="three">
/* VTTTalk Unicode 0x33 (3) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 13 */
/* CVT 37 5 */
/* Min and Max */
ResYAnchor(0,13)	/* min, CVT */
ResYAnchor(37,5)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(37,28) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,8) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="threequarters">
/* VTTTalk Unicode 0xbe */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 47 18 */
/* CVT 60 19 */
/* CVT 62 17 */
/* Min and Max */
YAnchor(45)	/* min */
YAnchor(32)	/* max */

/* CVTs - beginning */
ResYAnchor(47,18)  /*knot, CVT*/
ResYAnchor(60,19)  /*knot, CVT*/
ResYAnchor(62,17)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(32,25) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(32,8,45)
YAnchor(8)
ResYDist(8,0) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(47,56) /*perpendicular to the stroke*/
YShift(47,54) /*along bottom edge*/
YShift(56,51) /*along top edge*/

Smooth()

    </glyphProgram>

    <glyphProgram name="tildecomb">
/* VTTTalk Unicode 0x303 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(4)	/* min */
YAnchor(16)	/* max */

/* YDir: Stroke #0 */
YInterpolate(16,9,4)
YAnchor(9)

/* YDir: Stroke #1 */
ResYDist(4,21) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="tildecomb.i">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(4)	/* min */
YAnchor(16)	/* max */

/* YDir: Stroke #0 */
YInterpolate(16,9,4)
YAnchor(9)

/* YDir: Stroke #1 */
ResYDist(4,21) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="trademark">
/* VTTTalk Unicode 0x2122 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 3 17 */
/* Min and Max */
YAnchor(0)	/* min */
ResYAnchor(3,17)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(3,2) /*perpendicular to the stroke*/
YShift(2,6) /*along bottom edge*/

/* Contour #1 */
YShift(3,9) /* max */
YShift(0,8) /* min */

/* Extreme Max */
YShift(3,13)

/* Extreme Min */
YShift(0,15)

Smooth()

    </glyphProgram>

    <glyphProgram name="two">
/* VTTTalk Unicode 0x32 (2) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 12 */
/* CVT 22 5 */
/* Min and Max */
ResYAnchor(0,12)	/* min, CVT */
ResYAnchor(22,5)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(22,12) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,33) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="u">
/* VTTTalk Unicode 0x75 (u) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 11 */
/* CVT 7 6 */
/* CVT 27 10 */
/* Min and Max */
ResYAnchor(0,11)	/* min, CVT */
ResYAnchor(7,6)	/* max, CVT */

/* CVTs - beginning */
ResYAnchor(27,10)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(0,14) /*perpendicular to the stroke*/

/* Extreme Max */
YShift(7,22)

Smooth()


    </glyphProgram>

    <glyphProgram name="u.i">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 19  DISABLED for a NON-LATIN glyph */
/* CVT 27 18  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(0)	/* min */
YAnchor(7)	/* max */

/* YDir: Stroke #0 */
ResYDist(0,14) /*perpendicular to the stroke*/

/* Extreme Max */
YShift(7,22)

/* Extreme Min */
YShift(0,27)

Smooth()

    </glyphProgram>

    <glyphProgram name="uhorn">
/* VTTTalk Unicode 0x1b0 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 11 */
/* CVT 7 6 */
/* CVT 27 10 */
/* Min and Max */
ResYAnchor(0,11)	/* min, CVT */
YAnchor(36)	/* max */

/* CVTs - beginning */
ResYAnchor(7,6)  /*knot, CVT*/
ResYAnchor(27,10)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
YShift(7,21) /*stroke, CVT of another stroke*/
ResYDist(21,40) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,14) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="underscore">
/* VTTTalk Unicode 0x5f (_) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

/* YDir: Stroke #0 */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni00A0">
/* VTTTalk Unicode 0xa0 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/*Auto-Hinting Light is not applied: Empty glyph or glyph with one point*/

    </glyphProgram>

    <glyphProgram name="uni00B2">
/* VTTTalk Unicode 0xb2 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 18 17 */
/* Min and Max */
YAnchor(0)	/* min */
ResYAnchor(18,17)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(18,10) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,28) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni00B3">
/* VTTTalk Unicode 0xb3 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 33 17 */
/* Min and Max */
YAnchor(0)	/* min */
ResYAnchor(33,17)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(33,26) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,8) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni00B5">
/* VTTTalk Unicode 0xb5 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 42 19 */
/* Min and Max */
YAnchor(0)	/* min */
YAnchor(8)	/* max */

/* CVTs - beginning */
ResYAnchor(42,19)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
YShift(42,34) /*stroke, CVT of another stroke*/
ResYDist(34,26) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(42,15) /*perpendicular to the stroke*/

/* Extreme Max */
YShift(8,21)

Smooth()


    </glyphProgram>

    <glyphProgram name="uni00B9">
/* VTTTalk Unicode 0xb9 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 4 17 */
/* Min and Max */
YAnchor(0)	/* min */
ResYAnchor(4,17)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


Smooth()


    </glyphProgram>

    <glyphProgram name="uni0122">
/* VTTTalk Unicode 0x122 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 9 */
/* CVT 11 3 */
/* Min and Max */
YAnchor(45)	/* min */
ResYAnchor(11,3)	/* max, CVT */

/* CVTs - beginning */
ResYAnchor(0,9)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(11,21) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(11,40,45)
YAnchor(40)
ResYDist(40,39) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(0,32) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0123">
/* VTTTalk Unicode 0x123 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 15 */
/* CVT 92 7 */
/* Min and Max */
ResYAnchor(0,15)	/* min, CVT */
YAnchor(96)	/* max */

/* CVTs - beginning */
ResYAnchor(92,7)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
YInterpolate(96,64,0)
YAnchor(64)
ResYDist(64,80) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(92,93) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
YInterpolate(96,56,0)
YAnchor(56)
ResYDist(56,72) /*perpendicular to the stroke*/

/* YDir: Stroke #3 */
ResYDist(0,19) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0136">
/* VTTTalk Unicode 0x136 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 4 8 */
/* CVT 5 2 */
/* Min and Max */
YAnchor(17)	/* min */
ResYAnchor(5,2)	/* max, CVT */

/* CVTs - beginning */
ResYAnchor(4,8)  /*knot, CVT*/
/* CVTs - end */


/* Extreme Max */
YShift(5,8)

/* Extreme Max */
YShift(5,14)

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0137">
/* VTTTalk Unicode 0x137 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 4 10 */
/* CVT 5 0 */
/* CVT 14 6 */
/* Min and Max */
YAnchor(17)	/* min */
ResYAnchor(5,0)	/* max, CVT */

/* CVTs - beginning */
ResYAnchor(4,10)  /*knot, CVT*/
ResYAnchor(14,6)  /*knot, CVT*/
/* CVTs - end */


Smooth()


    </glyphProgram>

    <glyphProgram name="uni013B">
/* VTTTalk Unicode 0x13b */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 8 */
/* CVT 1 2 */
/* Min and Max */
YAnchor(6)	/* min */
ResYAnchor(1,2)	/* max, CVT */

/* CVTs - beginning */
ResYAnchor(0,8)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(0,3) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni013C">
/* VTTTalk Unicode 0x13c */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 10 */
/* CVT 5 0 */
/* Min and Max */
YAnchor(10)	/* min */
ResYAnchor(5,0)	/* max, CVT */

/* CVTs - beginning */
ResYAnchor(0,10)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(5,4) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,1) /*perpendicular to the stroke*/
YShift(1,7) /*along top edge*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0145">
/* VTTTalk Unicode 0x145 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 8 */
/* CVT 2 2 */
/* Min and Max */
YAnchor(10)	/* min */
ResYAnchor(2,2)	/* max, CVT */

/* CVTs - beginning */
ResYAnchor(0,8)  /*knot, CVT*/
/* CVTs - end */


/* Extreme Max */
YShift(2,5)

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0146">
/* VTTTalk Unicode 0x146 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 10 */
/* CVT 1 6 */
/* CVT 7 7 */
/* Min and Max */
YAnchor(25)	/* min */
ResYAnchor(7,7)	/* max, CVT */

/* CVTs - beginning */
ResYAnchor(0,10)  /*knot, CVT*/
ResYAnchor(1,6)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(7,18) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0156">
/* VTTTalk Unicode 0x156 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 8 */
/* CVT 1 2 */
/* Min and Max */
YAnchor(27)	/* min */
ResYAnchor(1,2)	/* max, CVT */

/* CVTs - beginning */
ResYAnchor(0,8)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(1,26) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(1,16,27)
YAnchor(16)
ResYDist(16,14) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0157">
/* VTTTalk Unicode 0x157 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 10 */
/* CVT 1 6 */
/* CVT 9 7 */
/* Min and Max */
YAnchor(24)	/* min */
ResYAnchor(9,7)	/* max, CVT */

/* CVTs - beginning */
ResYAnchor(0,10)  /*knot, CVT*/
ResYAnchor(1,6)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(9,16) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0198">
/* VTTTalk Unicode 0x198 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 18  DISABLED for a NON-LATIN glyph */
/* CVT 1 16  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(24)	/* min */
YAnchor(8)	/* max */

/* YDir: Stroke #0 */
ResYDist(8,16) /*perpendicular to the stroke*/

/* Extreme Max */
YShift(8,11)

/* Extreme Max */
YShift(8,2)

/* Extreme Min */
YShift(24,23)

Smooth()


    </glyphProgram>

    <glyphProgram name="uni01B8">
/* VTTTalk Unicode 0x1b8 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 19  DISABLED for a NON-LATIN glyph */
/* CVT 31 16  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(0)	/* min */
YAnchor(31)	/* max */

/* YDir: Stroke #0 */
ResYDist(31,34) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(31,35,0)
YAnchor(35)
ResYDist(35,9) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(0,21) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni01C7">
/* VTTTalk Unicode 0x1c7 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 29 8 */
/* CVT 30 2 */
/* Min and Max */
YAnchor(0)	/* min */
ResYAnchor(30,2)	/* max, CVT */

/* CVTs - beginning */
ResYAnchor(29,8)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
YShift(30,20) /*stroke, CVT of another stroke*/
ResYDist(20,19) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(29,36) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(0,12) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni01C8">
/* VTTTalk Unicode 0x1c8 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 8 */
/* CVT 1 2 */
/* Min and Max */
YAnchor(10)	/* min */
ResYAnchor(1,2)	/* max, CVT */

/* CVTs - beginning */
ResYAnchor(0,8)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
YInterpolate(1,33,10)
YAnchor(33)
ResYDist(33,32) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,7) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(10,25) /*perpendicular to the stroke*/

/* Contour #2 */
YShift(1,46) /* max */
YShift(33,40) /* min */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni01C9">
/* VTTTalk Unicode 0x1c9 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 15 */
/* CVT 20 6 */
/* CVT 27 10 */
/* CVT 32 0 */
/* Min and Max */
ResYAnchor(0,15)	/* min, CVT */
ResYAnchor(32,0)	/* max, CVT */

/* CVTs - beginning */
ResYAnchor(20,6)  /*knot, CVT*/
ResYAnchor(27,10)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(32,31) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(20,19) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(27,28) /*perpendicular to the stroke*/
YShift(28,34) /*along top edge*/

/* YDir: Stroke #3 */
ResYDist(0,13) /*perpendicular to the stroke*/

/* Contour #2 */
YShift(32,43) /* max */
YShift(20,37) /* min */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0202">
/* VTTTalk Unicode 0x202 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 6 18  DISABLED for a NON-LATIN glyph */
/* CVT 7 17  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(5)	/* min */
YAnchor(16)	/* max */

/* YDir: Stroke #0 */
ResYDist(16,23) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(16,1,5)
YAnchor(1)
ResYDist(1,2) /*perpendicular to the stroke*/

/* Extreme Min */
YShift(5,10)

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0203">
/* VTTTalk Unicode 0x203 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 19  DISABLED for a NON-LATIN glyph */
/* CVT 53 18  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(0)	/* min */
YAnchor(65)	/* max */

/* YDir: Stroke #0 */
ResYDist(65,72) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(65,47,0)
YAnchor(47)
ResYDist(47,39) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
YInterpolate(65,18,0)
YAnchor(18)
ResYDist(18,8) /*perpendicular to the stroke*/

/* YDir: Stroke #3 */
ResYDist(0,28) /*perpendicular to the stroke*/

/* Extreme Min */
YShift(0,54)

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0206">
/* VTTTalk Unicode 0x206 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 18  DISABLED for a NON-LATIN glyph */
/* CVT 1 16  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(0)	/* min */
YAnchor(17)	/* max */

/* YDir: Stroke #0 */
ResYDist(17,24) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(17,1,0)
YAnchor(1)
ResYDist(1,4) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
YInterpolate(17,8,0)
YAnchor(8)
ResYDist(8,5) /*perpendicular to the stroke*/

/* YDir: Stroke #3 */
ResYDist(0,9) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0207">
/* VTTTalk Unicode 0x207 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 19  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(0)	/* min */
YAnchor(50)	/* max */

/* YDir: Stroke #0 */
ResYDist(50,57) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(50,10,0)
YAnchor(10)
ResYDist(10,40) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
YInterpolate(50,19,0)
YAnchor(19)
ResYDist(19,34) /*perpendicular to the stroke*/

/* YDir: Stroke #3 */
ResYDist(0,24) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni020A">
/* VTTTalk Unicode 0x20a */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 18  DISABLED for a NON-LATIN glyph */
/* CVT 5 16  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(0)	/* min */
YAnchor(17)	/* max */

/* YDir: Stroke #0 */
ResYDist(17,24) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(17,5,0)
YAnchor(5)
ResYDist(5,4) /*perpendicular to the stroke*/
YShift(4,8) /*along bottom edge*/

/* YDir: Stroke #2 */
ResYDist(0,9) /*perpendicular to the stroke*/
YShift(9,1) /*along top edge*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni020B">
/* VTTTalk Unicode 0x20b */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 18  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(0)	/* min */
YAnchor(15)	/* max */

/* YDir: Stroke #0 */
ResYDist(15,22) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(15,5,0)
YAnchor(5)
ResYDist(5,4) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(0,1) /*perpendicular to the stroke*/
YShift(1,7) /*along top edge*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni020E">
/* VTTTalk Unicode 0x20e */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 19  DISABLED for a NON-LATIN glyph */
/* CVT 10 16  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(0)	/* min */
YAnchor(43)	/* max */

/* YDir: Stroke #0 */
ResYDist(43,50) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(43,10,0)
YAnchor(10)
ResYDist(10,29) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(0,20) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni020F">
/* VTTTalk Unicode 0x20f */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 19  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(0)	/* min */
YAnchor(44)	/* max */

/* YDir: Stroke #0 */
ResYDist(44,51) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(44,10,0)
YAnchor(10)
ResYDist(10,29) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(0,20) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0212">
/* VTTTalk Unicode 0x212 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 18  DISABLED for a NON-LATIN glyph */
/* CVT 1 16  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(0)	/* min */
YAnchor(32)	/* max */

/* YDir: Stroke #0 */
ResYDist(32,39) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(32,1,0)
YAnchor(1)
ResYDist(1,26) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
YInterpolate(32,14,0)
YAnchor(14)
ResYDist(14,16) /*perpendicular to the stroke*/

/* Extreme Min */
YShift(0,12)

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0213">
/* VTTTalk Unicode 0x213 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 18  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(0)	/* min */
YAnchor(29)	/* max */

/* YDir: Stroke #0 */
ResYDist(29,36) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(29,9,0)
YAnchor(9)
ResYDist(9,16) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0216">
/* VTTTalk Unicode 0x216 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 19  DISABLED for a NON-LATIN glyph */
/* CVT 5 16  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(0)	/* min */
YAnchor(26)	/* max */

/* YDir: Stroke #0 */
ResYDist(26,33) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,10) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0217">
/* VTTTalk Unicode 0x217 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 19  DISABLED for a NON-LATIN glyph */
/* CVT 27 18  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(0)	/* min */
YAnchor(41)	/* max */

/* YDir: Stroke #0 */
ResYDist(41,48) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,14) /*perpendicular to the stroke*/

/* Extreme Min */
YShift(0,27)

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0218">
/* VTTTalk Unicode 0x218 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 9 */
/* CVT 27 3 */
/* Min and Max */
YAnchor(55)	/* min */
ResYAnchor(27,3)	/* max, CVT */

/* CVTs - beginning */
ResYAnchor(0,9)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(27,35) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,7) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0219">
/* VTTTalk Unicode 0x219 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 11 */
/* CVT 26 7 */
/* Min and Max */
YAnchor(51)	/* min */
ResYAnchor(26,7)	/* max, CVT */

/* CVTs - beginning */
ResYAnchor(0,11)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(26,36) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,9) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni021A">
/* VTTTalk Unicode 0x21a */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 8 */
/* CVT 3 2 */
/* Min and Max */
YAnchor(8)	/* min */
ResYAnchor(3,2)	/* max, CVT */

/* CVTs - beginning */
ResYAnchor(0,8)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(3,2) /*perpendicular to the stroke*/
YShift(2,6) /*along bottom edge*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni021B">
/* VTTTalk Unicode 0x21b */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 11 */
/* CVT 22 6 */
/* Min and Max */
YAnchor(25)	/* min */
YAnchor(7)	/* max */

/* CVTs - beginning */
ResYAnchor(0,11)  /*knot, CVT*/
ResYAnchor(22,6)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(22,21) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,14) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0237">
/* VTTTalk Unicode 0x237 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 15 */
/* CVT 17 6 */
/* Min and Max */
ResYAnchor(0,15)	/* min, CVT */
ResYAnchor(17,6)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(17,16) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,9) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni024D">
/* VTTTalk Unicode 0x24d */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 4 18  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(4)	/* min */
YAnchor(13)	/* max */

/* YDir: Stroke #0 */
ResYDist(13,20) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(13,0,4)
YAnchor(0)
ResYDist(0,1) /*perpendicular to the stroke*/

/* Extreme Max */
YShift(13,6)

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0259">
/* VTTTalk Unicode 0x259 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 7 */
/* CVT 10 11 */
/* Min and Max */
ResYAnchor(10,11)	/* min, CVT */
ResYAnchor(0,7)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(0,24) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(0,35,10)
YAnchor(35)
ResYDist(35,18) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(10,40) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni027B">
/* VTTTalk Unicode 0x27b */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 10 19  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(0)	/* min */
YAnchor(24)	/* max */

/* YDir: Stroke #0 */
YInterpolate(24,10,0)
YAnchor(10)
ResYDist(10,18) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,30) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0298">
/* VTTTalk Unicode 0x298 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 19  DISABLED for a NON-LATIN glyph */
/* CVT 10 16  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(0)	/* min */
YAnchor(10)	/* max */

/* YDir: Stroke #0 */
ResYDist(10,29) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,20) /*perpendicular to the stroke*/

/* Contour #2 */
YShift(10,44) /* max */
YShift(0,38) /* min */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni029A">
/* VTTTalk Unicode 0x29a */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 19  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(0)	/* min */
YAnchor(16)	/* max */

/* YDir: Stroke #0 */
ResYDist(16,32) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(16,49,0)
YAnchor(49)
ResYDist(49,41) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(0,24) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni02BB">
/* VTTTalk Unicode 0x2bb */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 17  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(12)	/* min */
YAnchor(0)	/* max */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni02BC">
/* VTTTalk Unicode 0x2bc */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(13)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni02BE">
/* VTTTalk Unicode 0x2be */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(10)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni02BF">
/* VTTTalk Unicode 0x2bf */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(8)	/* max */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni02C8">
/* VTTTalk Unicode 0x2c8 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(2)	/* max */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni02C9">
/* VTTTalk Unicode 0x2c9 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 1 16 */
/* Min and Max */
YAnchor(0)	/* min */
ResYAnchor(1,16)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni02CA">
/* VTTTalk Unicode 0x2ca */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(1)	/* min */
YAnchor(2)	/* max */

/* YDir: Stroke #0 */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni02CB">
/* VTTTalk Unicode 0x2cb */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(2)	/* max */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni02CC">
/* VTTTalk Unicode 0x2cc */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(2)	/* max */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0302">
/* VTTTalk Unicode 0x302 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(2)	/* max */

/* Extreme Min */
YShift(0,5)

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0302.case">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(2)	/* max */

/* Extreme Min */
YShift(0,5)

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0306">
/* VTTTalk Unicode 0x306 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(5)	/* min */
YAnchor(0)	/* max */

/* YDir: Stroke #0 */
ResYDist(5,12) /*perpendicular to the stroke*/

/* Extreme Max */
YShift(0,9)

Smooth()


    </glyphProgram>

    <glyphProgram name="uni030C">
/* VTTTalk Unicode 0x30c */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(4)	/* min */
YAnchor(0)	/* max */

/* Extreme Max */
YShift(0,2)

Smooth()


    </glyphProgram>

    <glyphProgram name="uni030C.alt">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(7)	/* min */
YAnchor(0)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni030C.case">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(2)	/* min */
YAnchor(0)	/* max */

/* Extreme Max */
YShift(0,5)

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0311">
/* VTTTalk Unicode 0x311 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(5)	/* max */

/* YDir: Stroke #0 */
ResYDist(5,12) /*perpendicular to the stroke*/

/* Extreme Min */
YShift(0,9)

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0312">
/* VTTTalk Unicode 0x312 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(13)	/* min */
YAnchor(0)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni031B">
/* VTTTalk Unicode 0x31b */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(4)	/* min */
YAnchor(0)	/* max */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni031B.case">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(5)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0326">
/* VTTTalk Unicode 0x326 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(12)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0328">
/* VTTTalk Unicode 0x328 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(1)	/* min */
YAnchor(10)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0335">
/* VTTTalk Unicode 0x335 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

/* YDir: Stroke #0 */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0375">
/* VTTTalk Unicode 0x375 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(2)	/* max */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni1E66">
/* VTTTalk Unicode 0x1e66 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 19  DISABLED for a NON-LATIN glyph */
/* CVT 27 17  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(0)	/* min */
YAnchor(68)	/* max */

/* YDir: Stroke #0 */
YInterpolate(68,27,0)
YAnchor(27)
ResYDist(27,35) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,7) /*perpendicular to the stroke*/

/* Contour #1 */
YShift(68,55) /* max */
YShift(27,57) /* min */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni1E9E">
/* VTTTalk Unicode 0x1e9e */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 19  DISABLED for a NON-LATIN glyph */
/* CVT 31 18  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(0)	/* min */
YAnchor(37)	/* max */

/* YDir: Stroke #0 */
ResYDist(37,24) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(37,18,0)
YAnchor(18)
ResYDist(18,43) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(0,8) /*perpendicular to the stroke*/

/* Extreme Min */
YShift(0,31)

Smooth()

    </glyphProgram>

    <glyphProgram name="uni1EE8">
/* VTTTalk Unicode 0x1ee8 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 9 */
/* CVT 5 2 */
/* Min and Max */
ResYAnchor(0,9)	/* min, CVT */
YAnchor(33)	/* max */

/* CVTs - beginning */
ResYAnchor(5,2)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
YShift(5,15) /*stroke, CVT of another stroke*/
ResYDist(15,21) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,10) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni1EE9">
/* VTTTalk Unicode 0x1ee9 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 11 */
/* CVT 7 6 */
/* CVT 27 10 */
/* Min and Max */
ResYAnchor(0,11)	/* min, CVT */
YAnchor(48)	/* max */

/* CVTs - beginning */
ResYAnchor(7,6)  /*knot, CVT*/
ResYAnchor(27,10)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
YShift(7,21) /*stroke, CVT of another stroke*/
ResYDist(21,40) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,14) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni1EEA">
/* VTTTalk Unicode 0x1eea */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 9 */
/* CVT 5 2 */
/* Min and Max */
ResYAnchor(0,9)	/* min, CVT */
YAnchor(33)	/* max */

/* CVTs - beginning */
ResYAnchor(5,2)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
YShift(5,15) /*stroke, CVT of another stroke*/
ResYDist(15,21) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,10) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni1EEB">
/* VTTTalk Unicode 0x1eeb */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 11 */
/* CVT 7 6 */
/* CVT 27 10 */
/* Min and Max */
ResYAnchor(0,11)	/* min, CVT */
YAnchor(48)	/* max */

/* CVTs - beginning */
ResYAnchor(7,6)  /*knot, CVT*/
ResYAnchor(27,10)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
YShift(7,21) /*stroke, CVT of another stroke*/
ResYDist(21,40) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,14) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni1EEC">
/* VTTTalk Unicode 0x1eec */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 9 */
/* CVT 5 2 */
/* Min and Max */
ResYAnchor(0,9)	/* min, CVT */
YAnchor(55)	/* max */

/* CVTs - beginning */
ResYAnchor(5,2)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(55,48) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YShift(5,15) /*stroke, CVT of another stroke*/
ResYDist(15,21) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(0,10) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni1EED">
/* VTTTalk Unicode 0x1eed */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 11 */
/* CVT 7 6 */
/* CVT 27 10 */
/* Min and Max */
ResYAnchor(0,11)	/* min, CVT */
YAnchor(70)	/* max */

/* CVTs - beginning */
ResYAnchor(7,6)  /*knot, CVT*/
ResYAnchor(27,10)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(70,63) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YShift(7,21) /*stroke, CVT of another stroke*/
ResYDist(21,40) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(0,14) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni1EEE">
/* VTTTalk Unicode 0x1eee */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 9 */
/* CVT 5 2 */
/* Min and Max */
ResYAnchor(0,9)	/* min, CVT */
YAnchor(47)	/* max */

/* CVTs - beginning */
ResYAnchor(5,2)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(47,40) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(47,52,0)
YAnchor(52)
ResYDist(52,35) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
YShift(5,15) /*stroke, CVT of another stroke*/
ResYDist(15,21) /*perpendicular to the stroke*/

/* YDir: Stroke #3 */
ResYDist(0,10) /*perpendicular to the stroke*/

/* Extreme Max */
YShift(47,31)

Smooth()


    </glyphProgram>

    <glyphProgram name="uni1EEF">
/* VTTTalk Unicode 0x1eef */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 11 */
/* CVT 7 6 */
/* CVT 27 10 */
/* Min and Max */
ResYAnchor(0,11)	/* min, CVT */
YAnchor(62)	/* max */

/* CVTs - beginning */
ResYAnchor(7,6)  /*knot, CVT*/
ResYAnchor(27,10)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(62,55) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(62,67,0)
YAnchor(67)
ResYDist(67,50) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
YShift(7,21) /*stroke, CVT of another stroke*/
ResYDist(21,40) /*perpendicular to the stroke*/

/* YDir: Stroke #3 */
ResYDist(0,14) /*perpendicular to the stroke*/

/* Extreme Max */
YShift(62,46)

Smooth()


    </glyphProgram>

    <glyphProgram name="uni1EF0">
/* VTTTalk Unicode 0x1ef0 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 9 */
/* CVT 5 2 */
/* Min and Max */
YAnchor(31)	/* min */
YAnchor(26)	/* max */

/* CVTs - beginning */
ResYAnchor(0,9)  /*knot, CVT*/
ResYAnchor(5,2)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
YShift(5,15) /*stroke, CVT of another stroke*/
ResYDist(15,21) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,10) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni1EF1">
/* VTTTalk Unicode 0x1ef1 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 11 */
/* CVT 7 6 */
/* CVT 27 10 */
/* Min and Max */
YAnchor(46)	/* min */
YAnchor(36)	/* max */

/* CVTs - beginning */
ResYAnchor(0,11)  /*knot, CVT*/
ResYAnchor(7,6)  /*knot, CVT*/
ResYAnchor(27,10)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
YShift(7,21) /*stroke, CVT of another stroke*/
ResYDist(21,40) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,14) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2007">
/* VTTTalk Unicode 0x2007 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/*Auto-Hinting Light is not applied: Empty glyph or glyph with one point*/

    </glyphProgram>

    <glyphProgram name="uni2008">
/* VTTTalk Unicode 0x2008 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/*Auto-Hinting Light is not applied: Empty glyph or glyph with one point*/

    </glyphProgram>

    <glyphProgram name="uni2009">
/* VTTTalk Unicode 0x2009 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/*Auto-Hinting Light is not applied: Empty glyph or glyph with one point*/

    </glyphProgram>

    <glyphProgram name="uni200A">
/* VTTTalk Unicode 0x200a */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/*Auto-Hinting Light is not applied: Empty glyph or glyph with one point*/

    </glyphProgram>

    <glyphProgram name="uni200B">
/* VTTTalk Unicode 0x200b */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/*Auto-Hinting Light is not applied: Empty glyph or glyph with one point*/

    </glyphProgram>

    <glyphProgram name="uni2070">
/* VTTTalk Unicode 0x2070 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 12 17 */
/* Min and Max */
YAnchor(4)	/* min */
ResYAnchor(12,17)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(12,28) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(4,20) /*perpendicular to the stroke*/

/* Contour #0 */
YShift(12,1) /* max */
YShift(4,3) /* min */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2070.ss02">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 8 17  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(0)	/* min */
YAnchor(8)	/* max */

/* YDir: Stroke #0 */
ResYDist(8,24) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,16) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2070.zero">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 20 17  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(12)	/* min */
YAnchor(20)	/* max */

/* YDir: Stroke #0 */
ResYDist(20,36) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(12,28) /*perpendicular to the stroke*/

/* Contour #0 */
YShift(20,6) /* max */
YShift(12,0) /* min */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2074">
/* VTTTalk Unicode 0x2074 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 4 17 */
/* Min and Max */
YAnchor(0)	/* min */
ResYAnchor(4,17)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
YInterpolate(4,2,0)
YAnchor(2)
ResYDist(2,11) /*perpendicular to the stroke*/
YShift(2,9) /*along bottom edge*/
YShift(11,6) /*along top edge*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2075">
/* VTTTalk Unicode 0x2075 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 24 17 */
/* Min and Max */
YAnchor(0)	/* min */
ResYAnchor(24,17)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(24,27) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(24,31,0)
YAnchor(31)
ResYDist(31,18) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(0,8) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2076">
/* VTTTalk Unicode 0x2076 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 7 17 */
/* Min and Max */
YAnchor(0)	/* min */
ResYAnchor(7,17)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(7,15) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(7,24,0)
YAnchor(24)
ResYDist(24,41) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(0,32) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2077">
/* VTTTalk Unicode 0x2077 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 6 17 */
/* Min and Max */
YAnchor(0)	/* min */
ResYAnchor(6,17)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(6,5) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2078">
/* VTTTalk Unicode 0x2078 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 15 17 */
/* Min and Max */
YAnchor(0)	/* min */
ResYAnchor(15,17)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(15,56) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,31) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2079">
/* VTTTalk Unicode 0x2079 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 39 17 */
/* Min and Max */
YAnchor(0)	/* min */
ResYAnchor(39,17)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(39,15) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(39,31,0)
YAnchor(31)
ResYDist(31,23) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(0,7) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2080.zero">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 12 19  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(12)	/* min */
YAnchor(20)	/* max */

/* YDir: Stroke #0 */
ResYDist(20,36) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(12,28) /*perpendicular to the stroke*/

/* Contour #0 */
YShift(20,6) /* max */
YShift(12,0) /* min */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni20A6">
/* VTTTalk Unicode 0x20a6 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 4 12 */
/* CVT 5 4 */
/* Min and Max */
ResYAnchor(4,12)	/* min, CVT */
ResYAnchor(5,4)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
YInterpolate(5,0,4)
YAnchor(0)
ResYDist(0,1) /*perpendicular to the stroke*/

/* Extreme Max */
YShift(5,9)

/* Extreme Min */
YShift(4,11)

Smooth()

    </glyphProgram>

    <glyphProgram name="uni20A9">
/* VTTTalk Unicode 0x20a9 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 4 12 */
/* CVT 5 4 */
/* Min and Max */
ResYAnchor(4,12)	/* min, CVT */
ResYAnchor(5,4)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
YInterpolate(5,0,4)
YAnchor(0)
ResYDist(0,1) /*perpendicular to the stroke*/

/* Extreme Max */
YShift(5,12)

/* Extreme Min */
YShift(4,14)

Smooth()


    </glyphProgram>

    <glyphProgram name="uni20AD">
/* VTTTalk Unicode 0x20ad */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 12 12 */
/* CVT 13 4 */
/* Min and Max */
ResYAnchor(12,12)	/* min, CVT */
ResYAnchor(13,4)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
YInterpolate(13,5,12)
YAnchor(5)
ResYDist(5,4) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(13,1,12)
YAnchor(1)
ResYDist(1,0) /*perpendicular to the stroke*/

/* Extreme Max */
YShift(13,16)

/* Extreme Max */
YShift(13,22)

/* Extreme Min */
YShift(12,24)

Smooth()

    </glyphProgram>

    <glyphProgram name="uni20B1">
/* VTTTalk Unicode 0x20b1 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 16 12 */
/* CVT 17 4 */
/* Min and Max */
ResYAnchor(16,12)	/* min, CVT */
ResYAnchor(17,4)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(17,41) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(17,1,16)
YAnchor(1)
ResYDist(1,0) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
YInterpolate(17,9,16)
YAnchor(9)
ResYDist(9,8) /*perpendicular to the stroke*/

/* YDir: Stroke #3 */
YInterpolate(17,28,16)
YAnchor(28)
ResYDist(28,30) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni20B2">
/* VTTTalk Unicode 0x20b2 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 4 19  DISABLED for a NON-LATIN glyph */
/* CVT 14 17  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

/* YDir: Stroke #0 */
YInterpolate(1,42,0)
YAnchor(42)
ResYDist(42,43) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni20B5">
/* VTTTalk Unicode 0x20b5 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 4 19  DISABLED for a NON-LATIN glyph */
/* CVT 15 16  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

/* Contour #1 */
YShift(1,15) /* max */
YShift(0,4) /* min */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni20B9">
/* VTTTalk Unicode 0x20b9 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 11 16  DISABLED for a NON-LATIN glyph */
/* CVT 22 18  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(22)	/* min */
YAnchor(11)	/* max */

/* YDir: Stroke #0 */
YInterpolate(11,27,22)
YAnchor(27)
ResYDist(27,26) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(11,31,22)
YAnchor(31)
ResYDist(31,30) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
YInterpolate(11,25,22)
YAnchor(25)
ResYDist(25,0) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni20BA">
/* VTTTalk Unicode 0x20ba */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 8 18  DISABLED for a NON-LATIN glyph */
/* CVT 9 16  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(8)	/* min */
YAnchor(9)	/* max */

/* YDir: Stroke #0 */
ResYDist(8,15) /*perpendicular to the stroke*/

/* Contour #0 */
YShift(9,2) /* max */
YShift(8,0) /* min */

/* Contour #1 */
YShift(9,6) /* max */
YShift(8,4) /* min */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni20BC">
/* VTTTalk Unicode 0x20bc */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 26 18  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(10)	/* min */
YAnchor(1)	/* max */

/* Extreme Min */
YShift(10,26)

Smooth()


    </glyphProgram>

    <glyphProgram name="uni20BD">
/* VTTTalk Unicode 0x20bd */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 8 18  DISABLED for a NON-LATIN glyph */
/* CVT 9 16  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(8)	/* min */
YAnchor(9)	/* max */

/* YDir: Stroke #0 */
ResYDist(9,33) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(9,0,8)
YAnchor(0)
ResYDist(0,1) /*perpendicular to the stroke*/
YShift(0,20) /*along bottom edge*/
YShift(1,22) /*along top edge*/

/* YDir: Stroke #2 */
YInterpolate(9,4,8)
YAnchor(4)
ResYDist(4,5) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2113">
/* VTTTalk Unicode 0x2113 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 11 19 */
/* Min and Max */
ResYAnchor(11,19)	/* min, CVT */
YAnchor(34)	/* max */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(34,53) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(11,0) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2116">
/* VTTTalk Unicode 0x2116 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 18 */
/* CVT 1 16 */
/* CVT 28 17 */
/* Min and Max */
ResYAnchor(0,18)	/* min, CVT */
ResYAnchor(28,17)	/* max, CVT */

/* CVTs - beginning */
ResYAnchor(1,16)  /*knot, CVT*/
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(28,44) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(28,36,0)
YAnchor(36)
ResYDist(36,20) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
YInterpolate(28,17,0)
YAnchor(17)
ResYDist(17,16) /*perpendicular to the stroke*/

/* Extreme Max */
YShift(1,6)

/* Extreme Min */
YShift(0,12)

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2124">
/* VTTTalk Unicode 0x2124 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 5 18  DISABLED for a NON-LATIN glyph */
/* CVT 12 16  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(5)	/* min */
YAnchor(12)	/* max */

/* YDir: Stroke #0 */
ResYDist(12,11) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(5,2) /*perpendicular to the stroke*/

/* Extreme Max */
YShift(12,7)

/* Extreme Min */
YShift(5,15)

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2126">
/* VTTTalk Unicode 0x2126 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 11 18 */
/* Min and Max */
ResYAnchor(11,18)	/* min, CVT */
YAnchor(22)	/* max */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(22,0) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(11,12) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
YShift(11,33) /*stroke, CVT of another stroke*/
ResYDist(33,30) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2196">
/* VTTTalk Unicode 0x2196 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(1)	/* min */
YAnchor(6)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2197">
/* VTTTalk Unicode 0x2197 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(9)	/* min */
YAnchor(4)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2198">
/* VTTTalk Unicode 0x2198 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(6)	/* min */
YAnchor(1)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2199">
/* VTTTalk Unicode 0x2199 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(4)	/* min */
YAnchor(9)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni21E6">
/* VTTTalk Unicode 0x21e6 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(3)	/* min */
YAnchor(7)	/* max */

/* YDir: Stroke #0 */
YInterpolate(7,9,3)
YAnchor(9)
ResYDist(9,11) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(7,2,3)
YAnchor(2)
ResYDist(2,17) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni21E7">
/* VTTTalk Unicode 0x21e7 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 18  DISABLED for a NON-LATIN glyph */
/* CVT 4 17  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(0)	/* min */
YAnchor(4)	/* max */

/* YDir: Stroke #0 */
YInterpolate(4,12,0)
YAnchor(12)
ResYDist(12,8) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(4,17,0)
YAnchor(17)
ResYDist(17,2) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(0,10) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni21E8">
/* VTTTalk Unicode 0x21e8 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(6)	/* min */
YAnchor(2)	/* max */

/* YDir: Stroke #0 */
YInterpolate(2,0,6)
YAnchor(0)
ResYDist(0,10) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(2,9,6)
YAnchor(9)
ResYDist(9,11) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni21E9">
/* VTTTalk Unicode 0x21e9 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 17  DISABLED for a NON-LATIN glyph */
/* CVT 6 18  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(5)	/* min */
YAnchor(0)	/* max */

/* YDir: Stroke #0 */
ResYDist(0,10) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(0,17,5)
YAnchor(17)
ResYDist(17,2) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
YInterpolate(0,12,5)
YAnchor(12)
ResYDist(12,8) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni21EA">
/* VTTTalk Unicode 0x21ea */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 12 17  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(0)	/* min */
YAnchor(12)	/* max */

/* YDir: Stroke #0 */
YInterpolate(12,20,0)
YAnchor(20)
ResYDist(20,16) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(12,25,0)
YAnchor(25)
ResYDist(25,10) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
YInterpolate(12,8,0)
YAnchor(8)
ResYDist(8,18) /*perpendicular to the stroke*/

/* YDir: Stroke #3 */
YInterpolate(12,7,0)
YAnchor(7)
ResYDist(7,1) /*perpendicular to the stroke*/

/* YDir: Stroke #4 */
ResYDist(0,4) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2206">
/* VTTTalk Unicode 0x2206 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 3 18 */
/* Min and Max */
ResYAnchor(3,18)	/* min, CVT */
YAnchor(0)	/* max */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(3,9) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2215">
/* VTTTalk Unicode 0x2215 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(2)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2219">
/* VTTTalk Unicode 0x2219 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(8)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2318">
/* VTTTalk Unicode 0x2318 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 18  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(0)	/* min */
YAnchor(19)	/* max */

/* YDir: Stroke #0 */
YInterpolate(19,30,0)
YAnchor(30)
ResYDist(30,115) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(19,80) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
YInterpolate(19,24,0)
YAnchor(24)
ResYDist(24,91) /*perpendicular to the stroke*/
YShift(91,11) /*along bottom edge*/
YShift(91,39) /*along bottom edge*/
YShift(24,74) /*along top edge*/
YShift(24,106) /*along top edge*/

/* YDir: Stroke #3 */
YInterpolate(19,55,0)
YAnchor(55)
ResYDist(55,88) /*perpendicular to the stroke*/
YShift(55,66) /*along bottom edge*/
YShift(55,101) /*along bottom edge*/
YShift(88,8) /*along top edge*/
YShift(88,40) /*along top edge*/

/* YDir: Stroke #4 */
ResYDist(0,60) /*perpendicular to the stroke*/

/* YDir: Stroke #5 */
YInterpolate(19,49,0)
YAnchor(49)
ResYDist(49,92) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2325">
/* VTTTalk Unicode 0x2325 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 18  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(0)	/* min */
YAnchor(3)	/* max */

/* YDir: Stroke #0 */
ResYDist(3,2) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(3,9,0)
YAnchor(9)
ResYDist(9,8) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(0,5) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2326">
/* VTTTalk Unicode 0x2326 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(3)	/* min */
YAnchor(4)	/* max */

/* YDir: Stroke #0 */
ResYDist(4,8) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(3,9) /*perpendicular to the stroke*/

/* Contour #2 */
YShift(0,18) /* max */
YShift(2,12) /* min */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2327">
/* VTTTalk Unicode 0x2327 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(3)	/* min */
YAnchor(0)	/* max */

/* YDir: Stroke #0 */
ResYDist(0,7) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(3,4) /*perpendicular to the stroke*/

/* Contour #2 */
YShift(0,10) /* max */
YShift(2,16) /* min */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni232B">
/* VTTTalk Unicode 0x232b */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(3)	/* min */
YAnchor(0)	/* max */

/* YDir: Stroke #0 */
ResYDist(0,8) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(3,5) /*perpendicular to the stroke*/

/* Contour #2 */
YShift(0,12) /* max */
YShift(2,18) /* min */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni238B">
/* VTTTalk Unicode 0x238b */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(10)	/* min */
YAnchor(0)	/* max */

/* YDir: Stroke #0 */
YInterpolate(0,35,10)
YAnchor(35)
ResYDist(35,33) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(10,21) /*perpendicular to the stroke*/

/* Contour #2 */
YShift(0,39) /* max */
YShift(10,41) /* min */

/* Extreme Max */
YShift(0,34)

Smooth()


    </glyphProgram>

    <glyphProgram name="uni23CE">
/* VTTTalk Unicode 0x23ce */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(4)	/* min */
YAnchor(0)	/* max */

/* YDir: Stroke #0 */
ResYDist(0,12) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(0,14,4)
YAnchor(14)
ResYDist(14,10) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
YInterpolate(0,3,4)
YAnchor(3)
ResYDist(3,20) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2423">
/* VTTTalk Unicode 0x2423 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

/* YDir: Stroke #0 */
ResYDist(0,3) /*perpendicular to the stroke*/

/* Extreme Max */
YShift(1,6)

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2500">
/* VTTTalk Unicode 0x2500 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

/* YDir: Stroke #0 */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2501">
/* VTTTalk Unicode 0x2501 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2502">
/* VTTTalk Unicode 0x2502 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2503">
/* VTTTalk Unicode 0x2503 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2504">
/* VTTTalk Unicode 0x2504 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

/* YDir: Stroke #0 */
YInterpolate(1,8,0)
YAnchor(8)
ResYDist(8,9) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */

/* YDir: Stroke #2 */
YInterpolate(1,4,0)
YAnchor(4)
ResYDist(4,5) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2505">
/* VTTTalk Unicode 0x2505 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

/* Contour #1 */
YShift(1,5) /* max */
YShift(0,4) /* min */

/* Contour #2 */
YShift(1,9) /* max */
YShift(0,8) /* min */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2506">
/* VTTTalk Unicode 0x2506 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 1 19  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(0)	/* min */
YAnchor(9)	/* max */

/* Contour #1 */
YShift(9,5) /* max */
YShift(0,4) /* min */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2507">
/* VTTTalk Unicode 0x2507 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 1 19  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(0)	/* min */
YAnchor(9)	/* max */

/* Contour #1 */
YShift(9,5) /* max */
YShift(0,4) /* min */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2508">
/* VTTTalk Unicode 0x2508 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

/* YDir: Stroke #0 */
YInterpolate(1,12,0)
YAnchor(12)
ResYDist(12,13) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(1,8,0)
YAnchor(8)
ResYDist(8,9) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
YInterpolate(1,4,0)
YAnchor(4)
ResYDist(4,5) /*perpendicular to the stroke*/

/* YDir: Stroke #3 */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2509">
/* VTTTalk Unicode 0x2509 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

/* Contour #1 */
YShift(1,5) /* max */
YShift(0,4) /* min */

/* Contour #2 */
YShift(1,9) /* max */
YShift(0,8) /* min */

/* Contour #3 */
YShift(1,13) /* max */
YShift(0,12) /* min */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni250A">
/* VTTTalk Unicode 0x250a */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 4 19  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(0)	/* min */
YAnchor(13)	/* max */

/* Contour #1 */
YShift(13,5) /* max */
YShift(0,4) /* min */

/* Contour #2 */
YShift(13,9) /* max */
YShift(0,8) /* min */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni250B">
/* VTTTalk Unicode 0x250b */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 4 19  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(0)	/* min */
YAnchor(13)	/* max */

/* Contour #1 */
YShift(13,5) /* max */
YShift(0,4) /* min */

/* Contour #2 */
YShift(13,9) /* max */
YShift(0,8) /* min */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni250C">
/* VTTTalk Unicode 0x250c */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

/* YDir: Stroke #0 */
ResYDist(1,4) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni250D">
/* VTTTalk Unicode 0x250d */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni250E">
/* VTTTalk Unicode 0x250e */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

/* YDir: Stroke #0 */
ResYDist(1,4) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni250F">
/* VTTTalk Unicode 0x250f */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2510">
/* VTTTalk Unicode 0x2510 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(3)	/* max */

/* YDir: Stroke #0 */
ResYDist(3,2) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2511">
/* VTTTalk Unicode 0x2511 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(3)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2512">
/* VTTTalk Unicode 0x2512 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(3)	/* max */

/* YDir: Stroke #0 */
ResYDist(3,2) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2513">
/* VTTTalk Unicode 0x2513 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(3)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2514">
/* VTTTalk Unicode 0x2514 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

/* YDir: Stroke #0 */
ResYDist(0,3) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2515">
/* VTTTalk Unicode 0x2515 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2516">
/* VTTTalk Unicode 0x2516 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

/* YDir: Stroke #0 */
ResYDist(0,3) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2517">
/* VTTTalk Unicode 0x2517 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2518">
/* VTTTalk Unicode 0x2518 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(3)	/* max */

/* YDir: Stroke #0 */
ResYDist(0,1) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2519">
/* VTTTalk Unicode 0x2519 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(3)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni251A">
/* VTTTalk Unicode 0x251a */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(3)	/* max */

/* YDir: Stroke #0 */
ResYDist(0,1) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni251B">
/* VTTTalk Unicode 0x251b */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(3)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni251C">
/* VTTTalk Unicode 0x251c */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

/* YDir: Stroke #0 */
YInterpolate(1,6,0)
YAnchor(6)
ResYDist(6,3) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni251D">
/* VTTTalk Unicode 0x251d */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni251E">
/* VTTTalk Unicode 0x251e */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(3)	/* max */

/* YDir: Stroke #0 */
YInterpolate(3,8,0)
YAnchor(8)
ResYDist(8,5) /*perpendicular to the stroke*/
YShift(8,2) /*along bottom edge*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni251F">
/* VTTTalk Unicode 0x251f */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(3)	/* max */

/* YDir: Stroke #0 */
YInterpolate(3,8,0)
YAnchor(8)
ResYDist(8,5) /*perpendicular to the stroke*/
YShift(5,1) /*along top edge*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2520">
/* VTTTalk Unicode 0x2520 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

/* YDir: Stroke #0 */
YInterpolate(1,6,0)
YAnchor(6)
ResYDist(6,3) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2521">
/* VTTTalk Unicode 0x2521 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(3)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2522">
/* VTTTalk Unicode 0x2522 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(3)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2523">
/* VTTTalk Unicode 0x2523 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2524">
/* VTTTalk Unicode 0x2524 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(5)	/* max */

/* YDir: Stroke #0 */
YInterpolate(5,2,0)
YAnchor(2)
ResYDist(2,3) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2525">
/* VTTTalk Unicode 0x2525 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(5)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2526">
/* VTTTalk Unicode 0x2526 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(5)	/* max */

/* YDir: Stroke #0 */
YInterpolate(5,2,0)
YAnchor(2)
ResYDist(2,3) /*perpendicular to the stroke*/
YShift(2,8) /*along bottom edge*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2527">
/* VTTTalk Unicode 0x2527 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(5)	/* max */

/* YDir: Stroke #0 */
YInterpolate(5,2,0)
YAnchor(2)
ResYDist(2,3) /*perpendicular to the stroke*/
YShift(3,7) /*along top edge*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2528">
/* VTTTalk Unicode 0x2528 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(5)	/* max */

/* YDir: Stroke #0 */
YInterpolate(5,2,0)
YAnchor(2)
ResYDist(2,3) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2529">
/* VTTTalk Unicode 0x2529 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(5)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni252A">
/* VTTTalk Unicode 0x252a */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(5)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni252B">
/* VTTTalk Unicode 0x252b */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(5)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni252C">
/* VTTTalk Unicode 0x252c */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(3)	/* max */

/* YDir: Stroke #0 */
ResYDist(3,2) /*perpendicular to the stroke*/
YShift(2,6) /*along bottom edge*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni252D">
/* VTTTalk Unicode 0x252d */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(3)	/* max */

/* YDir: Stroke #0 */
YInterpolate(3,5,0)
YAnchor(5)
ResYDist(5,8) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni252E">
/* VTTTalk Unicode 0x252e */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(5)	/* max */

/* YDir: Stroke #0 */
YInterpolate(5,3,0)
YAnchor(3)
ResYDist(3,2) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni252F">
/* VTTTalk Unicode 0x252f */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(3)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2530">
/* VTTTalk Unicode 0x2530 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(3)	/* max */

/* YDir: Stroke #0 */
ResYDist(3,2) /*perpendicular to the stroke*/
YShift(2,6) /*along bottom edge*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2531">
/* VTTTalk Unicode 0x2531 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(3)	/* max */

/* YDir: Stroke #0 */
YInterpolate(3,5,0)
YAnchor(5)
ResYDist(5,8) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2532">
/* VTTTalk Unicode 0x2532 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(5)	/* max */

/* YDir: Stroke #0 */
YInterpolate(5,3,0)
YAnchor(3)
ResYDist(3,2) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2533">
/* VTTTalk Unicode 0x2533 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(3)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2534">
/* VTTTalk Unicode 0x2534 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(3)	/* max */

/* YDir: Stroke #0 */
ResYDist(0,1) /*perpendicular to the stroke*/
YShift(1,5) /*along top edge*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2535">
/* VTTTalk Unicode 0x2535 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(3)	/* max */

/* YDir: Stroke #0 */
YInterpolate(3,8,0)
YAnchor(8)
ResYDist(8,5) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2536">
/* VTTTalk Unicode 0x2536 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(5)	/* max */

/* YDir: Stroke #0 */
YInterpolate(5,2,0)
YAnchor(2)
ResYDist(2,3) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2537">
/* VTTTalk Unicode 0x2537 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(3)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2538">
/* VTTTalk Unicode 0x2538 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(3)	/* max */

/* YDir: Stroke #0 */
ResYDist(0,1) /*perpendicular to the stroke*/
YShift(1,5) /*along top edge*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2539">
/* VTTTalk Unicode 0x2539 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(3)	/* max */

/* YDir: Stroke #0 */
YInterpolate(3,8,0)
YAnchor(8)
ResYDist(8,5) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni253A">
/* VTTTalk Unicode 0x253a */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(5)	/* max */

/* YDir: Stroke #0 */
YInterpolate(5,2,0)
YAnchor(2)
ResYDist(2,3) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni253B">
/* VTTTalk Unicode 0x253b */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(3)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni253C">
/* VTTTalk Unicode 0x253c */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(5)	/* max */

/* YDir: Stroke #0 */
YInterpolate(5,2,0)
YAnchor(2)
ResYDist(2,3) /*perpendicular to the stroke*/
YShift(2,10) /*along bottom edge*/
YShift(3,7) /*along top edge*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni253D">
/* VTTTalk Unicode 0x253d */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(5)	/* max */

/* YDir: Stroke #0 */
YInterpolate(5,10,0)
YAnchor(10)
ResYDist(10,7) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni253E">
/* VTTTalk Unicode 0x253e */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(5)	/* max */

/* YDir: Stroke #0 */
YInterpolate(5,2,0)
YAnchor(2)
ResYDist(2,3) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni253F">
/* VTTTalk Unicode 0x253f */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(5)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2540">
/* VTTTalk Unicode 0x2540 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(5)	/* max */

/* YDir: Stroke #0 */
YInterpolate(5,2,0)
YAnchor(2)
ResYDist(2,3) /*perpendicular to the stroke*/
YShift(2,10) /*along bottom edge*/
YShift(3,7) /*along top edge*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2541">
/* VTTTalk Unicode 0x2541 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(5)	/* max */

/* YDir: Stroke #0 */
YInterpolate(5,2,0)
YAnchor(2)
ResYDist(2,3) /*perpendicular to the stroke*/
YShift(2,10) /*along bottom edge*/
YShift(3,7) /*along top edge*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2542">
/* VTTTalk Unicode 0x2542 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(5)	/* max */

/* YDir: Stroke #0 */
YInterpolate(5,2,0)
YAnchor(2)
ResYDist(2,3) /*perpendicular to the stroke*/
YShift(2,10) /*along bottom edge*/
YShift(3,7) /*along top edge*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2543">
/* VTTTalk Unicode 0x2543 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(5)	/* max */

/* YDir: Stroke #0 */
YInterpolate(5,10,0)
YAnchor(10)
ResYDist(10,7) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2544">
/* VTTTalk Unicode 0x2544 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(7)	/* max */

/* YDir: Stroke #0 */
YInterpolate(7,4,0)
YAnchor(4)
ResYDist(4,5) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2545">
/* VTTTalk Unicode 0x2545 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(5)	/* max */

/* YDir: Stroke #0 */
YInterpolate(5,12,0)
YAnchor(12)
ResYDist(12,9) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2546">
/* VTTTalk Unicode 0x2546 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(7)	/* max */

/* YDir: Stroke #0 */
YInterpolate(7,2,0)
YAnchor(2)
ResYDist(2,3) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2547">
/* VTTTalk Unicode 0x2547 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(5)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2548">
/* VTTTalk Unicode 0x2548 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(5)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2549">
/* VTTTalk Unicode 0x2549 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(5)	/* max */

/* YDir: Stroke #0 */
YInterpolate(5,10,0)
YAnchor(10)
ResYDist(10,7) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni254A">
/* VTTTalk Unicode 0x254a */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(5)	/* max */

/* YDir: Stroke #0 */
YInterpolate(5,2,0)
YAnchor(2)
ResYDist(2,3) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni254B">
/* VTTTalk Unicode 0x254b */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(5)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni254C">
/* VTTTalk Unicode 0x254c */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

/* YDir: Stroke #0 */
YInterpolate(1,4,0)
YAnchor(4)
ResYDist(4,5) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni254D">
/* VTTTalk Unicode 0x254d */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

/* Contour #1 */
YShift(1,5) /* max */
YShift(0,4) /* min */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni254E">
/* VTTTalk Unicode 0x254e */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(5)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni254F">
/* VTTTalk Unicode 0x254f */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(5)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2550">
/* VTTTalk Unicode 0x2550 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(5)	/* max */

/* YDir: Stroke #0 */
ResYDist(5,4) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,1) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2551">
/* VTTTalk Unicode 0x2551 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

/* Contour #1 */
YShift(1,5) /* max */
YShift(0,4) /* min */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2552">
/* VTTTalk Unicode 0x2552 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

/* YDir: Stroke #0 */
ResYDist(1,4) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(1,5,0)
YAnchor(5)
ResYDist(5,8) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2553">
/* VTTTalk Unicode 0x2553 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

/* YDir: Stroke #0 */
ResYDist(1,8) /*perpendicular to the stroke*/
YShift(8,4) /*along bottom edge*/

/* Extreme Min */
YShift(0,6)

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2554">
/* VTTTalk Unicode 0x2554 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

/* YDir: Stroke #0 */
ResYDist(1,4) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(1,7,0)
YAnchor(7)
ResYDist(7,10) /*perpendicular to the stroke*/

/* Extreme Min */
YShift(0,11)

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2555">
/* VTTTalk Unicode 0x2555 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(7)	/* max */

/* YDir: Stroke #0 */
ResYDist(7,6) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(7,3,0)
YAnchor(3)
ResYDist(3,2) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2556">
/* VTTTalk Unicode 0x2556 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(3)	/* max */

/* YDir: Stroke #0 */
ResYDist(3,2) /*perpendicular to the stroke*/
YShift(2,8) /*along bottom edge*/

/* Extreme Min */
YShift(0,6)

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2557">
/* VTTTalk Unicode 0x2557 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(9)	/* max */

/* YDir: Stroke #0 */
ResYDist(9,8) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(9,3,0)
YAnchor(3)
ResYDist(3,2) /*perpendicular to the stroke*/

/* Extreme Min */
YShift(0,11)

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2558">
/* VTTTalk Unicode 0x2558 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

/* YDir: Stroke #0 */
YInterpolate(1,6,0)
YAnchor(6)
ResYDist(6,3) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,7) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2559">
/* VTTTalk Unicode 0x2559 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

/* YDir: Stroke #0 */
ResYDist(0,3) /*perpendicular to the stroke*/
YShift(3,7) /*along top edge*/

/* Extreme Max */
YShift(1,6)

Smooth()

    </glyphProgram>

    <glyphProgram name="uni255A">
/* VTTTalk Unicode 0x255a */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

/* YDir: Stroke #0 */
YInterpolate(1,6,0)
YAnchor(6)
ResYDist(6,9) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,3) /*perpendicular to the stroke*/

/* Extreme Max */
YShift(1,8)

Smooth()


    </glyphProgram>

    <glyphProgram name="uni255B">
/* VTTTalk Unicode 0x255b */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(7)	/* max */

/* YDir: Stroke #0 */
YInterpolate(7,4,0)
YAnchor(4)
ResYDist(4,5) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,1) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni255C">
/* VTTTalk Unicode 0x255c */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(3)	/* max */

/* YDir: Stroke #0 */
ResYDist(0,1) /*perpendicular to the stroke*/
YShift(1,5) /*along top edge*/

/* Extreme Max */
YShift(3,8)

Smooth()

    </glyphProgram>

    <glyphProgram name="uni255D">
/* VTTTalk Unicode 0x255d */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(3)	/* max */

/* YDir: Stroke #0 */
YInterpolate(3,6,0)
YAnchor(6)
ResYDist(6,7) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,1) /*perpendicular to the stroke*/

/* Extreme Max */
YShift(3,10)

Smooth()

    </glyphProgram>

    <glyphProgram name="uni255E">
/* VTTTalk Unicode 0x255e */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

/* YDir: Stroke #0 */
YInterpolate(1,3,0)
YAnchor(3)
ResYDist(3,6) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(1,10,0)
YAnchor(10)
ResYDist(10,7) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni255F">
/* VTTTalk Unicode 0x255f */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

/* YDir: Stroke #0 */
YInterpolate(1,10,0)
YAnchor(10)
ResYDist(10,7) /*perpendicular to the stroke*/

/* Extreme Max */
YShift(1,6)

/* Extreme Min */
YShift(0,11)

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2560">
/* VTTTalk Unicode 0x2560 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

/* YDir: Stroke #0 */
YInterpolate(1,13,0)
YAnchor(13)
ResYDist(13,10) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(1,8,0)
YAnchor(8)
ResYDist(8,5) /*perpendicular to the stroke*/

/* Extreme Min */
YShift(0,9)

/* Extreme Max */
YShift(1,12)

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2561">
/* VTTTalk Unicode 0x2561 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(9)	/* max */

/* YDir: Stroke #0 */
YInterpolate(9,7,0)
YAnchor(7)
ResYDist(7,6) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(9,2,0)
YAnchor(2)
ResYDist(2,3) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2562">
/* VTTTalk Unicode 0x2562 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(5)	/* max */

/* YDir: Stroke #0 */
YInterpolate(5,2,0)
YAnchor(2)
ResYDist(2,3) /*perpendicular to the stroke*/

/* Contour #1 */
YShift(5,9) /* max */
YShift(0,8) /* min */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2563">
/* VTTTalk Unicode 0x2563 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(7)	/* max */

/* YDir: Stroke #0 */
YInterpolate(7,11,0)
YAnchor(11)
ResYDist(11,10) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(7,2,0)
YAnchor(2)
ResYDist(2,3) /*perpendicular to the stroke*/

/* Extreme Min */
YShift(0,9)

/* Extreme Max */
YShift(7,14)

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2564">
/* VTTTalk Unicode 0x2564 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(9)	/* max */

/* YDir: Stroke #0 */
ResYDist(9,8) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(9,3,0)
YAnchor(3)
ResYDist(3,2) /*perpendicular to the stroke*/
YShift(2,6) /*along bottom edge*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2565">
/* VTTTalk Unicode 0x2565 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(3)	/* max */

/* YDir: Stroke #0 */
ResYDist(3,2) /*perpendicular to the stroke*/
YShift(2,10) /*along bottom edge*/
YShift(2,6) /*along bottom edge*/

/* Extreme Min */
YShift(0,8)

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2566">
/* VTTTalk Unicode 0x2566 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(13)	/* max */

/* YDir: Stroke #0 */
ResYDist(13,12) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(13,7,0)
YAnchor(7)
ResYDist(7,10) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
YInterpolate(13,3,0)
YAnchor(3)
ResYDist(3,2) /*perpendicular to the stroke*/

/* Extreme Min */
YShift(0,11)

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2567">
/* VTTTalk Unicode 0x2567 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(7)	/* max */

/* YDir: Stroke #0 */
YInterpolate(7,4,0)
YAnchor(4)
ResYDist(4,5) /*perpendicular to the stroke*/
YShift(5,9) /*along top edge*/

/* YDir: Stroke #1 */
ResYDist(0,1) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2568">
/* VTTTalk Unicode 0x2568 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(3)	/* max */

/* YDir: Stroke #0 */
ResYDist(0,1) /*perpendicular to the stroke*/
YShift(1,5) /*along top edge*/
YShift(1,9) /*along top edge*/

/* Extreme Max */
YShift(3,8)

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2569">
/* VTTTalk Unicode 0x2569 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(7)	/* max */

/* YDir: Stroke #0 */
YInterpolate(7,10,0)
YAnchor(10)
ResYDist(10,13) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(7,4,0)
YAnchor(4)
ResYDist(4,5) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(0,1) /*perpendicular to the stroke*/

/* Extreme Max */
YShift(7,12)

Smooth()

    </glyphProgram>

    <glyphProgram name="uni256A">
/* VTTTalk Unicode 0x256a */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(9)	/* max */

/* YDir: Stroke #0 */
YInterpolate(9,7,0)
YAnchor(7)
ResYDist(7,6) /*perpendicular to the stroke*/
YShift(6,14) /*along bottom edge*/
YShift(7,11) /*along top edge*/

/* YDir: Stroke #1 */
YInterpolate(9,2,0)
YAnchor(2)
ResYDist(2,3) /*perpendicular to the stroke*/
YShift(2,18) /*along bottom edge*/
YShift(3,15) /*along top edge*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni256B">
/* VTTTalk Unicode 0x256b */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(5)	/* max */

/* YDir: Stroke #0 */
YInterpolate(5,2,0)
YAnchor(2)
ResYDist(2,3) /*perpendicular to the stroke*/
YShift(2,18) /*along bottom edge*/
YShift(2,14) /*along bottom edge*/
YShift(3,7) /*along top edge*/
YShift(3,11) /*along top edge*/

/* Extreme Max */
YShift(5,10)

/* Extreme Min */
YShift(0,16)

Smooth()

    </glyphProgram>

    <glyphProgram name="uni256C">
/* VTTTalk Unicode 0x256c */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(15)	/* max */

/* YDir: Stroke #0 */
YInterpolate(15,21,0)
YAnchor(21)
ResYDist(21,18) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(15,13,0)
YAnchor(13)
ResYDist(13,12) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
YInterpolate(15,10,0)
YAnchor(10)
ResYDist(10,7) /*perpendicular to the stroke*/

/* YDir: Stroke #3 */
YInterpolate(15,2,0)
YAnchor(2)
ResYDist(2,3) /*perpendicular to the stroke*/

/* Extreme Min */
YShift(0,11)

/* Extreme Max */
YShift(15,20)

Smooth()

    </glyphProgram>

    <glyphProgram name="uni256D">
/* VTTTalk Unicode 0x256d */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(8)	/* max */

/* YDir: Stroke #0 */
ResYDist(8,11) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni256E">
/* VTTTalk Unicode 0x256e */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(15)	/* min */
YAnchor(7)	/* max */

/* YDir: Stroke #0 */
ResYDist(7,6) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni256F">
/* VTTTalk Unicode 0x256f */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(9)	/* min */
YAnchor(0)	/* max */

/* YDir: Stroke #0 */
ResYDist(9,10) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2570">
/* VTTTalk Unicode 0x2570 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(8)	/* min */
YAnchor(15)	/* max */

/* YDir: Stroke #0 */
ResYDist(8,5) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2571">
/* VTTTalk Unicode 0x2571 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(2)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2572">
/* VTTTalk Unicode 0x2572 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(2)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2573">
/* VTTTalk Unicode 0x2573 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(2)	/* max */

/* Contour #1 */
YShift(2,8) /* max */
YShift(0,6) /* min */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2574">
/* VTTTalk Unicode 0x2574 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

/* YDir: Stroke #0 */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2575">
/* VTTTalk Unicode 0x2575 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2576">
/* VTTTalk Unicode 0x2576 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

/* YDir: Stroke #0 */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2577">
/* VTTTalk Unicode 0x2577 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2578">
/* VTTTalk Unicode 0x2578 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2579">
/* VTTTalk Unicode 0x2579 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni257A">
/* VTTTalk Unicode 0x257a */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni257B">
/* VTTTalk Unicode 0x257b */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni257C">
/* VTTTalk Unicode 0x257c */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(5)	/* max */

/* YDir: Stroke #0 */
YInterpolate(5,2,0)
YAnchor(2)
ResYDist(2,3) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni257D">
/* VTTTalk Unicode 0x257d */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(3)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni257E">
/* VTTTalk Unicode 0x257e */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

/* YDir: Stroke #0 */
YInterpolate(1,6,0)
YAnchor(6)
ResYDist(6,3) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni257F">
/* VTTTalk Unicode 0x257f */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(3)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2581">
/* VTTTalk Unicode 0x2581 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2582">
/* VTTTalk Unicode 0x2582 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2583">
/* VTTTalk Unicode 0x2583 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2585">
/* VTTTalk Unicode 0x2585 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2586">
/* VTTTalk Unicode 0x2586 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2587">
/* VTTTalk Unicode 0x2587 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2589">
/* VTTTalk Unicode 0x2589 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni258A">
/* VTTTalk Unicode 0x258a */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni258B">
/* VTTTalk Unicode 0x258b */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni258D">
/* VTTTalk Unicode 0x258d */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni258E">
/* VTTTalk Unicode 0x258e */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni258F">
/* VTTTalk Unicode 0x258f */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2594">
/* VTTTalk Unicode 0x2594 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2595">
/* VTTTalk Unicode 0x2595 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2596">
/* VTTTalk Unicode 0x2596 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2597">
/* VTTTalk Unicode 0x2597 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2598">
/* VTTTalk Unicode 0x2598 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2599">
/* VTTTalk Unicode 0x2599 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni259A">
/* VTTTalk Unicode 0x259a */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(3)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni259B">
/* VTTTalk Unicode 0x259b */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni259C">
/* VTTTalk Unicode 0x259c */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(3)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni259D">
/* VTTTalk Unicode 0x259d */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni259E">
/* VTTTalk Unicode 0x259e */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(5)	/* max */

/* YDir: Stroke #0 */
YInterpolate(5,4,0)
YAnchor(4)
ResYDist(4,1) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni259F">
/* VTTTalk Unicode 0x259f */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(3)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni25C6">
/* VTTTalk Unicode 0x25c6 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(2)	/* min */
YAnchor(0)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni25C7">
/* VTTTalk Unicode 0x25c7 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(2)	/* min */
YAnchor(0)	/* max */

/* Contour #1 */
YShift(0,7) /* max */
YShift(2,5) /* min */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni25CF">
/* VTTTalk Unicode 0x25cf */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(10)	/* max */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2639">
/* VTTTalk Unicode 0x2639 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(10)	/* max */

/* YDir: Stroke #0 */
ResYDist(10,30) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(10,48,0)
YAnchor(48)
ResYDist(48,40) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(0,20) /*perpendicular to the stroke*/

/* Contour #3 */
YShift(10,62) /* max */
YShift(48,56) /* min */

/* Contour #4 */
YShift(10,74) /* max */
YShift(48,68) /* min */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2713">
/* VTTTalk Unicode 0x2713 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 17 */
/* CVT 6 19 */
/* Min and Max */
ResYAnchor(6,19)	/* min, CVT */
ResYAnchor(0,17)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


Smooth()


    </glyphProgram>

    <glyphProgram name="uni2714">
/* VTTTalk Unicode 0x2714 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 17  DISABLED for a NON-LATIN glyph */
/* CVT 6 18  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(6)	/* min */
YAnchor(0)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2717">
/* VTTTalk Unicode 0x2717 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 15 16  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(0)	/* min */
YAnchor(15)	/* max */

/* Extreme Min */
YShift(0,11)

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2718">
/* VTTTalk Unicode 0x2718 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 14 18  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(14)	/* min */
YAnchor(20)	/* max */

/* Contour #0 */
YShift(20,6) /* max */
YShift(14,0) /* min */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2B05">
/* VTTTalk Unicode 0x2b05 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(2)	/* min */
YAnchor(6)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2B06">
/* VTTTalk Unicode 0x2b06 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 4 18  DISABLED for a NON-LATIN glyph */
/* CVT 8 17  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(3)	/* min */
YAnchor(8)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2B07">
/* VTTTalk Unicode 0x2b07 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 2 18  DISABLED for a NON-LATIN glyph */
/* CVT 6 17  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(1)	/* min */
YAnchor(6)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2B95">
/* VTTTalk Unicode 0x2b95 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(7)	/* min */
YAnchor(3)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2E12">
/* VTTTalk Unicode 0x2e12 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(10)	/* max */

Smooth()

    </glyphProgram>

    <glyphProgram name="uniFFFD">
/* VTTTalk Unicode 0xfffd */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 18  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(0)	/* min */
YAnchor(3)	/* max */

/* YDir: Stroke #0 */
YInterpolate(3,14,0)
YAnchor(14)
ResYDist(14,20) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,8) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="upblock">
/* VTTTalk Unicode 0x2580 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* Min and Max */
YAnchor(0)	/* min */
YAnchor(1)	/* max */

Smooth()


    </glyphProgram>

    <glyphProgram name="v">
/* VTTTalk Unicode 0x76 (v) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 10 */
/* CVT 1 6 */
/* Min and Max */
ResYAnchor(0,10)	/* min, CVT */
ResYAnchor(1,6)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* Extreme Max */
YShift(1,10)

Smooth()


    </glyphProgram>

    <glyphProgram name="w">
/* VTTTalk Unicode 0x77 (w) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 10 */
/* CVT 1 6 */
/* Min and Max */
ResYAnchor(0,10)	/* min, CVT */
ResYAnchor(1,6)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* Extreme Max */
YShift(1,14)

/* Extreme Max */
YShift(1,12)

/* Extreme Min */
YShift(0,19)

Smooth()


    </glyphProgram>

    <glyphProgram name="x">
/* VTTTalk Unicode 0x78 (x) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 10 */
/* CVT 2 6 */
/* Min and Max */
ResYAnchor(0,10)	/* min, CVT */
ResYAnchor(2,6)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* Extreme Max */
YShift(2,6)

/* Extreme Min */
YShift(0,9)

Smooth()


    </glyphProgram>

    <glyphProgram name="y">
/* VTTTalk Unicode 0x79 (y) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 15 */
/* CVT 26 6 */
/* Min and Max */
ResYAnchor(0,15)	/* min, CVT */
ResYAnchor(26,6)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(0,8) /*perpendicular to the stroke*/

/* Extreme Max */
YShift(26,18)

Smooth()


    </glyphProgram>

    <glyphProgram name="yen">
/* VTTTalk Unicode 0xa5 */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 16 12 */
/* CVT 23 4 */
/* Min and Max */
ResYAnchor(16,12)	/* min, CVT */
ResYAnchor(23,4)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
YInterpolate(23,1,16)
YAnchor(1)
ResYDist(1,2) /*perpendicular to the stroke*/
YShift(1,7) /*along bottom edge*/
YShift(2,4) /*along top edge*/

/* YDir: Stroke #1 */
YInterpolate(23,9,16)
YAnchor(9)
ResYDist(9,10) /*perpendicular to the stroke*/
YShift(9,15) /*along bottom edge*/
YShift(10,12) /*along top edge*/

/* Extreme Max */
YShift(23,20)

Smooth()

    </glyphProgram>

    <glyphProgram name="z">
/* VTTTalk Unicode 0x7a (z) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 10 */
/* CVT 4 6 */
/* Min and Max */
ResYAnchor(0,10)	/* min, CVT */
ResYAnchor(4,6)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(4,3) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,7) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="zero">
/* VTTTalk Unicode 0x30 (0) */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 4 13 */
/* CVT 12 5 */
/* Min and Max */
ResYAnchor(4,13)	/* min, CVT */
ResYAnchor(12,5)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(12,29) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(4,21) /*perpendicular to the stroke*/

/* Contour #0 */
YShift(12,1) /* max */
YShift(4,3) /* min */

Smooth()


    </glyphProgram>

    <glyphProgram name="zero.dnom.zero">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 12 19  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(12)	/* min */
YAnchor(20)	/* max */

/* YDir: Stroke #0 */
ResYDist(20,36) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(12,28) /*perpendicular to the stroke*/

/* Contour #0 */
YShift(20,6) /* max */
YShift(12,0) /* min */

Smooth()


    </glyphProgram>

    <glyphProgram name="zero.numr.zero">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 20 17  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(12)	/* min */
YAnchor(20)	/* max */

/* YDir: Stroke #0 */
ResYDist(20,36) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(12,28) /*perpendicular to the stroke*/

/* Contour #0 */
YShift(20,6) /* max */
YShift(12,0) /* min */

Smooth()


    </glyphProgram>

    <glyphProgram name="zero.ss02">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 19  DISABLED for a NON-LATIN glyph */
/* CVT 8 16  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(0)	/* min */
YAnchor(8)	/* max */

/* YDir: Stroke #0 */
ResYDist(8,25) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,17) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="zero.zero">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Apr 27 04:23:05 2025 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 16 19  DISABLED for a NON-LATIN glyph */
/* CVT 24 16  DISABLED for a NON-LATIN glyph */
/* Min and Max */
YAnchor(16)	/* min */
YAnchor(24)	/* max */

/* YDir: Stroke #0 */
ResYDist(24,41) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(16,33) /*perpendicular to the stroke*/

/* Contour #0 */
YShift(24,8) /* max */
YShift(16,0) /* min */

Smooth()


    </glyphProgram>

  </TSI3>

  <TSI5>
    <glyphgroup name=".notdef" value="1"/>
    <glyphgroup name="A" value="2"/>
    <glyphgroup name="AE" value="2"/>
    <glyphgroup name="AEacute" value="2"/>
    <glyphgroup name="Aacute" value="2"/>
    <glyphgroup name="Abreve" value="2"/>
    <glyphgroup name="Acircumflex" value="2"/>
    <glyphgroup name="Adieresis" value="2"/>
    <glyphgroup name="Agrave" value="2"/>
    <glyphgroup name="Amacron" value="2"/>
    <glyphgroup name="Aogonek" value="2"/>
    <glyphgroup name="Aring" value="2"/>
    <glyphgroup name="Aringacute" value="2"/>
    <glyphgroup name="Atilde" value="2"/>
    <glyphgroup name="B" value="2"/>
    <glyphgroup name="C" value="2"/>
    <glyphgroup name="CR" value="1"/>
    <glyphgroup name="Cacute" value="2"/>
    <glyphgroup name="Ccaron" value="2"/>
    <glyphgroup name="Ccedilla" value="2"/>
    <glyphgroup name="Ccircumflex" value="2"/>
    <glyphgroup name="Cdotaccent" value="2"/>
    <glyphgroup name="D" value="2"/>
    <glyphgroup name="Dcaron" value="2"/>
    <glyphgroup name="Dcroat" value="2"/>
    <glyphgroup name="E" value="2"/>
    <glyphgroup name="Eacute" value="2"/>
    <glyphgroup name="Ebreve" value="2"/>
    <glyphgroup name="Ecaron" value="2"/>
    <glyphgroup name="Ecircumflex" value="2"/>
    <glyphgroup name="Edieresis" value="2"/>
    <glyphgroup name="Edotaccent" value="2"/>
    <glyphgroup name="Egrave" value="2"/>
    <glyphgroup name="Emacron" value="2"/>
    <glyphgroup name="Eng" value="2"/>
    <glyphgroup name="Eogonek" value="2"/>
    <glyphgroup name="Eth" value="2"/>
    <glyphgroup name="Euro" value="4"/>
    <glyphgroup name="F" value="2"/>
    <glyphgroup name="G" value="2"/>
    <glyphgroup name="Gbreve" value="2"/>
    <glyphgroup name="Gcaron" value="2"/>
    <glyphgroup name="Gcircumflex" value="2"/>
    <glyphgroup name="Gdotaccent" value="2"/>
    <glyphgroup name="H" value="2"/>
    <glyphgroup name="Hbar" value="2"/>
    <glyphgroup name="Hcircumflex" value="2"/>
    <glyphgroup name="I" value="2"/>
    <glyphgroup name="Iacute" value="2"/>
    <glyphgroup name="Ibreve" value="2"/>
    <glyphgroup name="Icircumflex" value="2"/>
    <glyphgroup name="Idieresis" value="2"/>
    <glyphgroup name="Idotaccent" value="2"/>
    <glyphgroup name="Igrave" value="2"/>
    <glyphgroup name="Imacron" value="2"/>
    <glyphgroup name="Iogonek" value="2"/>
    <glyphgroup name="Itilde" value="2"/>
    <glyphgroup name="J" value="2"/>
    <glyphgroup name="Jcircumflex" value="2"/>
    <glyphgroup name="K" value="2"/>
    <glyphgroup name="L" value="2"/>
    <glyphgroup name="Lacute" value="2"/>
    <glyphgroup name="Lcaron" value="2"/>
    <glyphgroup name="Ldot" value="2"/>
    <glyphgroup name="Lslash" value="2"/>
    <glyphgroup name="M" value="2"/>
    <glyphgroup name="N" value="2"/>
    <glyphgroup name="NULL" value="1"/>
    <glyphgroup name="Nacute" value="2"/>
    <glyphgroup name="Ncaron" value="2"/>
    <glyphgroup name="Ntilde" value="2"/>
    <glyphgroup name="O" value="2"/>
    <glyphgroup name="OE" value="2"/>
    <glyphgroup name="Oacute" value="2"/>
    <glyphgroup name="Obreve" value="2"/>
    <glyphgroup name="Ocircumflex" value="2"/>
    <glyphgroup name="Odieresis" value="2"/>
    <glyphgroup name="Ograve" value="2"/>
    <glyphgroup name="Ohorn" value="2"/>
    <glyphgroup name="Ohungarumlaut" value="2"/>
    <glyphgroup name="Omacron" value="2"/>
    <glyphgroup name="Oslash" value="2"/>
    <glyphgroup name="Oslashacute" value="2"/>
    <glyphgroup name="Otilde" value="2"/>
    <glyphgroup name="P" value="2"/>
    <glyphgroup name="Q" value="2"/>
    <glyphgroup name="R" value="2"/>
    <glyphgroup name="Racute" value="2"/>
    <glyphgroup name="Rcaron" value="2"/>
    <glyphgroup name="S" value="2"/>
    <glyphgroup name="Sacute" value="2"/>
    <glyphgroup name="Scaron" value="2"/>
    <glyphgroup name="Scedilla" value="2"/>
    <glyphgroup name="Scircumflex" value="2"/>
    <glyphgroup name="T" value="2"/>
    <glyphgroup name="Tbar" value="2"/>
    <glyphgroup name="Tcaron" value="2"/>
    <glyphgroup name="Thorn" value="2"/>
    <glyphgroup name="U" value="2"/>
    <glyphgroup name="U.i" value="1"/>
    <glyphgroup name="Uacute" value="2"/>
    <glyphgroup name="Ubreve" value="2"/>
    <glyphgroup name="Ucircumflex" value="2"/>
    <glyphgroup name="Udieresis" value="2"/>
    <glyphgroup name="Ugrave" value="2"/>
    <glyphgroup name="Uhorn" value="2"/>
    <glyphgroup name="Uhungarumlaut" value="2"/>
    <glyphgroup name="Umacron" value="2"/>
    <glyphgroup name="Uogonek" value="2"/>
    <glyphgroup name="Uring" value="2"/>
    <glyphgroup name="Utilde" value="2"/>
    <glyphgroup name="V" value="2"/>
    <glyphgroup name="W" value="2"/>
    <glyphgroup name="Wacute" value="2"/>
    <glyphgroup name="Wcircumflex" value="2"/>
    <glyphgroup name="Wdieresis" value="2"/>
    <glyphgroup name="Wgrave" value="2"/>
    <glyphgroup name="X" value="2"/>
    <glyphgroup name="Y" value="2"/>
    <glyphgroup name="Yacute" value="2"/>
    <glyphgroup name="Ycircumflex" value="2"/>
    <glyphgroup name="Ydieresis" value="2"/>
    <glyphgroup name="Ygrave" value="2"/>
    <glyphgroup name="Z" value="2"/>
    <glyphgroup name="Zacute" value="2"/>
    <glyphgroup name="Zcaron" value="2"/>
    <glyphgroup name="Zdotaccent" value="2"/>
    <glyphgroup name="a" value="3"/>
    <glyphgroup name="aacute" value="3"/>
    <glyphgroup name="abreve" value="3"/>
    <glyphgroup name="acircumflex" value="3"/>
    <glyphgroup name="acute" value="1"/>
    <glyphgroup name="acute.case" value="1"/>
    <glyphgroup name="acutecomb" value="1"/>
    <glyphgroup name="acutecomb.case" value="1"/>
    <glyphgroup name="adieresis" value="3"/>
    <glyphgroup name="ae" value="3"/>
    <glyphgroup name="aeacute" value="3"/>
    <glyphgroup name="agrave" value="3"/>
    <glyphgroup name="amacron" value="3"/>
    <glyphgroup name="ampersand" value="1"/>
    <glyphgroup name="aogonek" value="3"/>
    <glyphgroup name="approxequal" value="1"/>
    <glyphgroup name="aring" value="3"/>
    <glyphgroup name="aringacute" value="3"/>
    <glyphgroup name="arrowboth" value="1"/>
    <glyphgroup name="arrowdown" value="1"/>
    <glyphgroup name="arrowleft" value="1"/>
    <glyphgroup name="arrowright" value="1"/>
    <glyphgroup name="arrowup" value="1"/>
    <glyphgroup name="arrowupdn" value="1"/>
    <glyphgroup name="asciicircum" value="1"/>
    <glyphgroup name="asciicircum.ss01" value="1"/>
    <glyphgroup name="asciitilde" value="1"/>
    <glyphgroup name="asciitilde.ss01" value="1"/>
    <glyphgroup name="asterisk" value="1"/>
    <glyphgroup name="asterisk.ss01" value="1"/>
    <glyphgroup name="asteriskmath" value="1"/>
    <glyphgroup name="at" value="1"/>
    <glyphgroup name="atilde" value="3"/>
    <glyphgroup name="b" value="3"/>
    <glyphgroup name="backslash" value="1"/>
    <glyphgroup name="bar" value="1"/>
    <glyphgroup name="block" value="1"/>
    <glyphgroup name="braceleft" value="1"/>
    <glyphgroup name="braceright" value="1"/>
    <glyphgroup name="bracketleft" value="1"/>
    <glyphgroup name="bracketright" value="1"/>
    <glyphgroup name="breve" value="1"/>
    <glyphgroup name="breve.case" value="1"/>
    <glyphgroup name="brokenbar" value="1"/>
    <glyphgroup name="bullet" value="1"/>
    <glyphgroup name="c" value="3"/>
    <glyphgroup name="cacute" value="3"/>
    <glyphgroup name="caron" value="1"/>
    <glyphgroup name="caron.case" value="1"/>
    <glyphgroup name="ccaron" value="3"/>
    <glyphgroup name="ccedilla" value="3"/>
    <glyphgroup name="ccircumflex" value="3"/>
    <glyphgroup name="cdotaccent" value="3"/>
    <glyphgroup name="cedilla" value="1"/>
    <glyphgroup name="cent" value="4"/>
    <glyphgroup name="circle" value="1"/>
    <glyphgroup name="circleplus" value="1"/>
    <glyphgroup name="circumflex" value="1"/>
    <glyphgroup name="club" value="1"/>
    <glyphgroup name="colon" value="1"/>
    <glyphgroup name="colonmonetary" value="4"/>
    <glyphgroup name="comma" value="1"/>
    <glyphgroup name="copyright" value="1"/>
    <glyphgroup name="currency" value="4"/>
    <glyphgroup name="d" value="3"/>
    <glyphgroup name="dagger" value="1"/>
    <glyphgroup name="daggerdbl" value="1"/>
    <glyphgroup name="dcaron" value="3"/>
    <glyphgroup name="dcroat" value="3"/>
    <glyphgroup name="degree" value="1"/>
    <glyphgroup name="diamond" value="1"/>
    <glyphgroup name="dieresis" value="1"/>
    <glyphgroup name="dieresis.case" value="1"/>
    <glyphgroup name="divide" value="1"/>
    <glyphgroup name="dkshade" value="1"/>
    <glyphgroup name="dnblock" value="1"/>
    <glyphgroup name="dollar" value="4"/>
    <glyphgroup name="dong" value="4"/>
    <glyphgroup name="dotaccent" value="1"/>
    <glyphgroup name="dotaccent.case" value="1"/>
    <glyphgroup name="dotbelowcomb" value="1"/>
    <glyphgroup name="dotlessi" value="3"/>
    <glyphgroup name="e" value="3"/>
    <glyphgroup name="eacute" value="3"/>
    <glyphgroup name="ebreve" value="3"/>
    <glyphgroup name="ecaron" value="3"/>
    <glyphgroup name="ecircumflex" value="3"/>
    <glyphgroup name="edieresis" value="3"/>
    <glyphgroup name="edotaccent" value="3"/>
    <glyphgroup name="egrave" value="3"/>
    <glyphgroup name="eight" value="4"/>
    <glyphgroup name="eight.dnom" value="1"/>
    <glyphgroup name="eight.numr" value="1"/>
    <glyphgroup name="element" value="1"/>
    <glyphgroup name="ellipsis" value="1"/>
    <glyphgroup name="emacron" value="3"/>
    <glyphgroup name="emdash" value="1"/>
    <glyphgroup name="emptyset" value="1"/>
    <glyphgroup name="endash" value="1"/>
    <glyphgroup name="eng" value="3"/>
    <glyphgroup name="eogonek" value="3"/>
    <glyphgroup name="equal" value="1"/>
    <glyphgroup name="equal_equal_equal.dlig" value="1"/>
    <glyphgroup name="equal_greater.dlig" value="1"/>
    <glyphgroup name="estimated" value="1"/>
    <glyphgroup name="eth" value="3"/>
    <glyphgroup name="exclam" value="1"/>
    <glyphgroup name="exclam_equal_equal.dlig" value="1"/>
    <glyphgroup name="exclamdown" value="1"/>
    <glyphgroup name="f" value="3"/>
    <glyphgroup name="figuredash" value="1"/>
    <glyphgroup name="five" value="4"/>
    <glyphgroup name="five.dnom" value="1"/>
    <glyphgroup name="five.numr" value="1"/>
    <glyphgroup name="florin" value="3"/>
    <glyphgroup name="four" value="4"/>
    <glyphgroup name="four.dnom" value="1"/>
    <glyphgroup name="four.numr" value="1"/>
    <glyphgroup name="fraction" value="1"/>
    <glyphgroup name="franc" value="4"/>
    <glyphgroup name="g" value="3"/>
    <glyphgroup name="gbreve" value="3"/>
    <glyphgroup name="gcaron" value="3"/>
    <glyphgroup name="gcircumflex" value="3"/>
    <glyphgroup name="gdotaccent" value="3"/>
    <glyphgroup name="germandbls" value="3"/>
    <glyphgroup name="grave" value="1"/>
    <glyphgroup name="grave.case" value="1"/>
    <glyphgroup name="gravecomb" value="1"/>
    <glyphgroup name="gravecomb.case" value="1"/>
    <glyphgroup name="greater" value="1"/>
    <glyphgroup name="greater_equal.dlig" value="1"/>
    <glyphgroup name="greaterequal" value="1"/>
    <glyphgroup name="guillemotleft" value="1"/>
    <glyphgroup name="guillemotright" value="1"/>
    <glyphgroup name="guilsinglleft" value="1"/>
    <glyphgroup name="guilsinglright" value="1"/>
    <glyphgroup name="h" value="3"/>
    <glyphgroup name="hbar" value="3"/>
    <glyphgroup name="hcircumflex" value="3"/>
    <glyphgroup name="heart" value="1"/>
    <glyphgroup name="hookabovecomb" value="1"/>
    <glyphgroup name="house" value="1"/>
    <glyphgroup name="hungarumlaut" value="1"/>
    <glyphgroup name="hungarumlaut.case" value="1"/>
    <glyphgroup name="hyphen" value="1"/>
    <glyphgroup name="hyphen_greater.dlig" value="1"/>
    <glyphgroup name="i" value="3"/>
    <glyphgroup name="i.loclTRK" value="1"/>
    <glyphgroup name="iacute" value="3"/>
    <glyphgroup name="ibreve" value="3"/>
    <glyphgroup name="icircumflex" value="3"/>
    <glyphgroup name="idieresis" value="3"/>
    <glyphgroup name="igrave" value="3"/>
    <glyphgroup name="imacron" value="3"/>
    <glyphgroup name="infinity" value="1"/>
    <glyphgroup name="integral" value="1"/>
    <glyphgroup name="invsmileface" value="1"/>
    <glyphgroup name="iogonek" value="3"/>
    <glyphgroup name="itilde" value="3"/>
    <glyphgroup name="j" value="3"/>
    <glyphgroup name="jcircumflex" value="3"/>
    <glyphgroup name="k" value="3"/>
    <glyphgroup name="kgreenlandic" value="3"/>
    <glyphgroup name="l" value="3"/>
    <glyphgroup name="lacute" value="3"/>
    <glyphgroup name="lcaron" value="3"/>
    <glyphgroup name="ldot" value="3"/>
    <glyphgroup name="less" value="1"/>
    <glyphgroup name="less_equal.dlig" value="1"/>
    <glyphgroup name="less_hyphen.dlig" value="1"/>
    <glyphgroup name="lessequal" value="1"/>
    <glyphgroup name="lfblock" value="1"/>
    <glyphgroup name="lira" value="4"/>
    <glyphgroup name="logicalnot" value="1"/>
    <glyphgroup name="lozenge" value="1"/>
    <glyphgroup name="lslash" value="3"/>
    <glyphgroup name="ltshade" value="1"/>
    <glyphgroup name="m" value="3"/>
    <glyphgroup name="macron" value="1"/>
    <glyphgroup name="minus" value="1"/>
    <glyphgroup name="minute" value="1"/>
    <glyphgroup name="multiply" value="1"/>
    <glyphgroup name="n" value="3"/>
    <glyphgroup name="nacute" value="3"/>
    <glyphgroup name="ncaron" value="3"/>
    <glyphgroup name="nine" value="4"/>
    <glyphgroup name="nine.dnom" value="1"/>
    <glyphgroup name="nine.numr" value="1"/>
    <glyphgroup name="notequal" value="1"/>
    <glyphgroup name="ntilde" value="3"/>
    <glyphgroup name="numbersign" value="1"/>
    <glyphgroup name="o" value="3"/>
    <glyphgroup name="oacute" value="3"/>
    <glyphgroup name="obreve" value="3"/>
    <glyphgroup name="ocircumflex" value="3"/>
    <glyphgroup name="odieresis" value="3"/>
    <glyphgroup name="oe" value="3"/>
    <glyphgroup name="ogonek" value="1"/>
    <glyphgroup name="ograve" value="3"/>
    <glyphgroup name="ohorn" value="3"/>
    <glyphgroup name="ohungarumlaut" value="3"/>
    <glyphgroup name="omacron" value="3"/>
    <glyphgroup name="one" value="4"/>
    <glyphgroup name="one.dnom" value="1"/>
    <glyphgroup name="one.numr" value="1"/>
    <glyphgroup name="onehalf" value="1"/>
    <glyphgroup name="onequarter" value="1"/>
    <glyphgroup name="ordfeminine" value="1"/>
    <glyphgroup name="ordmasculine" value="1"/>
    <glyphgroup name="oslash" value="3"/>
    <glyphgroup name="oslashacute" value="3"/>
    <glyphgroup name="otilde" value="3"/>
    <glyphgroup name="p" value="3"/>
    <glyphgroup name="paragraph" value="1"/>
    <glyphgroup name="parenleft" value="1"/>
    <glyphgroup name="parenright" value="1"/>
    <glyphgroup name="partialdiff" value="1"/>
    <glyphgroup name="percent" value="1"/>
    <glyphgroup name="period" value="1"/>
    <glyphgroup name="periodcentered" value="1"/>
    <glyphgroup name="periodcentered.loclCAT" value="1"/>
    <glyphgroup name="perthousand" value="1"/>
    <glyphgroup name="peseta" value="4"/>
    <glyphgroup name="plus" value="1"/>
    <glyphgroup name="plusminus" value="1"/>
    <glyphgroup name="product" value="1"/>
    <glyphgroup name="q" value="3"/>
    <glyphgroup name="question" value="1"/>
    <glyphgroup name="questiondown" value="1"/>
    <glyphgroup name="quotedbl" value="1"/>
    <glyphgroup name="quotedbl.ss03" value="1"/>
    <glyphgroup name="quotedblbase" value="1"/>
    <glyphgroup name="quotedblleft" value="1"/>
    <glyphgroup name="quotedblright" value="1"/>
    <glyphgroup name="quoteleft" value="1"/>
    <glyphgroup name="quoteright" value="1"/>
    <glyphgroup name="quotesinglbase" value="1"/>
    <glyphgroup name="quotesingle" value="1"/>
    <glyphgroup name="quotesingle.ss03" value="1"/>
    <glyphgroup name="r" value="3"/>
    <glyphgroup name="r.serif" value="1"/>
    <glyphgroup name="racute" value="3"/>
    <glyphgroup name="radical" value="1"/>
    <glyphgroup name="rcaron" value="3"/>
    <glyphgroup name="registered" value="1"/>
    <glyphgroup name="ring" value="1"/>
    <glyphgroup name="ring.case" value="1"/>
    <glyphgroup name="rtblock" value="1"/>
    <glyphgroup name="s" value="3"/>
    <glyphgroup name="sacute" value="3"/>
    <glyphgroup name="scaron" value="3"/>
    <glyphgroup name="scedilla" value="3"/>
    <glyphgroup name="scircumflex" value="3"/>
    <glyphgroup name="second" value="1"/>
    <glyphgroup name="section" value="1"/>
    <glyphgroup name="semicolon" value="1"/>
    <glyphgroup name="seven" value="4"/>
    <glyphgroup name="seven.dnom" value="1"/>
    <glyphgroup name="seven.numr" value="1"/>
    <glyphgroup name="shade" value="1"/>
    <glyphgroup name="six" value="4"/>
    <glyphgroup name="six.dnom" value="1"/>
    <glyphgroup name="six.numr" value="1"/>
    <glyphgroup name="slash" value="1"/>
    <glyphgroup name="smileface" value="1"/>
    <glyphgroup name="space" value="1"/>
    <glyphgroup name="spade" value="1"/>
    <glyphgroup name="sterling" value="4"/>
    <glyphgroup name="summation" value="1"/>
    <glyphgroup name="t" value="3"/>
    <glyphgroup name="tbar" value="3"/>
    <glyphgroup name="tcaron" value="3"/>
    <glyphgroup name="thorn" value="3"/>
    <glyphgroup name="three" value="4"/>
    <glyphgroup name="three.dnom" value="1"/>
    <glyphgroup name="three.numr" value="1"/>
    <glyphgroup name="threequarters" value="1"/>
    <glyphgroup name="tilde" value="1"/>
    <glyphgroup name="tilde.case" value="1"/>
    <glyphgroup name="tildecomb" value="1"/>
    <glyphgroup name="tildecomb.case" value="1"/>
    <glyphgroup name="tildecomb.i" value="1"/>
    <glyphgroup name="trademark" value="1"/>
    <glyphgroup name="two" value="4"/>
    <glyphgroup name="two.dnom" value="1"/>
    <glyphgroup name="two.numr" value="1"/>
    <glyphgroup name="u" value="3"/>
    <glyphgroup name="u.i" value="1"/>
    <glyphgroup name="uacute" value="3"/>
    <glyphgroup name="ubreve" value="3"/>
    <glyphgroup name="ucircumflex" value="3"/>
    <glyphgroup name="udieresis" value="3"/>
    <glyphgroup name="ugrave" value="3"/>
    <glyphgroup name="uhorn" value="3"/>
    <glyphgroup name="uhungarumlaut" value="3"/>
    <glyphgroup name="umacron" value="3"/>
    <glyphgroup name="underscore" value="1"/>
    <glyphgroup name="uni00A0" value="1"/>
    <glyphgroup name="uni00AD" value="1"/>
    <glyphgroup name="uni00B2" value="1"/>
    <glyphgroup name="uni00B3" value="1"/>
    <glyphgroup name="uni00B5" value="1"/>
    <glyphgroup name="uni00B9" value="1"/>
    <glyphgroup name="uni0122" value="2"/>
    <glyphgroup name="uni0123" value="3"/>
    <glyphgroup name="uni0136" value="2"/>
    <glyphgroup name="uni0137" value="3"/>
    <glyphgroup name="uni013B" value="2"/>
    <glyphgroup name="uni013C" value="3"/>
    <glyphgroup name="uni0145" value="2"/>
    <glyphgroup name="uni0146" value="3"/>
    <glyphgroup name="uni0156" value="2"/>
    <glyphgroup name="uni0157" value="3"/>
    <glyphgroup name="uni0162" value="2"/>
    <glyphgroup name="uni0163" value="3"/>
    <glyphgroup name="uni018F" value="2"/>
    <glyphgroup name="uni0198" value="1"/>
    <glyphgroup name="uni01B8" value="1"/>
    <glyphgroup name="uni01B9" value="1"/>
    <glyphgroup name="uni01C7" value="2"/>
    <glyphgroup name="uni01C8" value="2"/>
    <glyphgroup name="uni01C9" value="3"/>
    <glyphgroup name="uni01EA" value="2"/>
    <glyphgroup name="uni01EB" value="3"/>
    <glyphgroup name="uni0200" value="1"/>
    <glyphgroup name="uni0201" value="1"/>
    <glyphgroup name="uni0202" value="1"/>
    <glyphgroup name="uni0203" value="1"/>
    <glyphgroup name="uni0204" value="1"/>
    <glyphgroup name="uni0205" value="1"/>
    <glyphgroup name="uni0206" value="1"/>
    <glyphgroup name="uni0207" value="1"/>
    <glyphgroup name="uni0208" value="1"/>
    <glyphgroup name="uni0209" value="1"/>
    <glyphgroup name="uni020A" value="1"/>
    <glyphgroup name="uni020B" value="1"/>
    <glyphgroup name="uni020C" value="1"/>
    <glyphgroup name="uni020D" value="1"/>
    <glyphgroup name="uni020E" value="1"/>
    <glyphgroup name="uni020F" value="1"/>
    <glyphgroup name="uni0210" value="1"/>
    <glyphgroup name="uni0211" value="1"/>
    <glyphgroup name="uni0212" value="1"/>
    <glyphgroup name="uni0213" value="1"/>
    <glyphgroup name="uni0214" value="1"/>
    <glyphgroup name="uni0215" value="1"/>
    <glyphgroup name="uni0216" value="1"/>
    <glyphgroup name="uni0217" value="1"/>
    <glyphgroup name="uni0218" value="2"/>
    <glyphgroup name="uni0219" value="3"/>
    <glyphgroup name="uni021A" value="2"/>
    <glyphgroup name="uni021B" value="3"/>
    <glyphgroup name="uni022A" value="1"/>
    <glyphgroup name="uni022B" value="1"/>
    <glyphgroup name="uni022C" value="1"/>
    <glyphgroup name="uni022D" value="1"/>
    <glyphgroup name="uni0230" value="1"/>
    <glyphgroup name="uni0231" value="1"/>
    <glyphgroup name="uni0232" value="2"/>
    <glyphgroup name="uni0233" value="3"/>
    <glyphgroup name="uni0237" value="3"/>
    <glyphgroup name="uni024D" value="1"/>
    <glyphgroup name="uni0259" value="3"/>
    <glyphgroup name="uni027B" value="1"/>
    <glyphgroup name="uni0298" value="1"/>
    <glyphgroup name="uni029A" value="1"/>
    <glyphgroup name="uni02B9" value="1"/>
    <glyphgroup name="uni02BA" value="1"/>
    <glyphgroup name="uni02BB" value="1"/>
    <glyphgroup name="uni02BC" value="1"/>
    <glyphgroup name="uni02BE" value="1"/>
    <glyphgroup name="uni02BF" value="1"/>
    <glyphgroup name="uni02C8" value="1"/>
    <glyphgroup name="uni02C9" value="1"/>
    <glyphgroup name="uni02CA" value="1"/>
    <glyphgroup name="uni02CB" value="1"/>
    <glyphgroup name="uni02CC" value="1"/>
    <glyphgroup name="uni0302" value="1"/>
    <glyphgroup name="uni0302.case" value="1"/>
    <glyphgroup name="uni03020300" value="1"/>
    <glyphgroup name="uni03020300.case" value="1"/>
    <glyphgroup name="uni03020301" value="1"/>
    <glyphgroup name="uni03020301.case" value="1"/>
    <glyphgroup name="uni03020303" value="1"/>
    <glyphgroup name="uni03020303.case" value="1"/>
    <glyphgroup name="uni03020309" value="1"/>
    <glyphgroup name="uni03020309.case" value="1"/>
    <glyphgroup name="uni0304" value="1"/>
    <glyphgroup name="uni0306" value="1"/>
    <glyphgroup name="uni0306.case" value="1"/>
    <glyphgroup name="uni03060300" value="1"/>
    <glyphgroup name="uni03060301" value="1"/>
    <glyphgroup name="uni03060303" value="1"/>
    <glyphgroup name="uni03060309" value="1"/>
    <glyphgroup name="uni0307" value="1"/>
    <glyphgroup name="uni0307.case" value="1"/>
    <glyphgroup name="uni0308" value="1"/>
    <glyphgroup name="uni0308.case" value="1"/>
    <glyphgroup name="uni030A" value="1"/>
    <glyphgroup name="uni030A.case" value="1"/>
    <glyphgroup name="uni030B" value="1"/>
    <glyphgroup name="uni030B.case" value="1"/>
    <glyphgroup name="uni030C" value="1"/>
    <glyphgroup name="uni030C.alt" value="1"/>
    <glyphgroup name="uni030C.case" value="1"/>
    <glyphgroup name="uni030F" value="1"/>
    <glyphgroup name="uni0311" value="1"/>
    <glyphgroup name="uni0312" value="1"/>
    <glyphgroup name="uni031B" value="1"/>
    <glyphgroup name="uni031B.case" value="1"/>
    <glyphgroup name="uni0324" value="1"/>
    <glyphgroup name="uni0326" value="1"/>
    <glyphgroup name="uni0327" value="1"/>
    <glyphgroup name="uni0328" value="1"/>
    <glyphgroup name="uni032E" value="1"/>
    <glyphgroup name="uni0331" value="1"/>
    <glyphgroup name="uni0335" value="1"/>
    <glyphgroup name="uni0336" value="1"/>
    <glyphgroup name="uni0375" value="1"/>
    <glyphgroup name="uni1E08" value="1"/>
    <glyphgroup name="uni1E09" value="1"/>
    <glyphgroup name="uni1E0C" value="2"/>
    <glyphgroup name="uni1E0D" value="3"/>
    <glyphgroup name="uni1E0E" value="2"/>
    <glyphgroup name="uni1E0F" value="3"/>
    <glyphgroup name="uni1E14" value="1"/>
    <glyphgroup name="uni1E15" value="1"/>
    <glyphgroup name="uni1E16" value="1"/>
    <glyphgroup name="uni1E17" value="1"/>
    <glyphgroup name="uni1E1C" value="1"/>
    <glyphgroup name="uni1E1D" value="1"/>
    <glyphgroup name="uni1E20" value="2"/>
    <glyphgroup name="uni1E21" value="3"/>
    <glyphgroup name="uni1E24" value="2"/>
    <glyphgroup name="uni1E25" value="3"/>
    <glyphgroup name="uni1E2A" value="2"/>
    <glyphgroup name="uni1E2B" value="3"/>
    <glyphgroup name="uni1E2E" value="1"/>
    <glyphgroup name="uni1E2F" value="1"/>
    <glyphgroup name="uni1E36" value="2"/>
    <glyphgroup name="uni1E37" value="3"/>
    <glyphgroup name="uni1E3A" value="2"/>
    <glyphgroup name="uni1E3B" value="3"/>
    <glyphgroup name="uni1E42" value="2"/>
    <glyphgroup name="uni1E43" value="3"/>
    <glyphgroup name="uni1E44" value="2"/>
    <glyphgroup name="uni1E45" value="3"/>
    <glyphgroup name="uni1E46" value="2"/>
    <glyphgroup name="uni1E47" value="3"/>
    <glyphgroup name="uni1E48" value="2"/>
    <glyphgroup name="uni1E49" value="3"/>
    <glyphgroup name="uni1E4C" value="1"/>
    <glyphgroup name="uni1E4D" value="1"/>
    <glyphgroup name="uni1E4E" value="1"/>
    <glyphgroup name="uni1E4F" value="1"/>
    <glyphgroup name="uni1E50" value="1"/>
    <glyphgroup name="uni1E51" value="1"/>
    <glyphgroup name="uni1E52" value="1"/>
    <glyphgroup name="uni1E53" value="1"/>
    <glyphgroup name="uni1E5A" value="2"/>
    <glyphgroup name="uni1E5B" value="3"/>
    <glyphgroup name="uni1E5E" value="2"/>
    <glyphgroup name="uni1E5F" value="3"/>
    <glyphgroup name="uni1E60" value="2"/>
    <glyphgroup name="uni1E61" value="3"/>
    <glyphgroup name="uni1E62" value="2"/>
    <glyphgroup name="uni1E63" value="3"/>
    <glyphgroup name="uni1E64" value="1"/>
    <glyphgroup name="uni1E65" value="1"/>
    <glyphgroup name="uni1E66" value="1"/>
    <glyphgroup name="uni1E67" value="1"/>
    <glyphgroup name="uni1E68" value="1"/>
    <glyphgroup name="uni1E69" value="1"/>
    <glyphgroup name="uni1E6C" value="2"/>
    <glyphgroup name="uni1E6D" value="3"/>
    <glyphgroup name="uni1E6E" value="2"/>
    <glyphgroup name="uni1E6F" value="3"/>
    <glyphgroup name="uni1E78" value="1"/>
    <glyphgroup name="uni1E79" value="1"/>
    <glyphgroup name="uni1E7A" value="1"/>
    <glyphgroup name="uni1E7B" value="1"/>
    <glyphgroup name="uni1E8E" value="2"/>
    <glyphgroup name="uni1E8F" value="3"/>
    <glyphgroup name="uni1E92" value="2"/>
    <glyphgroup name="uni1E93" value="3"/>
    <glyphgroup name="uni1E97" value="3"/>
    <glyphgroup name="uni1E9E" value="1"/>
    <glyphgroup name="uni1EA0" value="2"/>
    <glyphgroup name="uni1EA1" value="3"/>
    <glyphgroup name="uni1EA2" value="2"/>
    <glyphgroup name="uni1EA3" value="3"/>
    <glyphgroup name="uni1EA4" value="2"/>
    <glyphgroup name="uni1EA5" value="3"/>
    <glyphgroup name="uni1EA6" value="2"/>
    <glyphgroup name="uni1EA7" value="3"/>
    <glyphgroup name="uni1EA8" value="2"/>
    <glyphgroup name="uni1EA9" value="3"/>
    <glyphgroup name="uni1EAA" value="2"/>
    <glyphgroup name="uni1EAB" value="3"/>
    <glyphgroup name="uni1EAC" value="2"/>
    <glyphgroup name="uni1EAD" value="3"/>
    <glyphgroup name="uni1EAE" value="2"/>
    <glyphgroup name="uni1EAF" value="3"/>
    <glyphgroup name="uni1EB0" value="2"/>
    <glyphgroup name="uni1EB1" value="3"/>
    <glyphgroup name="uni1EB2" value="2"/>
    <glyphgroup name="uni1EB3" value="3"/>
    <glyphgroup name="uni1EB4" value="2"/>
    <glyphgroup name="uni1EB5" value="3"/>
    <glyphgroup name="uni1EB6" value="2"/>
    <glyphgroup name="uni1EB7" value="3"/>
    <glyphgroup name="uni1EB8" value="2"/>
    <glyphgroup name="uni1EB9" value="3"/>
    <glyphgroup name="uni1EBA" value="2"/>
    <glyphgroup name="uni1EBB" value="3"/>
    <glyphgroup name="uni1EBC" value="2"/>
    <glyphgroup name="uni1EBD" value="3"/>
    <glyphgroup name="uni1EBE" value="2"/>
    <glyphgroup name="uni1EBF" value="3"/>
    <glyphgroup name="uni1EC0" value="2"/>
    <glyphgroup name="uni1EC1" value="3"/>
    <glyphgroup name="uni1EC2" value="2"/>
    <glyphgroup name="uni1EC3" value="3"/>
    <glyphgroup name="uni1EC4" value="2"/>
    <glyphgroup name="uni1EC5" value="3"/>
    <glyphgroup name="uni1EC6" value="2"/>
    <glyphgroup name="uni1EC7" value="3"/>
    <glyphgroup name="uni1EC8" value="2"/>
    <glyphgroup name="uni1EC9" value="3"/>
    <glyphgroup name="uni1ECA" value="2"/>
    <glyphgroup name="uni1ECB" value="3"/>
    <glyphgroup name="uni1ECC" value="2"/>
    <glyphgroup name="uni1ECD" value="3"/>
    <glyphgroup name="uni1ECE" value="2"/>
    <glyphgroup name="uni1ECF" value="3"/>
    <glyphgroup name="uni1ED0" value="2"/>
    <glyphgroup name="uni1ED1" value="3"/>
    <glyphgroup name="uni1ED2" value="2"/>
    <glyphgroup name="uni1ED3" value="3"/>
    <glyphgroup name="uni1ED4" value="2"/>
    <glyphgroup name="uni1ED5" value="3"/>
    <glyphgroup name="uni1ED6" value="2"/>
    <glyphgroup name="uni1ED7" value="3"/>
    <glyphgroup name="uni1ED8" value="2"/>
    <glyphgroup name="uni1ED9" value="3"/>
    <glyphgroup name="uni1EDA" value="2"/>
    <glyphgroup name="uni1EDB" value="3"/>
    <glyphgroup name="uni1EDC" value="2"/>
    <glyphgroup name="uni1EDD" value="3"/>
    <glyphgroup name="uni1EDE" value="2"/>
    <glyphgroup name="uni1EDF" value="3"/>
    <glyphgroup name="uni1EE0" value="2"/>
    <glyphgroup name="uni1EE1" value="3"/>
    <glyphgroup name="uni1EE2" value="2"/>
    <glyphgroup name="uni1EE3" value="3"/>
    <glyphgroup name="uni1EE4" value="2"/>
    <glyphgroup name="uni1EE5" value="3"/>
    <glyphgroup name="uni1EE6" value="2"/>
    <glyphgroup name="uni1EE7" value="3"/>
    <glyphgroup name="uni1EE8" value="2"/>
    <glyphgroup name="uni1EE9" value="3"/>
    <glyphgroup name="uni1EEA" value="2"/>
    <glyphgroup name="uni1EEB" value="3"/>
    <glyphgroup name="uni1EEC" value="2"/>
    <glyphgroup name="uni1EED" value="3"/>
    <glyphgroup name="uni1EEE" value="2"/>
    <glyphgroup name="uni1EEF" value="3"/>
    <glyphgroup name="uni1EF0" value="2"/>
    <glyphgroup name="uni1EF1" value="3"/>
    <glyphgroup name="uni1EF4" value="2"/>
    <glyphgroup name="uni1EF5" value="3"/>
    <glyphgroup name="uni1EF6" value="2"/>
    <glyphgroup name="uni1EF7" value="3"/>
    <glyphgroup name="uni1EF8" value="2"/>
    <glyphgroup name="uni1EF9" value="3"/>
    <glyphgroup name="uni2007" value="1"/>
    <glyphgroup name="uni2008" value="1"/>
    <glyphgroup name="uni2009" value="1"/>
    <glyphgroup name="uni200A" value="1"/>
    <glyphgroup name="uni200B" value="1"/>
    <glyphgroup name="uni2010" value="1"/>
    <glyphgroup name="uni2015" value="1"/>
    <glyphgroup name="uni2070" value="1"/>
    <glyphgroup name="uni2070.ss02" value="1"/>
    <glyphgroup name="uni2070.zero" value="1"/>
    <glyphgroup name="uni2074" value="1"/>
    <glyphgroup name="uni2075" value="1"/>
    <glyphgroup name="uni2076" value="1"/>
    <glyphgroup name="uni2077" value="1"/>
    <glyphgroup name="uni2078" value="1"/>
    <glyphgroup name="uni2079" value="1"/>
    <glyphgroup name="uni207B" value="1"/>
    <glyphgroup name="uni207F" value="1"/>
    <glyphgroup name="uni2080" value="1"/>
    <glyphgroup name="uni2080.ss02" value="1"/>
    <glyphgroup name="uni2080.zero" value="1"/>
    <glyphgroup name="uni2081" value="1"/>
    <glyphgroup name="uni2082" value="1"/>
    <glyphgroup name="uni2083" value="1"/>
    <glyphgroup name="uni2084" value="1"/>
    <glyphgroup name="uni2085" value="1"/>
    <glyphgroup name="uni2086" value="1"/>
    <glyphgroup name="uni2087" value="1"/>
    <glyphgroup name="uni2088" value="1"/>
    <glyphgroup name="uni2089" value="1"/>
    <glyphgroup name="uni20A6" value="4"/>
    <glyphgroup name="uni20A9" value="4"/>
    <glyphgroup name="uni20AD" value="4"/>
    <glyphgroup name="uni20B1" value="4"/>
    <glyphgroup name="uni20B2" value="1"/>
    <glyphgroup name="uni20B5" value="1"/>
    <glyphgroup name="uni20B9" value="1"/>
    <glyphgroup name="uni20BA" value="1"/>
    <glyphgroup name="uni20BC" value="1"/>
    <glyphgroup name="uni20BD" value="1"/>
    <glyphgroup name="uni2113" value="1"/>
    <glyphgroup name="uni2116" value="1"/>
    <glyphgroup name="uni2124" value="1"/>
    <glyphgroup name="uni2126" value="1"/>
    <glyphgroup name="uni2196" value="1"/>
    <glyphgroup name="uni2197" value="1"/>
    <glyphgroup name="uni2198" value="1"/>
    <glyphgroup name="uni2199" value="1"/>
    <glyphgroup name="uni21E6" value="1"/>
    <glyphgroup name="uni21E7" value="1"/>
    <glyphgroup name="uni21E8" value="1"/>
    <glyphgroup name="uni21E9" value="1"/>
    <glyphgroup name="uni21EA" value="1"/>
    <glyphgroup name="uni2206" value="1"/>
    <glyphgroup name="uni2215" value="1"/>
    <glyphgroup name="uni2219" value="1"/>
    <glyphgroup name="uni2318" value="1"/>
    <glyphgroup name="uni2325" value="1"/>
    <glyphgroup name="uni2326" value="1"/>
    <glyphgroup name="uni2327" value="1"/>
    <glyphgroup name="uni232B" value="1"/>
    <glyphgroup name="uni238B" value="1"/>
    <glyphgroup name="uni23CE" value="1"/>
    <glyphgroup name="uni2423" value="1"/>
    <glyphgroup name="uni2500" value="1"/>
    <glyphgroup name="uni2501" value="1"/>
    <glyphgroup name="uni2502" value="1"/>
    <glyphgroup name="uni2503" value="1"/>
    <glyphgroup name="uni2504" value="1"/>
    <glyphgroup name="uni2505" value="1"/>
    <glyphgroup name="uni2506" value="1"/>
    <glyphgroup name="uni2507" value="1"/>
    <glyphgroup name="uni2508" value="1"/>
    <glyphgroup name="uni2509" value="1"/>
    <glyphgroup name="uni250A" value="1"/>
    <glyphgroup name="uni250B" value="1"/>
    <glyphgroup name="uni250C" value="1"/>
    <glyphgroup name="uni250D" value="1"/>
    <glyphgroup name="uni250E" value="1"/>
    <glyphgroup name="uni250F" value="1"/>
    <glyphgroup name="uni2510" value="1"/>
    <glyphgroup name="uni2511" value="1"/>
    <glyphgroup name="uni2512" value="1"/>
    <glyphgroup name="uni2513" value="1"/>
    <glyphgroup name="uni2514" value="1"/>
    <glyphgroup name="uni2515" value="1"/>
    <glyphgroup name="uni2516" value="1"/>
    <glyphgroup name="uni2517" value="1"/>
    <glyphgroup name="uni2518" value="1"/>
    <glyphgroup name="uni2519" value="1"/>
    <glyphgroup name="uni251A" value="1"/>
    <glyphgroup name="uni251B" value="1"/>
    <glyphgroup name="uni251C" value="1"/>
    <glyphgroup name="uni251D" value="1"/>
    <glyphgroup name="uni251E" value="1"/>
    <glyphgroup name="uni251F" value="1"/>
    <glyphgroup name="uni2520" value="1"/>
    <glyphgroup name="uni2521" value="1"/>
    <glyphgroup name="uni2522" value="1"/>
    <glyphgroup name="uni2523" value="1"/>
    <glyphgroup name="uni2524" value="1"/>
    <glyphgroup name="uni2525" value="1"/>
    <glyphgroup name="uni2526" value="1"/>
    <glyphgroup name="uni2527" value="1"/>
    <glyphgroup name="uni2528" value="1"/>
    <glyphgroup name="uni2529" value="1"/>
    <glyphgroup name="uni252A" value="1"/>
    <glyphgroup name="uni252B" value="1"/>
    <glyphgroup name="uni252C" value="1"/>
    <glyphgroup name="uni252D" value="1"/>
    <glyphgroup name="uni252E" value="1"/>
    <glyphgroup name="uni252F" value="1"/>
    <glyphgroup name="uni2530" value="1"/>
    <glyphgroup name="uni2531" value="1"/>
    <glyphgroup name="uni2532" value="1"/>
    <glyphgroup name="uni2533" value="1"/>
    <glyphgroup name="uni2534" value="1"/>
    <glyphgroup name="uni2535" value="1"/>
    <glyphgroup name="uni2536" value="1"/>
    <glyphgroup name="uni2537" value="1"/>
    <glyphgroup name="uni2538" value="1"/>
    <glyphgroup name="uni2539" value="1"/>
    <glyphgroup name="uni253A" value="1"/>
    <glyphgroup name="uni253B" value="1"/>
    <glyphgroup name="uni253C" value="1"/>
    <glyphgroup name="uni253D" value="1"/>
    <glyphgroup name="uni253E" value="1"/>
    <glyphgroup name="uni253F" value="1"/>
    <glyphgroup name="uni2540" value="1"/>
    <glyphgroup name="uni2541" value="1"/>
    <glyphgroup name="uni2542" value="1"/>
    <glyphgroup name="uni2543" value="1"/>
    <glyphgroup name="uni2544" value="1"/>
    <glyphgroup name="uni2545" value="1"/>
    <glyphgroup name="uni2546" value="1"/>
    <glyphgroup name="uni2547" value="1"/>
    <glyphgroup name="uni2548" value="1"/>
    <glyphgroup name="uni2549" value="1"/>
    <glyphgroup name="uni254A" value="1"/>
    <glyphgroup name="uni254B" value="1"/>
    <glyphgroup name="uni254C" value="1"/>
    <glyphgroup name="uni254D" value="1"/>
    <glyphgroup name="uni254E" value="1"/>
    <glyphgroup name="uni254F" value="1"/>
    <glyphgroup name="uni2550" value="1"/>
    <glyphgroup name="uni2551" value="1"/>
    <glyphgroup name="uni2552" value="1"/>
    <glyphgroup name="uni2553" value="1"/>
    <glyphgroup name="uni2554" value="1"/>
    <glyphgroup name="uni2555" value="1"/>
    <glyphgroup name="uni2556" value="1"/>
    <glyphgroup name="uni2557" value="1"/>
    <glyphgroup name="uni2558" value="1"/>
    <glyphgroup name="uni2559" value="1"/>
    <glyphgroup name="uni255A" value="1"/>
    <glyphgroup name="uni255B" value="1"/>
    <glyphgroup name="uni255C" value="1"/>
    <glyphgroup name="uni255D" value="1"/>
    <glyphgroup name="uni255E" value="1"/>
    <glyphgroup name="uni255F" value="1"/>
    <glyphgroup name="uni2560" value="1"/>
    <glyphgroup name="uni2561" value="1"/>
    <glyphgroup name="uni2562" value="1"/>
    <glyphgroup name="uni2563" value="1"/>
    <glyphgroup name="uni2564" value="1"/>
    <glyphgroup name="uni2565" value="1"/>
    <glyphgroup name="uni2566" value="1"/>
    <glyphgroup name="uni2567" value="1"/>
    <glyphgroup name="uni2568" value="1"/>
    <glyphgroup name="uni2569" value="1"/>
    <glyphgroup name="uni256A" value="1"/>
    <glyphgroup name="uni256B" value="1"/>
    <glyphgroup name="uni256C" value="1"/>
    <glyphgroup name="uni256D" value="1"/>
    <glyphgroup name="uni256E" value="1"/>
    <glyphgroup name="uni256F" value="1"/>
    <glyphgroup name="uni2570" value="1"/>
    <glyphgroup name="uni2571" value="1"/>
    <glyphgroup name="uni2572" value="1"/>
    <glyphgroup name="uni2573" value="1"/>
    <glyphgroup name="uni2574" value="1"/>
    <glyphgroup name="uni2575" value="1"/>
    <glyphgroup name="uni2576" value="1"/>
    <glyphgroup name="uni2577" value="1"/>
    <glyphgroup name="uni2578" value="1"/>
    <glyphgroup name="uni2579" value="1"/>
    <glyphgroup name="uni257A" value="1"/>
    <glyphgroup name="uni257B" value="1"/>
    <glyphgroup name="uni257C" value="1"/>
    <glyphgroup name="uni257D" value="1"/>
    <glyphgroup name="uni257E" value="1"/>
    <glyphgroup name="uni257F" value="1"/>
    <glyphgroup name="uni2581" value="1"/>
    <glyphgroup name="uni2582" value="1"/>
    <glyphgroup name="uni2583" value="1"/>
    <glyphgroup name="uni2585" value="1"/>
    <glyphgroup name="uni2586" value="1"/>
    <glyphgroup name="uni2587" value="1"/>
    <glyphgroup name="uni2589" value="1"/>
    <glyphgroup name="uni258A" value="1"/>
    <glyphgroup name="uni258B" value="1"/>
    <glyphgroup name="uni258D" value="1"/>
    <glyphgroup name="uni258E" value="1"/>
    <glyphgroup name="uni258F" value="1"/>
    <glyphgroup name="uni2594" value="1"/>
    <glyphgroup name="uni2595" value="1"/>
    <glyphgroup name="uni2596" value="1"/>
    <glyphgroup name="uni2597" value="1"/>
    <glyphgroup name="uni2598" value="1"/>
    <glyphgroup name="uni2599" value="1"/>
    <glyphgroup name="uni259A" value="1"/>
    <glyphgroup name="uni259B" value="1"/>
    <glyphgroup name="uni259C" value="1"/>
    <glyphgroup name="uni259D" value="1"/>
    <glyphgroup name="uni259E" value="1"/>
    <glyphgroup name="uni259F" value="1"/>
    <glyphgroup name="uni25C6" value="1"/>
    <glyphgroup name="uni25C7" value="1"/>
    <glyphgroup name="uni25CF" value="1"/>
    <glyphgroup name="uni2639" value="1"/>
    <glyphgroup name="uni2713" value="1"/>
    <glyphgroup name="uni2714" value="1"/>
    <glyphgroup name="uni2715" value="1"/>
    <glyphgroup name="uni2717" value="1"/>
    <glyphgroup name="uni2718" value="1"/>
    <glyphgroup name="uni2B05" value="1"/>
    <glyphgroup name="uni2B06" value="1"/>
    <glyphgroup name="uni2B07" value="1"/>
    <glyphgroup name="uni2B95" value="1"/>
    <glyphgroup name="uni2E12" value="1"/>
    <glyphgroup name="uniFFFD" value="1"/>
    <glyphgroup name="uogonek" value="3"/>
    <glyphgroup name="upblock" value="1"/>
    <glyphgroup name="uring" value="3"/>
    <glyphgroup name="utilde" value="3"/>
    <glyphgroup name="v" value="3"/>
    <glyphgroup name="w" value="3"/>
    <glyphgroup name="wacute" value="3"/>
    <glyphgroup name="wcircumflex" value="3"/>
    <glyphgroup name="wdieresis" value="3"/>
    <glyphgroup name="wgrave" value="3"/>
    <glyphgroup name="x" value="3"/>
    <glyphgroup name="y" value="3"/>
    <glyphgroup name="yacute" value="3"/>
    <glyphgroup name="ycircumflex" value="3"/>
    <glyphgroup name="ydieresis" value="3"/>
    <glyphgroup name="yen" value="4"/>
    <glyphgroup name="ygrave" value="3"/>
    <glyphgroup name="z" value="3"/>
    <glyphgroup name="zacute" value="3"/>
    <glyphgroup name="zcaron" value="3"/>
    <glyphgroup name="zdotaccent" value="3"/>
    <glyphgroup name="zero" value="4"/>
    <glyphgroup name="zero.dnom" value="1"/>
    <glyphgroup name="zero.dnom.ss02" value="1"/>
    <glyphgroup name="zero.dnom.zero" value="1"/>
    <glyphgroup name="zero.numr" value="1"/>
    <glyphgroup name="zero.numr.ss02" value="1"/>
    <glyphgroup name="zero.numr.zero" value="1"/>
    <glyphgroup name="zero.ss02" value="1"/>
    <glyphgroup name="zero.zero" value="1"/>
  </TSI5>

  <maxp>
    <!-- Most of this table will be recalculated by the compiler -->
    <tableVersion value="0x10000"/>
    <numGlyphs value="964"/>
    <maxPoints value="168"/>
    <maxContours value="42"/>
    <maxCompositePoints value="111"/>
    <maxCompositeContours value="5"/>
    <maxZones value="2"/>
    <maxTwilightPoints value="16"/>
    <maxStorage value="47"/>
    <maxFunctionDefs value="154"/>
    <maxInstructionDefs value="0"/>
    <maxStackElements value="658"/>
    <maxSizeOfInstructions value="3971"/>
    <maxComponentElements value="3"/>
    <maxComponentDepth value="1"/>
  </maxp>

</ttFont>
